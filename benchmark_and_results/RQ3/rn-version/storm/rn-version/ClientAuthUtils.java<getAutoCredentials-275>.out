====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	ClientAuthUtils.java	methodSinagture:	org.apache.storm.security.auth.ClientAuthUtils.getAutoCredentials(Ljava/util/Map;)Ljava/util/Collection;	methodLines:	275:288
blockLines:	278:-1
paras:	null
TaintedStat:	NORMAL getAutoCredentials:conditional branch(eq, to iindex=35) 8,9 Node: < Application, Lorg/apache/storm/security/auth/ClientAuthUtils, getAutoCredentials(Ljava/util/Map;)Ljava/util/Collection; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/security/auth/ClientAuthUtils, getAutoCredentials(Ljava/util/Map;)Ljava/util/Collection; > Context: Everywhere[6]7 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 1,5 @11 exception:6
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/security/auth/ClientAuthUtils, getAutoCredentials(Ljava/util/Map;)Ljava/util/Collection; > Context: Everywhere[6]7 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 1,5 @11 exception:6
NORMAL getAutoCredentials:8 = checkcast <Application,Ljava/util/Collection>7 <Application,Ljava/util/Collection> Node: < Application, Lorg/apache/storm/security/auth/ClientAuthUtils, getAutoCredentials(Ljava/util/Map;)Ljava/util/Collection; > Context: Everywhere
NORMAL getAutoCredentials:conditional branch(eq, to iindex=35) 8,9 Node: < Application, Lorg/apache/storm/security/auth/ClientAuthUtils, getAutoCredentials(Ljava/util/Map;)Ljava/util/Collection; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
        try {
            Set<IAutoCredentials> autos = new HashSet<>();
            Collection<String> clazzes = (Collection<String>) topoConf.get(Config.TOPOLOGY_AUTO_CREDENTIALS);
            if (clazzes != null) {
                for (String clazz : clazzes) {
                    IAutoCredentials a = ReflectionUtils.newInstance(clazz);
                    a.prepare(topoConf);
                    autos.add(a);
                }
            }
            LOG.info("Got AutoCreds " + autos);
            return autos;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/daemon/worker/Worker, start()V > Context: Everywhere, blocks=[BB[SSA:117..117]57 - org.apache.storm.daemon.worker.Worker.start()V, BB[SSA:114..116]56 - org.apache.storm.daemon.worker.Worker.start()V, BB[SSA:118..118]58 - org.apache.storm.daemon.worker.Worker.start()V, BB[SSA:-1..-2]66 - org.apache.storm.daemon.worker.Worker.start()V], numberOfBasicBlocks=4, firstLineNumber=201, lastLineNumber=201, firstMethodNumber=174, lastMethodNumber=208, isFirstLineValid=true, methodSrcCode=
    public void start() throws Exception {
        LOG.info("Launching worker for {} on {}:{} with id {} and conf {}", topologyId, assignmentId, port, workerId,
                 ConfigUtils.maskPasswords(conf));
        // because in local mode, its not a separate
        // process. supervisor will register it in this case
        // if ConfigUtils.isLocalMode(conf) returns false then it is in distributed mode.
        if (!ConfigUtils.isLocalMode(conf)) {
            // Distributed mode
            SysOutOverSLF4J.sendSystemOutAndErrToSLF4J();
            String pid = Utils.processPid();
            FileUtils.touch(new File(ConfigUtils.workerPidPath(conf, workerId, pid)));
            FileUtils.writeStringToFile(new File(ConfigUtils.workerArtifactsPidPath(conf, topologyId, port)), pid,
                                        Charset.forName("UTF-8"));
        }

        ClusterStateContext csContext = new ClusterStateContext(DaemonType.WORKER, topologyConf);
        IStateStorage stateStorage = ClusterUtils.mkStateStorage(conf, topologyConf, csContext);
        IStormClusterState stormClusterState = ClusterUtils.mkStormClusterState(stateStorage, null, csContext);

        metricRegistry.start(topologyConf, port);
        SharedMetricRegistries.add(WORKER_METRICS_REGISTRY, metricRegistry.getRegistry());

        Credentials initialCredentials = stormClusterState.credentials(topologyId, null);
        Map<String, String> initCreds = new HashMap<>();
        if (initialCredentials != null) {
            initCreds.putAll(initialCredentials.get_creds());
        }
        autoCreds = ClientAuthUtils.getAutoCredentials(topologyConf);
        subject = ClientAuthUtils.populateSubject(null, autoCreds, initCreds);

        Subject.doAs(subject, (PrivilegedExceptionAction<Object>)
            () -> loadWorker(stateStorage, stormClusterState, initCreds, initialCredentials)
        );

    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/StormSubmitter, populateCredentials(Ljava/util/Map;Ljava/util/Map;)Ljava/util/Map; > Context: Everywhere, blocks=[BB[SSA:3..5]3 - org.apache.storm.StormSubmitter.populateCredentials(Ljava/util/Map;Ljava/util/Map;)Ljava/util/Map;, BB[SSA:1..2]2 - org.apache.storm.StormSubmitter.populateCredentials(Ljava/util/Map;Ljava/util/Map;)Ljava/util/Map;, BB[SSA:6..6]4 - org.apache.storm.StormSubmitter.populateCredentials(Ljava/util/Map;Ljava/util/Map;)Ljava/util/Map;, BB[SSA:-1..-2]17 - org.apache.storm.StormSubmitter.populateCredentials(Ljava/util/Map;Ljava/util/Map;)Ljava/util/Map;], numberOfBasicBlocks=4, firstLineNumber=94, lastLineNumber=95, firstMethodNumber=93, lastMethodNumber=102, isFirstLineValid=true, methodSrcCode=
    private static Map<String, String> populateCredentials(Map<String, Object> conf, Map<String, String> creds) {
        Map<String, String> ret = new HashMap<>();
        for (IAutoCredentials autoCred : ClientAuthUtils.getAutoCredentials(conf)) {
            LOG.info("Running " + autoCred);
            autoCred.populateCredentials(ret);
        }
        if (creds != null) {
            ret.putAll(creds);
        }
        return ret;
    }
}
