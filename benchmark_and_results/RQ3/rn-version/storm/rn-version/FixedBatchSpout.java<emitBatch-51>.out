====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	FixedBatchSpout.java	methodSinagture:	org.apache.storm.trident.testing.FixedBatchSpout.emitBatch(JLorg/apache/storm/trident/operation/TridentCollector;)V	methodLines:	51:66
blockLines:	53:-1
paras:	null
TaintedStat:	NORMAL emitBatch:conditional branch(ne, to iindex=65) 10,11 Node: < Application, Lorg/apache/storm/trident/testing/FixedBatchSpout, emitBatch(JLorg/apache/storm/trident/operation/TridentCollector;)V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/trident/testing/FixedBatchSpout, emitBatch(JLorg/apache/storm/trident/operation/TridentCollector;)V > Context: Everywhere[4]9 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 5,7 @8 exception:8
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/trident/testing/FixedBatchSpout, emitBatch(JLorg/apache/storm/trident/operation/TridentCollector;)V > Context: Everywhere[4]9 = invokevirtual < Application, Ljava/util/HashMap, get(Ljava/lang/Object;)Ljava/lang/Object; > 5,7 @8 exception:8
NORMAL emitBatch:10 = checkcast <Application,Ljava/util/List>9 <Application,Ljava/util/List> Node: < Application, Lorg/apache/storm/trident/testing/FixedBatchSpout, emitBatch(JLorg/apache/storm/trident/operation/TridentCollector;)V > Context: Everywhere
NORMAL emitBatch:conditional branch(ne, to iindex=65) 10,11 Node: < Application, Lorg/apache/storm/trident/testing/FixedBatchSpout, emitBatch(JLorg/apache/storm/trident/operation/TridentCollector;)V > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
    public void emitBatch(long batchId, TridentCollector collector) {
        List<List<Object>> batch = this.batches.get(batchId);
        if (batch == null) {
            batch = new ArrayList<List<Object>>();
            if (index >= outputs.length && cycle) {
                index = 0;
            }
            for (int i = 0; index < outputs.length && i < maxBatchSize; index++, i++) {
                batch.add(outputs[index]);
            }
            this.batches.put(batchId, batch);
        }
        for (List<Object> list : batch) {
            collector.emit(list);
        }
    }



====================ctx:=======================
