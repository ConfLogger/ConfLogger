====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	ClientAuthUtils.java	methodSinagture:	org.apache.storm.security.auth.ClientAuthUtils.makeDigestPayload(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String;	methodLines:	488:509
blockLines:	499:-1
paras:	null
TaintedStat:	NORMAL makeDigestPayload:conditional branch(ne, to iindex=32) 22,4 Node: < Application, Lorg/apache/storm/security/auth/ClientAuthUtils, makeDigestPayload(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/security/auth/ClientAuthUtils, makeDigestPayload(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere[15]13 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 6,11 @30 exception:12
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/security/auth/ClientAuthUtils, makeDigestPayload(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere[15]13 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 6,11 @30 exception:12
NORMAL makeDigestPayload:14 = checkcast <Application,Ljava/lang/String>13 <Application,Ljava/lang/String> Node: < Application, Lorg/apache/storm/security/auth/ClientAuthUtils, makeDigestPayload(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere
PHI Node: < Application, Lorg/apache/storm/security/auth/ClientAuthUtils, makeDigestPayload(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere:22 = phi  14,4
NORMAL makeDigestPayload:conditional branch(ne, to iindex=32) 22,4 Node: < Application, Lorg/apache/storm/security/auth/ClientAuthUtils, makeDigestPayload(Ljava/util/Map;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
    public static String makeDigestPayload(Map<String, Object> topoConf, String configSection) {
        String username = null;
        String password = null;
        try {
            Map<String, ?> results = ClientAuthUtils.pullConfig(topoConf, configSection);
            username = (String) results.get(USERNAME);
            password = (String) results.get(PASSWORD);
        } catch (Exception e) {
            LOG.error("Failed to pull username/password out of jaas conf", e);
        }

        if (username == null || password == null) {
            return null;
        }

        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-512");
            byte[] output = digest.digest((username + ":" + password).getBytes());
            return Hex.encodeHexString(output);
        } catch (java.security.NoSuchAlgorithmException e) {
            LOG.error("Cant run SHA-512 digest. Algorithm not available.", e);
            throw new RuntimeException(e);
        }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/pacemaker/PacemakerClient, <init>(Ljava/util/Map;Ljava/lang/String;)V > Context: Everywhere, blocks=[BB[SSA:72..75]29 - org.apache.storm.pacemaker.PacemakerClient.<init>(Ljava/util/Map;Ljava/lang/String;)V, BB[SSA:69..71]28 - org.apache.storm.pacemaker.PacemakerClient.<init>(Ljava/util/Map;Ljava/lang/String;)V, BB[SSA:76..76]30 - org.apache.storm.pacemaker.PacemakerClient.<init>(Ljava/util/Map;Ljava/lang/String;)V, BB[SSA:-1..-2]108 - org.apache.storm.pacemaker.PacemakerClient.<init>(Ljava/util/Map;Ljava/lang/String;)V], numberOfBasicBlocks=4, firstLineNumber=76, lastLineNumber=77, firstMethodNumber=63, lastMethodNumber=122, isFirstLineValid=true, methodSrcCode=

    public PacemakerClient(Map<String, Object> config, String host) {
        this.host = host;
        clientName = (String) config.get(Config.TOPOLOGY_NAME);
        if (clientName == null) {
            clientName = "pacemaker-client";
        }

        String auth = (String) config.get(Config.PACEMAKER_AUTH_METHOD);

        switch (auth) {

            case "DIGEST":
                authMethod = ThriftNettyClientCodec.AuthMethod.DIGEST;
                secret = ClientAuthUtils.makeDigestPayload(config, ClientAuthUtils.LOGIN_CONTEXT_PACEMAKER_DIGEST);
                if (secret == null) {
                    LOG.error("Can't start pacemaker server without digest secret.");
                    throw new RuntimeException("Can't start pacemaker server without digest secret.");
                }
                break;

            case "KERBEROS":
                authMethod = ThriftNettyClientCodec.AuthMethod.KERBEROS;
                break;

            case "NONE":
                authMethod = ThriftNettyClientCodec.AuthMethod.NONE;
                break;

            default:
                authMethod = ThriftNettyClientCodec.AuthMethod.NONE;
                LOG.warn("Invalid auth scheme: '{}'. Falling back to 'NONE'", auth);
                break;
        }

        ready = new AtomicBoolean(false);
        shutdown = new AtomicBoolean(false);
        channelRef = new AtomicReference<>(null);
        setupMessaging();

        ThreadFactory workerFactory = new NettyRenameThreadFactory(this.host + "-pm");
        // 0 means DEFAULT_EVENT_LOOP_THREADS
        // https://github.com/netty/netty/blob/netty-4.1.24.Final/transport/src/main/java/io/netty/channel/MultithreadEventLoopGroup.java#L40
        int maxWorkers = (int) config.get(Config.PACEMAKER_CLIENT_MAX_THREADS);
        this.workerEventLoopGroup = new NioEventLoopGroup(maxWorkers > 0 ? maxWorkers : 0, workerFactory);
        int thriftMessageMaxSize = (Integer) config.get(Config.PACEMAKER_THRIFT_MESSAGE_SIZE_MAX);
        bootstrap = new Bootstrap()
            .group(workerEventLoopGroup)
            .channel(NioSocketChannel.class)
            .option(ChannelOption.TCP_NODELAY, true)
            .option(ChannelOption.SO_SNDBUF, 5242880)
            .option(ChannelOption.SO_KEEPALIVE, true)
            .option(ChannelOption.WRITE_BUFFER_WATER_MARK, new WriteBufferWaterMark(8 * 1024, 32 * 1024))
            .option(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT)
            .handler(new ThriftNettyClientCodec(this, config, authMethod, host, thriftMessageMaxSize));

        int port = (int) config.get(Config.PACEMAKER_PORT);
        remoteAddr = new InetSocketAddress(host, port);
        bootstrap.connect(remoteAddr);
    }

}
