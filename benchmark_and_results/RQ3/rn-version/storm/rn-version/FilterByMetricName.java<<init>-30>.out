====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	FilterByMetricName.java	methodSinagture:	org.apache.storm.metric.filter.FilterByMetricName.<init>(Ljava/util/List;Ljava/util/List;)V	methodLines:	30:55
blockLines:	33:-1
paras:	null
TaintedStat:	NORMAL <init>:conditional branch(ne, to iindex=12) 2,7 Node: < Application, Lorg/apache/storm/metric/filter/FilterByMetricName, <init>(Ljava/util/List;Ljava/util/List;)V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/daemon/StormCommon, metricsConsumerBoltSpecs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)Ljava/util/Map; > Context: Everywhere[98]78 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 47,76 @254 exception:77
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/daemon/StormCommon, metricsConsumerBoltSpecs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)Ljava/util/Map; > Context: Everywhere[98]78 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 47,76 @254 exception:77
NORMAL metricsConsumerBoltSpecs:[null]: 79 = checkcast <Application,Ljava/util/List>78 <Application,Ljava/util/List> Node: < Application, Lorg/apache/storm/daemon/StormCommon, metricsConsumerBoltSpecs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)Ljava/util/Map; > Context: Everywhere
PARAM_CALLER:Node: < Application, Lorg/apache/storm/daemon/StormCommon, metricsConsumerBoltSpecs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)Ljava/util/Map; > Context: Everywhere[110]invokespecial < Application, Lorg/apache/storm/metric/filter/FilterByMetricName, <init>(Ljava/util/List;Ljava/util/List;)V > 84,79,83 @287 exception:85 v79
PARAM_CALLEE:Node: < Application, Lorg/apache/storm/metric/filter/FilterByMetricName, <init>(Ljava/util/List;Ljava/util/List;)V > Context: Everywhere v2
NORMAL <init>:conditional branch(ne, to iindex=12) 2,7 Node: < Application, Lorg/apache/storm/metric/filter/FilterByMetricName, <init>(Ljava/util/List;Ljava/util/List;)V > Context: Everywhere

-------------TaintedSinkInfo----------
fileName:	FilterByMetricName.java	methodSinagture:	org.apache.storm.metric.filter.FilterByMetricName.<init>(Ljava/util/List;Ljava/util/List;)V	methodLines:	30:55
blockLines:	40:-1
paras:	null
TaintedStat:	NORMAL <init>:conditional branch(ne, to iindex=24) 3,7 Node: < Application, Lorg/apache/storm/metric/filter/FilterByMetricName, <init>(Ljava/util/List;Ljava/util/List;)V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/daemon/StormCommon, metricsConsumerBoltSpecs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)Ljava/util/Map; > Context: Everywhere[103]82 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 47,80 @269 exception:81
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/daemon/StormCommon, metricsConsumerBoltSpecs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)Ljava/util/Map; > Context: Everywhere[103]82 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 47,80 @269 exception:81
NORMAL metricsConsumerBoltSpecs:[null]: 83 = checkcast <Application,Ljava/util/List>82 <Application,Ljava/util/List> Node: < Application, Lorg/apache/storm/daemon/StormCommon, metricsConsumerBoltSpecs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)Ljava/util/Map; > Context: Everywhere
PARAM_CALLER:Node: < Application, Lorg/apache/storm/daemon/StormCommon, metricsConsumerBoltSpecs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)Ljava/util/Map; > Context: Everywhere[110]invokespecial < Application, Lorg/apache/storm/metric/filter/FilterByMetricName, <init>(Ljava/util/List;Ljava/util/List;)V > 84,79,83 @287 exception:85 v83
PARAM_CALLEE:Node: < Application, Lorg/apache/storm/metric/filter/FilterByMetricName, <init>(Ljava/util/List;Ljava/util/List;)V > Context: Everywhere v3
NORMAL <init>:conditional branch(ne, to iindex=24) 3,7 Node: < Application, Lorg/apache/storm/metric/filter/FilterByMetricName, <init>(Ljava/util/List;Ljava/util/List;)V > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================

    public FilterByMetricName(List<String> whitelistPattern, List<String> blacklistPattern) {
        // guard NPE
        if (whitelistPattern == null) {
            this.whitelistPattern = Collections.emptyList();
        } else {
            this.whitelistPattern = convertPatternStringsToPatternInstances(whitelistPattern);
        }

        // guard NPE
        if (blacklistPattern == null) {
            this.blacklistPattern = Collections.emptyList();
        } else {
            this.blacklistPattern = convertPatternStringsToPatternInstances(blacklistPattern);
        }

        if (this.whitelistPattern.isEmpty() && this.blacklistPattern.isEmpty()) {
            noneSpecified = true;
        } else if (!this.whitelistPattern.isEmpty() && !this.blacklistPattern.isEmpty()) {
            throw new IllegalArgumentException("You have to specify either includes or excludes, or none.");
        }

        filterCache = CacheBuilder.newBuilder()
                                  .maximumSize(1000)
                                  .build();
    }



====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/daemon/StormCommon, metricsConsumerBoltSpecs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)Ljava/util/Map; > Context: Everywhere, blocks=[BB[SSA:107..110]49 - org.apache.storm.daemon.StormCommon.metricsConsumerBoltSpecs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)Ljava/util/Map;, BB[SSA:105..106]48 - org.apache.storm.daemon.StormCommon.metricsConsumerBoltSpecs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)Ljava/util/Map;, BB[SSA:111..114]50 - org.apache.storm.daemon.StormCommon.metricsConsumerBoltSpecs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)Ljava/util/Map;, BB[SSA:-1..-2]78 - org.apache.storm.daemon.StormCommon.metricsConsumerBoltSpecs(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)Ljava/util/Map;], numberOfBasicBlocks=4, firstLineNumber=389, lastLineNumber=392, firstMethodNumber=364, lastMethodNumber=416, isFirstLineValid=true, methodSrcCode=
    public static Map<String, Bolt> metricsConsumerBoltSpecs(Map<String, Object> conf, StormTopology topology) {
        Map<String, Bolt> metricsConsumerBolts = new HashMap<>();

        Set<String> componentIdsEmitMetrics = new HashSet<>();
        componentIdsEmitMetrics.addAll(allComponents(topology).keySet());
        componentIdsEmitMetrics.add(Constants.SYSTEM_COMPONENT_ID);

        Map<GlobalStreamId, Grouping> inputs = new HashMap<>();
        for (String componentId : componentIdsEmitMetrics) {
            inputs.put(Utils.getGlobalStreamId(componentId, Constants.METRICS_STREAM_ID), Thrift.prepareShuffleGrouping());
        }

        List<Map<String, Object>> registerInfo = (List<Map<String, Object>>) conf.get(Config.TOPOLOGY_METRICS_CONSUMER_REGISTER);
        if (registerInfo != null) {
            Map<String, Integer> classOccurrencesMap = new HashMap<>();
            for (Map<String, Object> info : registerInfo) {
                String className = (String) info.get(TOPOLOGY_METRICS_CONSUMER_CLASS);
                Object argument = info.get(TOPOLOGY_METRICS_CONSUMER_ARGUMENT);
                Integer maxRetainMetricTuples = ObjectReader.getInt(info.get(
                    TOPOLOGY_METRICS_CONSUMER_MAX_RETAIN_METRIC_TUPLES), 100);
                Integer phintNum = ObjectReader.getInt(info.get(TOPOLOGY_METRICS_CONSUMER_PARALLELISM_HINT), 1);
                Map<String, Object> metricsConsumerConf = new HashMap<>();
                metricsConsumerConf.put(Config.TOPOLOGY_TASKS, phintNum);
                List<String> whitelist = (List<String>) info.get(
                    TOPOLOGY_METRICS_CONSUMER_WHITELIST);
                List<String> blacklist = (List<String>) info.get(
                    TOPOLOGY_METRICS_CONSUMER_BLACKLIST);
                FilterByMetricName filterPredicate = new FilterByMetricName(whitelist, blacklist);
                Boolean expandMapType = ObjectReader.getBoolean(info.get(
                    TOPOLOGY_METRICS_CONSUMER_EXPAND_MAP_TYPE), false);
                String metricNameSeparator = ObjectReader.getString(info.get(
                    TOPOLOGY_METRICS_CONSUMER_METRIC_NAME_SEPARATOR), ".");
                DataPointExpander expander = new DataPointExpander(expandMapType, metricNameSeparator);
                MetricsConsumerBolt boltInstance = new MetricsConsumerBolt(className, argument,
                                                                           maxRetainMetricTuples, filterPredicate, expander);
                Bolt metricsConsumerBolt = Thrift.prepareSerializedBoltDetails(inputs,
                                                                               boltInstance, null, phintNum, metricsConsumerConf);

                String id;
                if (classOccurrencesMap.containsKey(className)) {
                    // e.g. [\"a\", \"b\", \"a\"]) => [\"a\", \"b\", \"a#2\"]"
                    int occurrenceNum = classOccurrencesMap.get(className);
                    occurrenceNum++;
                    classOccurrencesMap.put(className, occurrenceNum);
                    id = Constants.METRICS_COMPONENT_ID_PREFIX + className + "#" + occurrenceNum;
                } else {
                    id = Constants.METRICS_COMPONENT_ID_PREFIX + className;
                    classOccurrencesMap.put(className, 1);
                }
                metricsConsumerBolts.put(id, metricsConsumerBolt);
            }
        }
        return metricsConsumerBolts;
    }
}
