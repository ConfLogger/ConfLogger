====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	Utils.java	methodSinagture:	org.apache.storm.utils.Utils.normalizeConf(Ljava/util/Map;)Ljava/util/Map;	methodLines:	1146:1154
blockLines:	1147:-1
paras:	null
TaintedStat:	NORMAL normalizeConf:conditional branch(ne, to iindex=7) 1,3 Node: < Application, Lorg/apache/storm/utils/Utils, normalizeConf(Ljava/util/Map;)Ljava/util/Map; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/utils/Utils, normalizeConf(Ljava/util/Map;)Ljava/util/Map; > Context: Everywhere[29]20 = invokeinterface < Application, Ljava/util/Map$Entry, getValue()Ljava/lang/Object; > 15 @63 exception:19
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/utils/Utils, normalizeConf(Ljava/util/Map;)Ljava/util/Map; > Context: Everywhere[29]20 = invokeinterface < Application, Ljava/util/Map$Entry, getValue()Ljava/lang/Object; > 15 @63 exception:19
PARAM_CALLER:Node: < Application, Lorg/apache/storm/utils/Utils, normalizeConf(Ljava/util/Map;)Ljava/util/Map; > Context: Everywhere[30]22 = invokestatic < Application, Lorg/apache/storm/utils/Utils, normalizeConfValue(Ljava/lang/Object;)Ljava/lang/Object; > 20 @68 exception:21 v20
PARAM_CALLEE:Node: < Application, Lorg/apache/storm/utils/Utils, normalizeConfValue(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere v1
NORMAL normalizeConfValue:32 = checkcast <Application,Ljava/util/Map>1 <Application,Ljava/util/Map> Node: < Application, Lorg/apache/storm/utils/Utils, normalizeConfValue(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere
NORMAL normalizeConfValue:34 = invokestatic < Application, Lorg/apache/storm/utils/Utils, normalizeConf(Ljava/util/Map;)Ljava/util/Map; > 32 @11 exception:33 Node: < Application, Lorg/apache/storm/utils/Utils, normalizeConfValue(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere
METHOD_ENTRY:Node: < Application, Lorg/apache/storm/utils/Utils, normalizeConf(Ljava/util/Map;)Ljava/util/Map; > Context: Everywhere
NORMAL normalizeConf:conditional branch(ne, to iindex=7) 1,3 Node: < Application, Lorg/apache/storm/utils/Utils, normalizeConf(Ljava/util/Map;)Ljava/util/Map; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
    private static Map<String, Object> normalizeConf(Map<String, Object> conf) {
        if (conf == null) {
            return new HashMap<>();
        }
        Map<String, Object> ret = new HashMap<>(conf);
        for (Map.Entry<String, Object> entry : ret.entrySet()) {
            ret.put(entry.getKey(), normalizeConfValue(entry.getValue()));
        }
        return ret;
    }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/utils/Utils, isValidConf(Ljava/util/Map;)Z > Context: Everywhere, blocks=[BB[SSA:0..1]1 - org.apache.storm.utils.Utils.isValidConf(Ljava/util/Map;)Z, BB[SSA:-1..-2]0 - org.apache.storm.utils.Utils.isValidConf(Ljava/util/Map;)Z, BB[SSA:2..4]2 - org.apache.storm.utils.Utils.isValidConf(Ljava/util/Map;)Z, BB[SSA:-1..-2]10 - org.apache.storm.utils.Utils.isValidConf(Ljava/util/Map;)Z, BB[SSA:7..7]5 - org.apache.storm.utils.Utils.isValidConf(Ljava/util/Map;)Z, BB[SSA:6..6]4 - org.apache.storm.utils.Utils.isValidConf(Ljava/util/Map;)Z, BB[SSA:8..11]6 - org.apache.storm.utils.Utils.isValidConf(Ljava/util/Map;)Z, BB[SSA:-1..-2]10 - org.apache.storm.utils.Utils.isValidConf(Ljava/util/Map;)Z], numberOfBasicBlocks=8, firstLineNumber=1162, lastLineNumber=1163, firstMethodNumber=1158, lastMethodNumber=1167, isFirstLineValid=false, methodSrcCode=
    public static boolean isValidConf(Map<String, Object> topoConfIn) {
        Map<String, Object> origTopoConf = normalizeConf(topoConfIn);
        try {
            Map<String, Object> deserTopoConf = normalizeConf(
                (Map<String, Object>) JSONValue.parseWithException(JSONValue.toJSONString(topoConfIn)));
            return isValidConf(origTopoConf, deserTopoConf);
        } catch (ParseException e) {
            LOG.error("Json serialized config could not be deserialized", e);
        }
        return false;
    }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/utils/Utils, normalizeConfValue(Ljava/lang/Object;)Ljava/lang/Object; > Context: Everywhere, blocks=[BB[SSA:6..6]3 - org.apache.storm.utils.Utils.normalizeConfValue(Ljava/lang/Object;)Ljava/lang/Object;, BB[SSA:4..5]2 - org.apache.storm.utils.Utils.normalizeConfValue(Ljava/lang/Object;)Ljava/lang/Object;, BB[SSA:7..7]4 - org.apache.storm.utils.Utils.normalizeConfValue(Ljava/lang/Object;)Ljava/lang/Object;, BB[SSA:-1..-2]28 - org.apache.storm.utils.Utils.normalizeConfValue(Ljava/lang/Object;)Ljava/lang/Object;], numberOfBasicBlocks=4, firstLineNumber=1129, lastLineNumber=1129, firstMethodNumber=1127, lastMethodNumber=1142, isFirstLineValid=true, methodSrcCode=
    private static Object normalizeConfValue(Object obj) {
        if (obj instanceof Map) {
            return normalizeConf((Map<String, Object>) obj);
        } else if (obj instanceof Collection) {
            List<Object> confList = new ArrayList<>((Collection<Object>) obj);
            for (int i = 0; i < confList.size(); i++) {
                Object val = confList.get(i);
                confList.set(i, normalizeConfValue(val));
            }
            return confList;
        } else if (obj instanceof Integer) {
            return ((Number) obj).longValue();
        } else if (obj instanceof Float) {
            return ((Float) obj).doubleValue();
        } else {
            return obj;
        }
}
