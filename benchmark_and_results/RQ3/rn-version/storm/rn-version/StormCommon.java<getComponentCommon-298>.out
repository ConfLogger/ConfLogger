====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	StormCommon.java	methodSinagture:	org.apache.storm.daemon.StormCommon.getComponentCommon(Ljava/lang/Object;)Lorg/apache/storm/generated/ComponentCommon;	methodLines:	298:307
blockLines:	304:-1
paras:	null
TaintedStat:	NORMAL getComponentCommon:conditional branch(eq, to iindex=28) 7,5 Node: < Application, Lorg/apache/storm/daemon/StormCommon, getComponentCommon(Ljava/lang/Object;)Lorg/apache/storm/generated/ComponentCommon; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/daemon/nimbus/Nimbus, addBoltAggStats(Lorg/apache/storm/generated/TopologyPageInfo;Lorg/apache/storm/generated/StormTopology;Ljava/util/Map;Z)V > Context: Everywhere[27]57 = invokeinterface < Application, Ljava/util/Map$Entry, getValue()Ljava/lang/Object; > 52 @71 exception:56
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/daemon/nimbus/Nimbus, addBoltAggStats(Lorg/apache/storm/generated/TopologyPageInfo;Lorg/apache/storm/generated/StormTopology;Ljava/util/Map;Z)V > Context: Everywhere[27]57 = invokeinterface < Application, Ljava/util/Map$Entry, getValue()Ljava/lang/Object; > 52 @71 exception:56
NORMAL addBoltAggStats:[null]: 58 = checkcast <Application,Lorg/apache/storm/generated/Bolt>57 <Application,Lorg/apache/storm/generated/Bolt> Node: < Application, Lorg/apache/storm/daemon/nimbus/Nimbus, addBoltAggStats(Lorg/apache/storm/generated/TopologyPageInfo;Lorg/apache/storm/generated/StormTopology;Ljava/util/Map;Z)V > Context: Everywhere
PARAM_CALLER:Node: < Application, Lorg/apache/storm/daemon/nimbus/Nimbus, addBoltAggStats(Lorg/apache/storm/generated/TopologyPageInfo;Lorg/apache/storm/generated/StormTopology;Ljava/util/Map;Z)V > Context: Everywhere[52]69 = invokevirtual < Application, Lorg/apache/storm/daemon/nimbus/Nimbus, getPlaceholderCommonAggregateStats(Ljava/lang/Object;)Lorg/apache/storm/generated/CommonAggregateStats; > 1,58 @128 exception:68 v58
PARAM_CALLEE:Node: < Application, Lorg/apache/storm/daemon/nimbus/Nimbus, getPlaceholderCommonAggregateStats(Ljava/lang/Object;)Lorg/apache/storm/generated/CommonAggregateStats; > Context: Everywhere v2
PARAM_CALLER:Node: < Application, Lorg/apache/storm/daemon/nimbus/Nimbus, getPlaceholderCommonAggregateStats(Ljava/lang/Object;)Lorg/apache/storm/generated/CommonAggregateStats; > Context: Everywhere[7]8 = invokestatic < Application, Lorg/apache/storm/daemon/StormCommon, numStartExecutors(Ljava/lang/Object;)I > 2 @11 exception:7 v2
PARAM_CALLEE:Node: < Application, Lorg/apache/storm/daemon/StormCommon, numStartExecutors(Ljava/lang/Object;)I > Context: Everywhere v1
PARAM_CALLER:Node: < Application, Lorg/apache/storm/daemon/StormCommon, numStartExecutors(Ljava/lang/Object;)I > Context: Everywhere[1]4 = invokestatic < Application, Lorg/apache/storm/daemon/StormCommon, getComponentCommon(Ljava/lang/Object;)Lorg/apache/storm/generated/ComponentCommon; > 1 @1 exception:3 v1
PARAM_CALLEE:Node: < Application, Lorg/apache/storm/daemon/StormCommon, getComponentCommon(Ljava/lang/Object;)Lorg/apache/storm/generated/ComponentCommon; > Context: Everywhere v1
NORMAL getComponentCommon:7 = instanceof 1 <Application,Lorg/apache/storm/generated/Bolt> Node: < Application, Lorg/apache/storm/daemon/StormCommon, getComponentCommon(Ljava/lang/Object;)Lorg/apache/storm/generated/ComponentCommon; > Context: Everywhere
NORMAL getComponentCommon:conditional branch(eq, to iindex=28) 7,5 Node: < Application, Lorg/apache/storm/daemon/StormCommon, getComponentCommon(Ljava/lang/Object;)Lorg/apache/storm/generated/ComponentCommon; > Context: Everywhere

-------------TaintedSinkInfo----------
fileName:	StormCommon.java	methodSinagture:	org.apache.storm.daemon.StormCommon.getComponentCommon(Ljava/lang/Object;)Lorg/apache/storm/generated/ComponentCommon;	methodLines:	298:307
blockLines:	300:-1
paras:	null
TaintedStat:	NORMAL getComponentCommon:conditional branch(eq, to iindex=11) 4,5 Node: < Application, Lorg/apache/storm/daemon/StormCommon, getComponentCommon(Ljava/lang/Object;)Lorg/apache/storm/generated/ComponentCommon; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/daemon/nimbus/Nimbus, startTopology(Ljava/lang/String;Ljava/lang/String;Lorg/apache/storm/generated/TopologyStatus;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)V > Context: Everywhere[39]32 = invokeinterface < Application, Ljava/util/Map$Entry, getValue()Ljava/lang/Object; > 27 @102 exception:31
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/daemon/nimbus/Nimbus, startTopology(Ljava/lang/String;Ljava/lang/String;Lorg/apache/storm/generated/TopologyStatus;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)V > Context: Everywhere[39]32 = invokeinterface < Application, Ljava/util/Map$Entry, getValue()Ljava/lang/Object; > 27 @102 exception:31
PARAM_CALLER:Node: < Application, Lorg/apache/storm/daemon/nimbus/Nimbus, startTopology(Ljava/lang/String;Ljava/lang/String;Lorg/apache/storm/generated/TopologyStatus;Ljava/lang/String;Ljava/lang/String;Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)V > Context: Everywhere[40]34 = invokestatic < Application, Lorg/apache/storm/daemon/StormCommon, numStartExecutors(Ljava/lang/Object;)I > 32 @107 exception:33 v32
PARAM_CALLEE:Node: < Application, Lorg/apache/storm/daemon/StormCommon, numStartExecutors(Ljava/lang/Object;)I > Context: Everywhere v1
PARAM_CALLER:Node: < Application, Lorg/apache/storm/daemon/StormCommon, numStartExecutors(Ljava/lang/Object;)I > Context: Everywhere[1]4 = invokestatic < Application, Lorg/apache/storm/daemon/StormCommon, getComponentCommon(Ljava/lang/Object;)Lorg/apache/storm/generated/ComponentCommon; > 1 @1 exception:3 v1
PARAM_CALLEE:Node: < Application, Lorg/apache/storm/daemon/StormCommon, getComponentCommon(Ljava/lang/Object;)Lorg/apache/storm/generated/ComponentCommon; > Context: Everywhere v1
NORMAL getComponentCommon:4 = instanceof 1 <Application,Lorg/apache/storm/generated/StateSpoutSpec> Node: < Application, Lorg/apache/storm/daemon/StormCommon, getComponentCommon(Ljava/lang/Object;)Lorg/apache/storm/generated/ComponentCommon; > Context: Everywhere
NORMAL getComponentCommon:conditional branch(eq, to iindex=11) 4,5 Node: < Application, Lorg/apache/storm/daemon/StormCommon, getComponentCommon(Ljava/lang/Object;)Lorg/apache/storm/generated/ComponentCommon; > Context: Everywhere

-------------TaintedSinkInfo----------
fileName:	StormCommon.java	methodSinagture:	org.apache.storm.daemon.StormCommon.getComponentCommon(Ljava/lang/Object;)Lorg/apache/storm/generated/ComponentCommon;	methodLines:	298:307
blockLines:	302:-1
paras:	null
TaintedStat:	NORMAL getComponentCommon:conditional branch(eq, to iindex=20) 6,5 Node: < Application, Lorg/apache/storm/daemon/StormCommon, getComponentCommon(Ljava/lang/Object;)Lorg/apache/storm/generated/ComponentCommon; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/daemon/nimbus/Nimbus, addSpoutAggStats(Lorg/apache/storm/generated/TopologyPageInfo;Lorg/apache/storm/generated/StormTopology;Ljava/util/Map;)V > Context: Everywhere[27]56 = invokeinterface < Application, Ljava/util/Map$Entry, getValue()Ljava/lang/Object; > 51 @71 exception:55
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/storm/daemon/nimbus/Nimbus, addSpoutAggStats(Lorg/apache/storm/generated/TopologyPageInfo;Lorg/apache/storm/generated/StormTopology;Ljava/util/Map;)V > Context: Everywhere[27]56 = invokeinterface < Application, Ljava/util/Map$Entry, getValue()Ljava/lang/Object; > 51 @71 exception:55
NORMAL addSpoutAggStats:[null]: 57 = checkcast <Application,Lorg/apache/storm/generated/SpoutSpec>56 <Application,Lorg/apache/storm/generated/SpoutSpec> Node: < Application, Lorg/apache/storm/daemon/nimbus/Nimbus, addSpoutAggStats(Lorg/apache/storm/generated/TopologyPageInfo;Lorg/apache/storm/generated/StormTopology;Ljava/util/Map;)V > Context: Everywhere
PARAM_CALLER:Node: < Application, Lorg/apache/storm/daemon/nimbus/Nimbus, addSpoutAggStats(Lorg/apache/storm/generated/TopologyPageInfo;Lorg/apache/storm/generated/StormTopology;Ljava/util/Map;)V > Context: Everywhere[39]63 = invokevirtual < Application, Lorg/apache/storm/daemon/nimbus/Nimbus, getPlaceholderCommonAggregateStats(Ljava/lang/Object;)Lorg/apache/storm/generated/CommonAggregateStats; > 1,57 @101 exception:62 v57
PARAM_CALLEE:Node: < Application, Lorg/apache/storm/daemon/nimbus/Nimbus, getPlaceholderCommonAggregateStats(Ljava/lang/Object;)Lorg/apache/storm/generated/CommonAggregateStats; > Context: Everywhere v2
PARAM_CALLER:Node: < Application, Lorg/apache/storm/daemon/nimbus/Nimbus, getPlaceholderCommonAggregateStats(Ljava/lang/Object;)Lorg/apache/storm/generated/CommonAggregateStats; > Context: Everywhere[7]8 = invokestatic < Application, Lorg/apache/storm/daemon/StormCommon, numStartExecutors(Ljava/lang/Object;)I > 2 @11 exception:7 v2
PARAM_CALLEE:Node: < Application, Lorg/apache/storm/daemon/StormCommon, numStartExecutors(Ljava/lang/Object;)I > Context: Everywhere v1
PARAM_CALLER:Node: < Application, Lorg/apache/storm/daemon/StormCommon, numStartExecutors(Ljava/lang/Object;)I > Context: Everywhere[1]4 = invokestatic < Application, Lorg/apache/storm/daemon/StormCommon, getComponentCommon(Ljava/lang/Object;)Lorg/apache/storm/generated/ComponentCommon; > 1 @1 exception:3 v1
PARAM_CALLEE:Node: < Application, Lorg/apache/storm/daemon/StormCommon, getComponentCommon(Ljava/lang/Object;)Lorg/apache/storm/generated/ComponentCommon; > Context: Everywhere v1
NORMAL getComponentCommon:6 = instanceof 1 <Application,Lorg/apache/storm/generated/SpoutSpec> Node: < Application, Lorg/apache/storm/daemon/StormCommon, getComponentCommon(Ljava/lang/Object;)Lorg/apache/storm/generated/ComponentCommon; > Context: Everywhere
NORMAL getComponentCommon:conditional branch(eq, to iindex=20) 6,5 Node: < Application, Lorg/apache/storm/daemon/StormCommon, getComponentCommon(Ljava/lang/Object;)Lorg/apache/storm/generated/ComponentCommon; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
    public static ComponentCommon getComponentCommon(Object component) {
        ComponentCommon common = null;
        if (component instanceof StateSpoutSpec) {
            common = ((StateSpoutSpec) component).get_common();
        } else if (component instanceof SpoutSpec) {
            common = ((SpoutSpec) component).get_common();
        } else if (component instanceof Bolt) {
            common = ((Bolt) component).get_common();
        }
        return common;
    }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/daemon/StormCommon, addSystemStreams(Lorg/apache/storm/generated/StormTopology;)V > Context: Everywhere, blocks=[BB[SSA:11..13]8 - org.apache.storm.daemon.StormCommon.addSystemStreams(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:9..10]7 - org.apache.storm.daemon.StormCommon.addSystemStreams(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:14..16]9 - org.apache.storm.daemon.StormCommon.addSystemStreams(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:-1..-2]16 - org.apache.storm.daemon.StormCommon.addSystemStreams(Lorg/apache/storm/generated/StormTopology;)V], numberOfBasicBlocks=4, firstLineNumber=319, lastLineNumber=321, firstMethodNumber=318, lastMethodNumber=324, isFirstLineValid=true, methodSrcCode=
    public static void addSystemStreams(StormTopology topology) {
        for (Object component : allComponents(topology).values()) {
            ComponentCommon common = getComponentCommon(component);
            StreamInfo streamInfo = Thrift.outputFields(Arrays.asList("event"));
            common.put_to_streams(SYSTEM_STREAM_ID, streamInfo);
        }
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/daemon/StormCommon, addMetricStreams(Lorg/apache/storm/generated/StormTopology;)V > Context: Everywhere, blocks=[BB[SSA:11..13]8 - org.apache.storm.daemon.StormCommon.addMetricStreams(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:9..10]7 - org.apache.storm.daemon.StormCommon.addMetricStreams(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:14..16]9 - org.apache.storm.daemon.StormCommon.addMetricStreams(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:-1..-2]17 - org.apache.storm.daemon.StormCommon.addMetricStreams(Lorg/apache/storm/generated/StormTopology;)V], numberOfBasicBlocks=4, firstLineNumber=311, lastLineNumber=313, firstMethodNumber=310, lastMethodNumber=316, isFirstLineValid=true, methodSrcCode=
    public static void addMetricStreams(StormTopology topology) {
        for (Object component : allComponents(topology).values()) {
            ComponentCommon common = getComponentCommon(component);
            StreamInfo streamInfo = Thrift.outputFields(Arrays.asList("task-info", "data-points"));
            common.put_to_streams(Constants.METRICS_STREAM_ID, streamInfo);
        }
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/daemon/StormCommon, componentConf(Ljava/lang/Object;)Ljava/util/Map; > Context: Everywhere, blocks=[BB[SSA:3..5]3 - org.apache.storm.daemon.StormCommon.componentConf(Ljava/lang/Object;)Ljava/util/Map;, BB[SSA:1..2]2 - org.apache.storm.daemon.StormCommon.componentConf(Ljava/lang/Object;)Ljava/util/Map;, BB[SSA:6..8]4 - org.apache.storm.daemon.StormCommon.componentConf(Ljava/lang/Object;)Ljava/util/Map;, BB[SSA:-1..-2]13 - org.apache.storm.daemon.StormCommon.componentConf(Ljava/lang/Object;)Ljava/util/Map;], numberOfBasicBlocks=4, firstLineNumber=144, lastLineNumber=146, firstMethodNumber=143, lastMethodNumber=152, isFirstLineValid=true, methodSrcCode=
        try {
            Map<String, Object> conf = new HashMap<>();
            ComponentCommon common = getComponentCommon(component);
            String jconf = common.get_json_conf();
            if (jconf != null) {
                conf.putAll((Map<String, Object>) JSONValue.parseWithException(jconf));
            }
            return conf;
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/daemon/StormCommon, validateBasic(Lorg/apache/storm/generated/StormTopology;)V > Context: Everywhere, blocks=[BB[SSA:34..36]16 - org.apache.storm.daemon.StormCommon.validateBasic(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:32..33]15 - org.apache.storm.daemon.StormCommon.validateBasic(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:37..39]17 - org.apache.storm.daemon.StormCommon.validateBasic(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:-1..-2]45 - org.apache.storm.daemon.StormCommon.validateBasic(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:69..71]32 - org.apache.storm.daemon.StormCommon.validateBasic(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:66..68]31 - org.apache.storm.daemon.StormCommon.validateBasic(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:72..74]33 - org.apache.storm.daemon.StormCommon.validateBasic(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:-1..-2]45 - org.apache.storm.daemon.StormCommon.validateBasic(Lorg/apache/storm/generated/StormTopology;)V], numberOfBasicBlocks=8, firstLineNumber=173, lastLineNumber=176, firstMethodNumber=157, lastMethodNumber=183, isFirstLineValid=true, methodSrcCode=
    public static void validateBasic(StormTopology topology) throws InvalidTopologyException {
        validateIds(topology);

        for (StormTopology._Fields field : Thrift.getSpoutFields()) {
            Map<String, Object> spoutComponents = (Map<String, Object>) topology.getFieldValue(field);
            if (spoutComponents != null) {
                for (Object obj : spoutComponents.values()) {
                    ComponentCommon common = getComponentCommon(obj);
                    if (!isEmptyInputs(common)) {
                        throw new WrappedInvalidTopologyException("May not declare inputs for a spout");
                    }
                }
            }
        }

        Map<String, Object> componentMap = allComponents(topology);
        for (Object componentObj : componentMap.values()) {
            Map<String, Object> conf = componentConf(componentObj);
            ComponentCommon common = getComponentCommon(componentObj);
            int parallelismHintNum = Thrift.getParallelismHint(common);
            Integer taskNum = ObjectReader.getInt(conf.get(Config.TOPOLOGY_TASKS), 0);
            if (taskNum > 0 && parallelismHintNum <= 0) {
                throw new WrappedInvalidTopologyException(
                        "Number of executors must be greater than 0 when number of tasks is greater than 0");
            }
        }
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/daemon/StormCommon, validateStructure(Lorg/apache/storm/generated/StormTopology;)V > Context: Everywhere, blocks=[BB[SSA:21..21]12 - org.apache.storm.daemon.StormCommon.validateStructure(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:18..20]11 - org.apache.storm.daemon.StormCommon.validateStructure(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:22..24]13 - org.apache.storm.daemon.StormCommon.validateStructure(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:-1..-2]62 - org.apache.storm.daemon.StormCommon.validateStructure(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:64..64]35 - org.apache.storm.daemon.StormCommon.validateStructure(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:61..63]34 - org.apache.storm.daemon.StormCommon.validateStructure(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:65..67]36 - org.apache.storm.daemon.StormCommon.validateStructure(Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:-1..-2]62 - org.apache.storm.daemon.StormCommon.validateStructure(Lorg/apache/storm/generated/StormTopology;)V], numberOfBasicBlocks=8, firstLineNumber=207, lastLineNumber=208, firstMethodNumber=193, lastMethodNumber=228, isFirstLineValid=true, methodSrcCode=
    public static void validateStructure(StormTopology topology) throws InvalidTopologyException {
        Map<String, Object> componentMap = allComponents(topology);
        for (Map.Entry<String, Object> entry : componentMap.entrySet()) {
            String componentId = entry.getKey();
            ComponentCommon common = getComponentCommon(entry.getValue());
            Map<GlobalStreamId, Grouping> inputs = common.get_inputs();
            for (Map.Entry<GlobalStreamId, Grouping> input : inputs.entrySet()) {
                String sourceStreamId = input.getKey().get_streamId();
                String sourceComponentId = input.getKey().get_componentId();
                if (!componentMap.keySet().contains(sourceComponentId)) {
                    throw new WrappedInvalidTopologyException("Component: [" + componentId
                                                       + "] subscribes from non-existent component [" + sourceComponentId + "]");
                }

                ComponentCommon sourceComponent = getComponentCommon(componentMap.get(sourceComponentId));
                if (!sourceComponent.get_streams().containsKey(sourceStreamId)) {
                    throw new WrappedInvalidTopologyException("Component: [" + componentId
                                                       + "] subscribes from non-existent stream: "
                                                       + "[" + sourceStreamId + "] of component [" + sourceComponentId + "]");
                }

                Grouping grouping = input.getValue();
                if (Thrift.groupingType(grouping) == Grouping._Fields.FIELDS) {
                    List<String> fields = new ArrayList<>(grouping.get_fields());
                    Map<String, StreamInfo> streams = sourceComponent.get_streams();
                    Set<String> sourceOutputFields = getStreamOutputFields(streams);
                    fields.removeAll(sourceOutputFields);
                    if (fields.size() != 0) {
                        throw new WrappedInvalidTopologyException("Component: [" + componentId
                                                           + "] subscribes from stream: [" + sourceStreamId + "] of component "
                                                           + "[" + sourceComponentId + "] + with non-existent fields: " + fields);
                    }
                }
            }
        }
    }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/daemon/StormCommon, numStartExecutors(Ljava/lang/Object;)I > Context: Everywhere, blocks=[BB[SSA:0..1]1 - org.apache.storm.daemon.StormCommon.numStartExecutors(Ljava/lang/Object;)I, BB[SSA:-1..-2]0 - org.apache.storm.daemon.StormCommon.numStartExecutors(Ljava/lang/Object;)I, BB[SSA:2..4]2 - org.apache.storm.daemon.StormCommon.numStartExecutors(Ljava/lang/Object;)I, BB[SSA:-1..-2]4 - org.apache.storm.daemon.StormCommon.numStartExecutors(Ljava/lang/Object;)I], numberOfBasicBlocks=4, firstLineNumber=467, lastLineNumber=469, firstMethodNumber=467, lastMethodNumber=469, isFirstLineValid=false, methodSrcCode=
    public static int numStartExecutors(Object component) throws InvalidTopologyException {
        ComponentCommon common = getComponentCommon(component);
        return Thrift.getParallelismHint(common);
    }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/daemon/StormCommon, validateIds(Ljava/util/Map;)Ljava/util/Set; > Context: Everywhere, blocks=[BB[SSA:35..37]21 - org.apache.storm.daemon.StormCommon.validateIds(Ljava/util/Map;)Ljava/util/Set;, BB[SSA:33..34]20 - org.apache.storm.daemon.StormCommon.validateIds(Ljava/util/Map;)Ljava/util/Set;, BB[SSA:38..40]22 - org.apache.storm.daemon.StormCommon.validateIds(Ljava/util/Map;)Ljava/util/Set;, BB[SSA:-1..-2]39 - org.apache.storm.daemon.StormCommon.validateIds(Ljava/util/Map;)Ljava/util/Set;], numberOfBasicBlocks=4, firstLineNumber=102, lastLineNumber=104, firstMethodNumber=95, lastMethodNumber=111, isFirstLineValid=true, methodSrcCode=
    private static Set<String> validateIds(Map<String, ?> componentMap) throws InvalidTopologyException {
        Set<String> keys = componentMap.keySet();
        for (String id : keys) {
            if (Utils.isSystemId(id)) {
                throw new WrappedInvalidTopologyException(id + " is not a valid component id.");
            }
        }
        for (Object componentObj : componentMap.values()) {
            ComponentCommon common = getComponentCommon(componentObj);
            Set<String> streamIds = common.get_streams().keySet();
            for (String id : streamIds) {
                if (Utils.isSystemId(id)) {
                    throw new WrappedInvalidTopologyException(id + " is not a valid stream id.");
                }
            }
        }
        return keys;
    }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/storm/daemon/StormCommon, addEventLogger(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)V > Context: Everywhere, blocks=[BB[SSA:55..57]26 - org.apache.storm.daemon.StormCommon.addEventLogger(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:53..54]25 - org.apache.storm.daemon.StormCommon.addEventLogger(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:58..61]27 - org.apache.storm.daemon.StormCommon.addEventLogger(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)V, BB[SSA:-1..-2]33 - org.apache.storm.daemon.StormCommon.addEventLogger(Ljava/util/Map;Lorg/apache/storm/generated/StormTopology;)V], numberOfBasicBlocks=4, firstLineNumber=356, lastLineNumber=358, firstMethodNumber=344, lastMethodNumber=361, isFirstLineValid=true, methodSrcCode=
    public static void addEventLogger(Map<String, Object> conf, StormTopology topology) {
        Integer numExecutors = ObjectReader.getInt(conf.get(Config.TOPOLOGY_EVENTLOGGER_EXECUTORS),
                                                   ObjectReader.getInt(conf.get(Config.TOPOLOGY_WORKERS)));
        if (numExecutors == null || numExecutors == 0) {
            return;
        }
        HashMap<String, Object> componentConf = new HashMap<>();
        componentConf.put(Config.TOPOLOGY_TASKS, numExecutors);
        componentConf.put(Config.TOPOLOGY_TICK_TUPLE_FREQ_SECS, ObjectReader.getInt(conf.get(Config.TOPOLOGY_MESSAGE_TIMEOUT_SECS)));
        Bolt eventLoggerBolt = Thrift.prepareSerializedBoltDetails(
            eventLoggerInputs(topology), new EventLoggerBolt(), null, numExecutors, componentConf);

        for (Object component : allComponents(topology).values()) {
            ComponentCommon common = getComponentCommon(component);
            common.put_to_streams(EVENTLOGGER_STREAM_ID, Thrift.outputFields(eventLoggerBoltFields()));
        }
        topology.put_to_bolts(EVENTLOGGER_COMPONENT_ID, eventLoggerBolt);
    }

}
