====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	CompositeGroupsMapping.java	methodSinagture:	org.apache.hadoop.security.CompositeGroupsMapping.loadMappingProviders()V	methodLines:	124:137
blockLines:	131:-1
paras:	null
TaintedStat:	NORMAL loadMappingProviders:conditional branch(ne, to iindex=52) 23,21 Node: < Application, Lorg/apache/hadoop/security/CompositeGroupsMapping, loadMappingProviders()V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/security/CompositeGroupsMapping, loadMappingProviders()V > Context: Everywhere[34]23 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getClass(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class; > 20,19,21 @63 exception:22
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/security/CompositeGroupsMapping, loadMappingProviders()V > Context: Everywhere[34]23 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getClass(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class; > 20,19,21 @63 exception:22
NORMAL loadMappingProviders:conditional branch(ne, to iindex=52) 23,21 Node: < Application, Lorg/apache/hadoop/security/CompositeGroupsMapping, loadMappingProviders()V > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
  private void loadMappingProviders() {
    String[] providerNames = conf.getStrings(MAPPING_PROVIDERS_CONFIG_KEY, new String[]{});

    String providerKey;
    for (String name : providerNames) {
      providerKey = MAPPING_PROVIDER_CONFIG_PREFIX + "." + name;
      Class<?> providerClass = conf.getClass(providerKey, null);
      if (providerClass == null) {
        LOG.error("The mapping provider, " + name + " does not have a valid class");
      } else {
        addMappingProvider(name, providerClass);
      }
    }
  }
    


====================ctx:=======================
