====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	FileSystem.java	methodSinagture:	org.apache.hadoop.fs.FileSystem.get(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;	methodLines:	536:557
blockLines:	552:-1
paras:	null
TaintedStat:	NORMAL get:conditional branch(eq, to iindex=61) 24,15 Node: < Application, Lorg/apache/hadoop/fs/FileSystem, get(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/fs/FileSystem, get(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: Everywhere[50]24 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getBoolean(Ljava/lang/String;Z)Z > 2,22,15 @83 exception:23
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/fs/FileSystem, get(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: Everywhere[50]24 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getBoolean(Ljava/lang/String;Z)Z > 2,22,15 @83 exception:23
NORMAL get:conditional branch(eq, to iindex=61) 24,15 Node: < Application, Lorg/apache/hadoop/fs/FileSystem, get(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
  public static FileSystem get(URI uri, Configuration conf) throws IOException {
    String scheme = uri.getScheme();
    String authority = uri.getAuthority();

    if (scheme == null && authority == null) {     // use default FS
      return get(conf);
    }

    if (scheme != null && authority == null) {     // no authority
      URI defaultUri = getDefaultUri(conf);
      if (scheme.equals(defaultUri.getScheme())    // if scheme matches default
          && defaultUri.getAuthority() != null) {  // & default has authority
        return get(defaultUri, conf);              // return default
      }
    }
    String disableCacheName = String.format("fs.%s.impl.disable.cache", scheme);
    if (conf.getBoolean(disableCacheName, false)) {
      LOGGER.debug("Bypassing cache to create filesystem {}", uri);
      return createFileSystem(uri, conf);
    }

    return CACHE.get(uri, conf);
  }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/FileSystem, getLocal(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/LocalFileSystem; > Context: Everywhere, blocks=[BB[SSA:0..2]1 - org.apache.hadoop.fs.FileSystem.getLocal(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/LocalFileSystem;, BB[SSA:-1..-2]0 - org.apache.hadoop.fs.FileSystem.getLocal(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/LocalFileSystem;, BB[SSA:3..3]2 - org.apache.hadoop.fs.FileSystem.getLocal(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/LocalFileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.FileSystem.getLocal(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/LocalFileSystem;], numberOfBasicBlocks=4, firstLineNumber=509, lastLineNumber=510, firstMethodNumber=509, lastMethodNumber=510, isFirstLineValid=false, methodSrcCode=
    throws IOException {
    return (LocalFileSystem)get(LocalFileSystem.NAME, conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: Everywhere, blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Path, getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, getParent()Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/Path, makeQualified(Ljava/net/URI;Lorg/apache/hadoop/fs/Path;)Lorg/apache/hadoop/fs/Path; >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, moveToTrash(Lorg/apache/hadoop/fs/Path;)Z >:Lorg/apache/hadoop/fs/Path in DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/hadoop/fs/TrashPolicyDefault in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/hadoop/fs/TrashPolicyDefault, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.hadoop.util.ReflectionUtils.newInstance(Ljava/lang/Class;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Object;@46 ]], B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere]}>, B=Everywhere], blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.Path.getFileSystem(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=365, lastLineNumber=365, firstMethodNumber=364, lastMethodNumber=365, isFirstLineValid=true, methodSrcCode=
  public FileSystem getFileSystem(Configuration conf) throws IOException {
    return FileSystem.get(this.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/viewfs/ChRootedFileSystem, <init>(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere, blocks=[BB[SSA:0..3]1 - org.apache.hadoop.fs.viewfs.ChRootedFileSystem.<init>(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:-1..-2]0 - org.apache.hadoop.fs.viewfs.ChRootedFileSystem.<init>(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:4..5]2 - org.apache.hadoop.fs.viewfs.ChRootedFileSystem.<init>(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.viewfs.ChRootedFileSystem.<init>(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)V], numberOfBasicBlocks=4, firstLineNumber=125, lastLineNumber=126, firstMethodNumber=125, lastMethodNumber=127, isFirstLineValid=false, methodSrcCode=
      throws IOException {
    this(FileSystem.get(uri, conf), uri);
  }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/shell/PathData, <init>(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere, blocks=[BB[SSA:3..4]2 - org.apache.hadoop.fs.shell.PathData.<init>(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:0..2]1 - org.apache.hadoop.fs.shell.PathData.<init>(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:5..6]3 - org.apache.hadoop.fs.shell.PathData.<init>(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:-1..-2]5 - org.apache.hadoop.fs.shell.PathData.<init>(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V], numberOfBasicBlocks=4, firstLineNumber=89, lastLineNumber=89, firstMethodNumber=88, lastMethodNumber=90, isFirstLineValid=true, methodSrcCode=
  public PathData(String pathString, Configuration conf) throws IOException {
    this(FileSystem.get(stringToUri(pathString), conf), pathString);
  }
  
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/FileSystem, getNamed(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: Everywhere, blocks=[BB[SSA:3..4]3 - org.apache.hadoop.fs.FileSystem.getNamed(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:2..2]2 - org.apache.hadoop.fs.FileSystem.getNamed(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:5..5]4 - org.apache.hadoop.fs.FileSystem.getNamed(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]5 - org.apache.hadoop.fs.FileSystem.getNamed(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=480, lastLineNumber=480, firstMethodNumber=479, lastMethodNumber=480, isFirstLineValid=true, methodSrcCode=
    throws IOException {
    return get(URI.create(fixName(name)), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/FileSystem, getFSofPath(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: Everywhere, blocks=[BB[SSA:6..7]4 - org.apache.hadoop.fs.FileSystem.getFSofPath(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..5]3 - org.apache.hadoop.fs.FileSystem.getFSofPath(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:8..8]5 - org.apache.hadoop.fs.FileSystem.getFSofPath(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]6 - org.apache.hadoop.fs.FileSystem.getFSofPath(Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=434, lastLineNumber=434, firstMethodNumber=429, lastMethodNumber=434, isFirstLineValid=true, methodSrcCode=
      throws UnsupportedFileSystemException, IOException {
    absOrFqPath.checkNotSchemeWithRelative();
    absOrFqPath.checkNotRelative();

    // Uses the default FileSystem if not fully qualified
    return get(absOrFqPath.toUri(), conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/Trash, moveToAppropriateTrash(Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/conf/Configuration;)Z > Context: Everywhere, blocks=[BB[SSA:6..7]3 - org.apache.hadoop.fs.Trash.moveToAppropriateTrash(Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/conf/Configuration;)Z, BB[SSA:3..5]2 - org.apache.hadoop.fs.Trash.moveToAppropriateTrash(Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/conf/Configuration;)Z, BB[SSA:8..11]4 - org.apache.hadoop.fs.Trash.moveToAppropriateTrash(Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/conf/Configuration;)Z, BB[SSA:-1..-2]26 - org.apache.hadoop.fs.Trash.moveToAppropriateTrash(Lorg/apache/hadoop/fs/FileSystem;Lorg/apache/hadoop/fs/Path;Lorg/apache/hadoop/conf/Configuration;)Z], numberOfBasicBlocks=4, firstLineNumber=79, lastLineNumber=85, firstMethodNumber=78, lastMethodNumber=121, isFirstLineValid=true, methodSrcCode=
      Configuration conf) throws IOException {
    Path fullyResolvedPath = fs.resolvePath(p);
    FileSystem fullyResolvedFs =
        FileSystem.get(fullyResolvedPath.toUri(), conf);
    // If the trash interval is configured server side then clobber this
    // configuration so that we always respect the server configuration.
    try {
      long trashInterval = fullyResolvedFs.getServerDefaults(
          fullyResolvedPath).getTrashInterval();
      if (0 != trashInterval) {
        Configuration confCopy = new Configuration(conf);
        confCopy.setLong(CommonConfigurationKeysPublic.FS_TRASH_INTERVAL_KEY,
            trashInterval);
        conf = confCopy;
      }
    } catch (Exception e) {
      // If we can not determine that trash is enabled server side then
      // bail rather than potentially deleting a file when trash is enabled.
      LOG.warn("Failed to get server trash configuration", e);
      throw new IOException("Failed to get server trash configuration", e);
    }

    /*
     * In HADOOP-18144, we changed getTrashRoot() in ViewFileSystem to return a
     * viewFS path, instead of a targetFS path. moveToTrash works for
     * ViewFileSystem now. ViewFileSystem will do path resolution internally by
     * itself.
     *
     * When localized trash flag is enabled:
     *    1). if fs is a ViewFileSystem, we can initialize Trash() with a
     *        ViewFileSystem object;
     *    2). When fs is not a ViewFileSystem, the only place we would need to
     *        resolve a path is for symbolic links. However, symlink is not
     *        enabled in Hadoop due to the complexity to support it
     *        (HADOOP-10019).
     */
    if (conf.getBoolean(CONFIG_VIEWFS_TRASH_FORCE_INSIDE_MOUNT_POINT,
        CONFIG_VIEWFS_TRASH_FORCE_INSIDE_MOUNT_POINT_DEFAULT)) {
      Trash trash = new Trash(fs, conf);
      return trash.moveToTrash(p);
    }

    Trash trash = new Trash(fullyResolvedFs, conf);
    return trash.moveToTrash(fullyResolvedPath);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/viewfs/FsGetter, get(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: Everywhere, blocks=[BB[SSA:0..2]1 - org.apache.hadoop.fs.viewfs.FsGetter.get(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]0 - org.apache.hadoop.fs.viewfs.FsGetter.get(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:3..3]2 - org.apache.hadoop.fs.viewfs.FsGetter.get(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]3 - org.apache.hadoop.fs.viewfs.FsGetter.get(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=55, lastLineNumber=56, firstMethodNumber=55, lastMethodNumber=56, isFirstLineValid=false, methodSrcCode=
  public FileSystem get(URI uri, Configuration conf) throws IOException {
    return FileSystem.get(uri, conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/FileSystem, get(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: Everywhere, blocks=[BB[SSA:34..36]15 - org.apache.hadoop.fs.FileSystem.get(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:32..33]14 - org.apache.hadoop.fs.FileSystem.get(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:37..37]16 - org.apache.hadoop.fs.FileSystem.get(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]27 - org.apache.hadoop.fs.FileSystem.get(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=547, lastLineNumber=548, firstMethodNumber=536, lastMethodNumber=557, isFirstLineValid=true, methodSrcCode=
  public static FileSystem get(URI uri, Configuration conf) throws IOException {
    String scheme = uri.getScheme();
    String authority = uri.getAuthority();

    if (scheme == null && authority == null) {     // use default FS
      return get(conf);
    }

    if (scheme != null && authority == null) {     // no authority
      URI defaultUri = getDefaultUri(conf);
      if (scheme.equals(defaultUri.getScheme())    // if scheme matches default
          && defaultUri.getAuthority() != null) {  // & default has authority
        return get(defaultUri, conf);              // return default
      }
    }
    String disableCacheName = String.format("fs.%s.impl.disable.cache", scheme);
    if (conf.getBoolean(disableCacheName, false)) {
      LOGGER.debug("Bypassing cache to create filesystem {}", uri);
      return createFileSystem(uri, conf);
    }

    return CACHE.get(uri, conf);
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/metrics2/sink/RollingFileSystemSink, getFileSystem()Lorg/apache/hadoop/fs/FileSystem; > Context: Everywhere, blocks=[BB[SSA:16..16]8 - org.apache.hadoop.metrics2.sink.RollingFileSystemSink.getFileSystem()Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:14..15]7 - org.apache.hadoop.metrics2.sink.RollingFileSystemSink.getFileSystem()Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:17..18]9 - org.apache.hadoop.metrics2.sink.RollingFileSystemSink.getFileSystem()Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]34 - org.apache.hadoop.metrics2.sink.RollingFileSystemSink.getFileSystem()Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=465, lastLineNumber=472, firstMethodNumber=458, lastMethodNumber=475, isFirstLineValid=true, methodSrcCode=
  private FileSystem getFileSystem() throws MetricsException {
    FileSystem fs = null;

    if (suppliedFilesystem != null) {
      fs = suppliedFilesystem;
    } else {
      try {
        fs = FileSystem.get(new URI(basePath.toString()), conf);
      } catch (URISyntaxException ex) {
        throw new MetricsException("The supplied filesystem base path URI"
            + " is not a valid URI: " + basePath.toString(), ex);
      } catch (IOException ex) {
        throw new MetricsException("Error connecting to file system: "
            + basePath + " [" + ex.toString() + "]", ex);
      }
    }

    return fs;
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/FileSystem, get(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: Everywhere, blocks=[BB[SSA:2..3]2 - org.apache.hadoop.fs.FileSystem.get(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:0..1]1 - org.apache.hadoop.fs.FileSystem.get(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:4..4]3 - org.apache.hadoop.fs.FileSystem.get(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:-1..-2]4 - org.apache.hadoop.fs.FileSystem.get(Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=4, firstLineNumber=290, lastLineNumber=290, firstMethodNumber=289, lastMethodNumber=290, isFirstLineValid=true, methodSrcCode=
  public static FileSystem get(Configuration conf) throws IOException {
    return get(getDefaultUri(conf), conf);
  }
}
