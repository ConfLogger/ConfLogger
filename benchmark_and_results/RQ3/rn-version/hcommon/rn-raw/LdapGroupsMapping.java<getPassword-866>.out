====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	LdapGroupsMapping.java	methodSinagture:	org.apache.hadoop.security.LdapGroupsMapping.getPassword(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;	methodLines:	866:877
blockLines:	870:-1
paras:	null
TaintedStat:	NORMAL getPassword:conditional branch(eq, to iindex=14) 7,8 Node: < Application, Lorg/apache/hadoop/security/LdapGroupsMapping, getPassword(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/security/LdapGroupsMapping, getPassword(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere[4]7 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getPassword(Ljava/lang/String;)[C > 2,3 @5 exception:6
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/security/LdapGroupsMapping, getPassword(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere[4]7 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getPassword(Ljava/lang/String;)[C > 2,3 @5 exception:6
NORMAL getPassword:conditional branch(eq, to iindex=14) 7,8 Node: < Application, Lorg/apache/hadoop/security/LdapGroupsMapping, getPassword(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
  String getPassword(Configuration conf, String alias, String defaultPass) {
    String password = defaultPass;
    try {
      char[] passchars = conf.getPassword(alias);
      if (passchars != null) {
        password = new String(passchars);
      }
    } catch (IOException ioe) {
      LOG.warn("Exception while trying to get password for alias {}:",
          alias, ioe);
    }
    return password;
  }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/security/LdapGroupsMapping, getPasswordForBindUser(Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere, blocks=[BB[SSA:35..36]18 - org.apache.hadoop.security.LdapGroupsMapping.getPasswordForBindUser(Ljava/lang/String;)Ljava/lang/String;, BB[SSA:34..34]17 - org.apache.hadoop.security.LdapGroupsMapping.getPasswordForBindUser(Ljava/lang/String;)Ljava/lang/String;, BB[SSA:37..39]19 - org.apache.hadoop.security.LdapGroupsMapping.getPasswordForBindUser(Ljava/lang/String;)Ljava/lang/String;, BB[SSA:-1..-2]31 - org.apache.hadoop.security.LdapGroupsMapping.getPasswordForBindUser(Ljava/lang/String;)Ljava/lang/String;], numberOfBasicBlocks=4, firstLineNumber=934, lastLineNumber=936, firstMethodNumber=929, lastMethodNumber=941, isFirstLineValid=true, methodSrcCode=
    String password;
    String alias = conf.get(keyPrefix + BIND_PASSWORD_ALIAS_SUFFIX,
        BIND_PASSWORD_ALIAS_DEFAULT);
    password = getPasswordFromCredentialProviders(conf, alias, "");
    if (password.isEmpty()) {
      password = getPassword(conf, keyPrefix + BIND_PASSWORD_SUFFIX,
          BIND_PASSWORD_DEFAULT);
      if (password.isEmpty()) {
        password = extractPassword(conf.get(
            keyPrefix + BIND_PASSWORD_FILE_SUFFIX, BIND_PASSWORD_FILE_DEFAULT));
      }
    }
    return password;
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/security/LdapGroupsMapping, loadSslConf(Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere, blocks=[BB[SSA:6..11]3 - org.apache.hadoop.security.LdapGroupsMapping.loadSslConf(Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:5..5]2 - org.apache.hadoop.security.LdapGroupsMapping.loadSslConf(Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:12..12]4 - org.apache.hadoop.security.LdapGroupsMapping.loadSslConf(Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:-1..-2]22 - org.apache.hadoop.security.LdapGroupsMapping.loadSslConf(Lorg/apache/hadoop/conf/Configuration;)V], numberOfBasicBlocks=4, firstLineNumber=826, lastLineNumber=827, firstMethodNumber=825, lastMethodNumber=842, isFirstLineValid=true, methodSrcCode=
  private void loadSslConf(Configuration sslConf) {
    keystore = sslConf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);
    keystorePass = getPassword(sslConf, LDAP_KEYSTORE_PASSWORD_KEY,
        LDAP_KEYSTORE_PASSWORD_DEFAULT);
    if (keystorePass.isEmpty()) {
      keystorePass = extractPassword(sslConf.get(
          LDAP_KEYSTORE_PASSWORD_FILE_KEY,
          LDAP_KEYSTORE_PASSWORD_FILE_DEFAULT));
    }

    truststore = sslConf.get(LDAP_TRUSTSTORE_KEY, "");
    truststorePass = getPasswordFromCredentialProviders(
        sslConf, LDAP_TRUSTSTORE_PASSWORD_KEY, "");
    if (truststorePass.isEmpty()) {
      truststorePass = extractPassword(
          sslConf.get(LDAP_TRUSTSTORE_PASSWORD_FILE_KEY, ""));
    }
  }

}
