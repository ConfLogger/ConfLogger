====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	FileSystem.java	methodSinagture:	org.apache.hadoop.fs.FileSystem.getFileSystemClass(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Class;	methodLines:	3564:3589
blockLines:	3578:-1
paras:	null
TaintedStat:	NORMAL getFileSystemClass:conditional branch(ne, to iindex=50) 31,10 Node: < Application, Lorg/apache/hadoop/fs/FileSystem, getFileSystemClass(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Class; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/fs/FileSystem, getFileSystemClass(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Class; > Context: Everywhere[31]30 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getClass(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class; > 2,25,10 @69 exception:29
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/fs/FileSystem, getFileSystemClass(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Class; > Context: Everywhere[31]30 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getClass(Ljava/lang/String;Ljava/lang/Class;)Ljava/lang/Class; > 2,25,10 @69 exception:29
PHI Node: < Application, Lorg/apache/hadoop/fs/FileSystem, getFileSystemClass(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Class; > Context: Everywhere:31 = phi  30,10
NORMAL getFileSystemClass:conditional branch(ne, to iindex=50) 31,10 Node: < Application, Lorg/apache/hadoop/fs/FileSystem, getFileSystemClass(Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)Ljava/lang/Class; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
      Configuration conf) throws IOException {
    if (!FILE_SYSTEMS_LOADED) {
      loadFileSystems();
    }
    LOGGER.debug("Looking for FS supporting {}", scheme);
    Class<? extends FileSystem> clazz = null;
    if (conf != null) {
      String property = "fs." + scheme + ".impl";
      LOGGER.debug("looking for configuration option {}", property);
      clazz = (Class<? extends FileSystem>) conf.getClass(
          property, null);
    } else {
      LOGGER.debug("No configuration: skipping check for fs.{}.impl", scheme);
    }
    if (clazz == null) {
      LOGGER.debug("Looking in service filesystems for implementation class");
      clazz = SERVICE_FILE_SYSTEMS.get(scheme);
    } else {
      LOGGER.debug("Filesystem {} defined in configuration option", scheme);
    }
    if (clazz == null) {
      throw new UnsupportedFileSystemException("No FileSystem for scheme "
          + "\"" + scheme + "\"");
    }
    LOGGER.debug("FS for {} is {}", scheme, clazz);
    return clazz;
  }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/FsUrlStreamHandlerFactory, <init>(Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere, blocks=[BB[SSA:13..15]8 - org.apache.hadoop.fs.FsUrlStreamHandlerFactory.<init>(Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:12..12]7 - org.apache.hadoop.fs.FsUrlStreamHandlerFactory.<init>(Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:16..17]9 - org.apache.hadoop.fs.FsUrlStreamHandlerFactory.<init>(Lorg/apache/hadoop/conf/Configuration;)V, BB[SSA:-1..-2]26 - org.apache.hadoop.fs.FsUrlStreamHandlerFactory.<init>(Lorg/apache/hadoop/conf/Configuration;)V], numberOfBasicBlocks=4, firstLineNumber=74, lastLineNumber=80, firstMethodNumber=72, lastMethodNumber=85, isFirstLineValid=true, methodSrcCode=

  public FsUrlStreamHandlerFactory(Configuration conf) {
    this.conf = new Configuration(conf);
    // force init of FileSystem code to avoid HADOOP-9041
    try {
      FileSystem.getFileSystemClass("file", conf);
    } catch (IOException io) {
      throw new RuntimeException(io);
    }
    this.handler = new FsUrlStreamHandler(this.conf);
    for (String protocol : UNEXPORTED_PROTOCOLS) {
      protocols.put(protocol, false);
    }
  }

}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/security/ProviderUtils, excludeIncompatibleCredentialProviders(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/Class;)Lorg/apache/hadoop/conf/Configuration; > Context: Everywhere, blocks=[BB[SSA:44..47]16 - org.apache.hadoop.security.ProviderUtils.excludeIncompatibleCredentialProviders(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/Class;)Lorg/apache/hadoop/conf/Configuration;, BB[SSA:43..43]15 - org.apache.hadoop.security.ProviderUtils.excludeIncompatibleCredentialProviders(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/Class;)Lorg/apache/hadoop/conf/Configuration;, BB[SSA:48..49]17 - org.apache.hadoop.security.ProviderUtils.excludeIncompatibleCredentialProviders(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/Class;)Lorg/apache/hadoop/conf/Configuration;, BB[SSA:-1..-2]55 - org.apache.hadoop.security.ProviderUtils.excludeIncompatibleCredentialProviders(Lorg/apache/hadoop/conf/Configuration;Ljava/lang/Class;)Lorg/apache/hadoop/conf/Configuration;], numberOfBasicBlocks=4, firstLineNumber=159, lastLineNumber=169, firstMethodNumber=144, lastMethodNumber=198, isFirstLineValid=true, methodSrcCode=

    String providerPath = config.get(
        CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH);

    if (providerPath == null) {
      return config;
    }
    StringBuffer newProviderPath = new StringBuffer();
    String[] providers = providerPath.split(",");
    Path path = null;
    for (String provider: providers) {
      try {
        path = unnestUri(new URI(provider));
        Class<? extends FileSystem> clazz = null;
        try {
          String scheme = path.toUri().getScheme();
          clazz = FileSystem.getFileSystemClass(scheme, config);
        } catch (IOException ioe) {
          // not all providers are filesystem based
          // for instance user:/// will not be able to
          // have a filesystem class associated with it.
          if (newProviderPath.length() > 0) {
            newProviderPath.append(",");
          }
          newProviderPath.append(provider);
        }
        if (clazz != null) {
          if (fileSystemClass.isAssignableFrom(clazz)) {
            LOG.debug("Filesystem based provider excluded from provider " +
                "path due to recursive dependency: {}", provider);
          } else {
            if (newProviderPath.length() > 0) {
              newProviderPath.append(",");
            }
            newProviderPath.append(provider);
          }
        }
      } catch (URISyntaxException e) {
        LOG.warn("Credential Provider URI is invalid." + provider);
      }
    }

    String effectivePath = newProviderPath.toString();
    if (effectivePath.equals(providerPath)) {
      return config;
    }

    Configuration conf = new Configuration(config);
    if (effectivePath.equals("")) {
      conf.unset(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH);
    } else {
      conf.set(CredentialProviderFactory.CREDENTIAL_PROVIDER_PATH,
          effectivePath);
    }
    return conf;
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/FileSystem, createFileSystem(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem; > Context: Everywhere, blocks=[BB[SSA:31..32]10 - org.apache.hadoop.fs.FileSystem.createFileSystem(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:29..30]9 - org.apache.hadoop.fs.FileSystem.createFileSystem(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;, BB[SSA:33..36]11 - org.apache.hadoop.fs.FileSystem.createFileSystem(Ljava/net/URI;Lorg/apache/hadoop/conf/Configuration;)Lorg/apache/hadoop/fs/FileSystem;], numberOfBasicBlocks=3, firstLineNumber=3607, lastLineNumber=3609, firstMethodNumber=3601, lastMethodNumber=3624, isFirstLineValid=true, methodSrcCode=
      throws IOException {
    Tracer tracer = FsTracer.get(conf);
    try(TraceScope scope = tracer.newScope("FileSystem#createFileSystem");
        DurationInfo ignored =
            new DurationInfo(LOGGER, false, "Creating FS %s", uri)) {
      scope.addKVAnnotation("scheme", uri.getScheme());
      Class<? extends FileSystem> clazz =
          getFileSystemClass(uri.getScheme(), conf);
      FileSystem fs = ReflectionUtils.newInstance(clazz, conf);
      try {
        fs.initialize(uri, conf);
      } catch (IOException | RuntimeException e) {
        // exception raised during initialization.
        // log summary at warn and full stack at debug
        LOGGER.warn("Failed to initialize filesystem {}: {}",
            uri, e.toString());
        LOGGER.debug("Failed to initialize filesystem", e);
        // then (robustly) close the FS, so as to invoke any
        // cleanup code.
        IOUtils.cleanupWithLogger(LOGGER, fs);
        throw e;
      }
      return fs;
    }
  }
}
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/fs/FsUrlStreamHandlerFactory, createURLStreamHandler(Ljava/lang/String;)Ljava/net/URLStreamHandler; > Context: Everywhere, blocks=[BB[SSA:15..15]6 - org.apache.hadoop.fs.FsUrlStreamHandlerFactory.createURLStreamHandler(Ljava/lang/String;)Ljava/net/URLStreamHandler;, BB[SSA:10..14]5 - org.apache.hadoop.fs.FsUrlStreamHandlerFactory.createURLStreamHandler(Ljava/lang/String;)Ljava/net/URLStreamHandler;, BB[SSA:16..21]7 - org.apache.hadoop.fs.FsUrlStreamHandlerFactory.createURLStreamHandler(Ljava/lang/String;)Ljava/net/URLStreamHandler;, BB[SSA:-1..-2]24 - org.apache.hadoop.fs.FsUrlStreamHandlerFactory.createURLStreamHandler(Ljava/lang/String;)Ljava/net/URLStreamHandler;], numberOfBasicBlocks=4, firstLineNumber=91, lastLineNumber=95, firstMethodNumber=88, lastMethodNumber=109, isFirstLineValid=true, methodSrcCode=
  public java.net.URLStreamHandler createURLStreamHandler(String protocol) {
    LOG.debug("Creating handler for protocol {}", protocol);
    if (!protocols.containsKey(protocol)) {
      boolean known = true;
      try {
        Class<? extends FileSystem> impl
            = FileSystem.getFileSystemClass(protocol, conf);
        LOG.debug("Found implementation of {}: {}", protocol, impl);
      }
      catch (IOException ex) {
        known = false;
      }
      protocols.put(protocol, known);
    }
    if (protocols.get(protocol)) {
      LOG.debug("Using handler for protocol {}", protocol);
      return handler;
    } else {
      // FileSystem does not know the protocol, let the VM handle this
      LOG.debug("Unknown protocol {}, delegating to default implementation",
          protocol);
      return null;
    }
}
