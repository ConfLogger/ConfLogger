====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	ViewFileSystem.java	methodSinagture:	org.apache.hadoop.fs.viewfs.ViewFileSystem.getTrashRoots(Z)Ljava/util/Collection;	methodLines:	1232:1294
blockLines:	1241:-1
paras:	null
TaintedStat:	NORMAL getTrashRoots:conditional branch(ne, to iindex=54) 31,9 Node: < Application, Lorg/apache/hadoop/fs/viewfs/ViewFileSystem, getTrashRoots(Z)Ljava/util/Collection; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/fs/viewfs/ViewFileSystem, getTrashRoots(Z)Ljava/util/Collection; > Context: Everywhere[48]31 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getBoolean(Ljava/lang/String;Z)Z > 28,29,9 @96 exception:30
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/fs/viewfs/ViewFileSystem, getTrashRoots(Z)Ljava/util/Collection; > Context: Everywhere[48]31 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getBoolean(Ljava/lang/String;Z)Z > 28,29,9 @96 exception:30
NORMAL getTrashRoots:conditional branch(ne, to iindex=54) 31,9 Node: < Application, Lorg/apache/hadoop/fs/viewfs/ViewFileSystem, getTrashRoots(Z)Ljava/util/Collection; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
    // FileStatus can be from targetFS or viewFS.
    HashMap<Path, FileStatus> trashRoots = new HashMap<>();
    for (FileSystem fs : getChildFileSystems()) {
      for (FileStatus trash : fs.getTrashRoots(allUsers)) {
        trashRoots.put(trash.getPath(), trash);
      }
    }

    // Return trashRoots if FORCE_INSIDE_MOUNT_POINT is disabled.
    if (!config.getBoolean(CONFIG_VIEWFS_TRASH_FORCE_INSIDE_MOUNT_POINT,
        CONFIG_VIEWFS_TRASH_FORCE_INSIDE_MOUNT_POINT_DEFAULT)) {
      return trashRoots.values();
    }

    // Get trash roots in TRASH_PREFIX dir inside mount points and fallback FS.
    List<InodeTree.MountPoint<FileSystem>> mountPoints =
        fsState.getMountPoints();
    // If we have a fallback FS, add a mount point for it as <"", fallback FS>.
    // The source path of a mount point shall not end with '/', thus for
    // fallback fs, we set its mount point src as "".
    if (fsState.getRootFallbackLink() != null) {
      mountPoints.add(new InodeTree.MountPoint<>("",
          fsState.getRootFallbackLink()));
    }

    try {
      for (InodeTree.MountPoint<FileSystem> mountPoint : mountPoints) {

        Path trashRoot =
            makeQualified(new Path(mountPoint.src + "/" + TRASH_PREFIX));

        // Continue if trashRoot does not exist for this mount point
        if (!exists(trashRoot)) {
          continue;
        }

        FileSystem targetFS = mountPoint.target.getTargetFileSystem();
        if (!allUsers) {
          Path userTrashRoot = new Path(trashRoot, ugi.getShortUserName());
          if (exists(userTrashRoot)) {
            Path targetFSUserTrashRoot = targetFS.makeQualified(
                new Path(targetFS.getUri().getPath(),
                    TRASH_PREFIX + "/" + ugi.getShortUserName()));
            trashRoots.put(targetFSUserTrashRoot, getFileStatus(userTrashRoot));
          }
        } else {
          FileStatus[] mountPointTrashRoots = listStatus(trashRoot);
          for (FileStatus trash : mountPointTrashRoots) {
            // Remove the mountPoint and the leading '/' to get the
            // relative targetFsTrash path
            String targetFsTrash = trash.getPath().toUri().getPath()
                .substring(mountPoint.src.length() + 1);
            Path targetFsTrashPath = targetFS.makeQualified(
                new Path(targetFS.getUri().getPath(), targetFsTrash));
            trashRoots.put(targetFsTrashPath, trash);
          }
        }
      }
    } catch (IOException e) {
      LOG.warn("Exception in get all trash roots for mount points", e);
    }

    return trashRoots.values();
  }


====================ctx:=======================
