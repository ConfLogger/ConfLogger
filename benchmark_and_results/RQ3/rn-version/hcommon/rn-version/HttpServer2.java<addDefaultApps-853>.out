====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	HttpServer2.java	methodSinagture:	org.apache.hadoop.http.HttpServer2.addDefaultApps(Lorg/eclipse/jetty/server/handler/ContextHandlerCollection;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V	methodLines:	853:897
blockLines:	863:-1
paras:	null
TaintedStat:	NORMAL addDefaultApps:conditional branch(eq, to iindex=42) 25,14 Node: < Application, Lorg/apache/hadoop/http/HttpServer2, addDefaultApps(Lorg/eclipse/jetty/server/handler/ContextHandlerCollection;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/http/HttpServer2, addDefaultApps(Lorg/eclipse/jetty/server/handler/ContextHandlerCollection;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere[31]25 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getBoolean(Ljava/lang/String;Z)Z > 4,23,10 @59 exception:24
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/http/HttpServer2, addDefaultApps(Lorg/eclipse/jetty/server/handler/ContextHandlerCollection;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere[31]25 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getBoolean(Ljava/lang/String;Z)Z > 4,23,10 @59 exception:24
NORMAL addDefaultApps:conditional branch(eq, to iindex=42) 25,14 Node: < Application, Lorg/apache/hadoop/http/HttpServer2, addDefaultApps(Lorg/eclipse/jetty/server/handler/ContextHandlerCollection;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere

-------------TaintedSinkInfo----------
fileName:	HttpServer2.java	methodSinagture:	org.apache.hadoop.http.HttpServer2.addDefaultApps(Lorg/eclipse/jetty/server/handler/ContextHandlerCollection;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V	methodLines:	853:897
blockLines:	858:-1
paras:	null
TaintedStat:	NORMAL addDefaultApps:conditional branch(eq, to iindex=78) 12,14 Node: < Application, Lorg/apache/hadoop/http/HttpServer2, addDefaultApps(Lorg/eclipse/jetty/server/handler/ContextHandlerCollection;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/http/HttpServer2, addDefaultApps(Lorg/eclipse/jetty/server/handler/ContextHandlerCollection;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere[6]12 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getBoolean(Ljava/lang/String;Z)Z > 4,9,10 @11 exception:11
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/http/HttpServer2, addDefaultApps(Lorg/eclipse/jetty/server/handler/ContextHandlerCollection;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere[6]12 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, getBoolean(Ljava/lang/String;Z)Z > 4,9,10 @11 exception:11
NORMAL addDefaultApps:conditional branch(eq, to iindex=78) 12,14 Node: < Application, Lorg/apache/hadoop/http/HttpServer2, addDefaultApps(Lorg/eclipse/jetty/server/handler/ContextHandlerCollection;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
    // and it's enabled.
    String logDir = System.getProperty("hadoop.log.dir");
    boolean logsEnabled = conf.getBoolean(
        CommonConfigurationKeys.HADOOP_HTTP_LOGS_ENABLED,
        CommonConfigurationKeys.HADOOP_HTTP_LOGS_ENABLED_DEFAULT);
    if (logDir != null && logsEnabled) {
      ServletContextHandler logContext =
          new ServletContextHandler(parent, "/logs");
      logContext.setResourceBase(logDir);
      logContext.addServlet(AdminAuthorizedServlet.class, "/*");
      if (conf.getBoolean(
          CommonConfigurationKeys.HADOOP_JETTY_LOGS_SERVE_ALIASES,
          CommonConfigurationKeys.DEFAULT_HADOOP_JETTY_LOGS_SERVE_ALIASES)) {
        @SuppressWarnings("unchecked")
        Map<String, String> params = logContext.getInitParams();
        params.put("org.eclipse.jetty.servlet.Default.aliases", "true");
      }
      logContext.setDisplayName("logs");
      SessionHandler handler = new SessionHandler();
      handler.setHttpOnly(true);
      handler.getSessionCookieConfig().setSecure(true);
      logContext.setSessionHandler(handler);
      logContext.addAliasCheck(new SymlinkAllowedResourceAliasChecker(logContext));
      setContextAttributes(logContext, conf);
      addNoCacheFilter(logContext);
      defaultContexts.put(logContext, true);
    }
    // set up the context for "/static/*"
    ServletContextHandler staticContext =
        new ServletContextHandler(parent, "/static");
    staticContext.setResourceBase(appDir + "/static");
    staticContext.addServlet(WebServlet.class, "/*");
    staticContext.setDisplayName("static");
    @SuppressWarnings("unchecked")
    Map<String, String> params = staticContext.getInitParams();
    params.put("org.eclipse.jetty.servlet.Default.dirAllowed", "false");
    params.put("org.eclipse.jetty.servlet.Default.gzip", "true");
    SessionHandler handler = new SessionHandler();
    handler.setHttpOnly(true);
    handler.getSessionCookieConfig().setSecure(true);
    staticContext.setSessionHandler(handler);
    staticContext.addAliasCheck(new SymlinkAllowedResourceAliasChecker(staticContext));
    setContextAttributes(staticContext, conf);
    defaultContexts.put(staticContext, true);
  }



====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/http/HttpServer2, initializeWebServer(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;[Ljava/lang/String;)V > Context: Everywhere, blocks=[BB[SSA:67..72]30 - org.apache.hadoop.http.HttpServer2.initializeWebServer(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;[Ljava/lang/String;)V, BB[SSA:64..66]29 - org.apache.hadoop.http.HttpServer2.initializeWebServer(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;[Ljava/lang/String;)V, BB[SSA:73..74]31 - org.apache.hadoop.http.HttpServer2.initializeWebServer(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;[Ljava/lang/String;)V, BB[SSA:-1..-2]52 - org.apache.hadoop.http.HttpServer2.initializeWebServer(Ljava/lang/String;Ljava/lang/String;Lorg/apache/hadoop/conf/Configuration;[Ljava/lang/String;)V], numberOfBasicBlocks=4, firstLineNumber=730, lastLineNumber=732, firstMethodNumber=703, lastMethodNumber=747, isFirstLineValid=true, methodSrcCode=

    Preconditions.checkNotNull(webAppContext);

    int maxThreads = conf.getInt(HTTP_MAX_THREADS_KEY, -1);
    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the
    // default value (currently 250).

    QueuedThreadPool threadPool = (QueuedThreadPool) webServer.getThreadPool();
    threadPool.setDaemon(true);
    if (maxThreads != -1) {
      threadPool.setMaxThreads(maxThreads);
    }

    SessionHandler handler = webAppContext.getSessionHandler();
    handler.setHttpOnly(true);
    handler.getSessionCookieConfig().setSecure(true);

    ContextHandlerCollection contexts = new ContextHandlerCollection();
    RequestLog requestLog = HttpRequestLog.getRequestLog(name);

    handlers.addHandler(contexts);
    if (requestLog != null) {
      RequestLogHandler requestLogHandler = new RequestLogHandler();
      requestLogHandler.setRequestLog(requestLog);
      handlers.addHandler(requestLogHandler);
    }
    handlers.addHandler(webAppContext);
    final String appDir = getWebAppsPath(name);
    addDefaultApps(contexts, appDir, conf);
    webServer.setHandler(handlers);

    Map<String, String> xFrameParams = setHeaders(conf);
    addGlobalFilter("safety", QuotingInputFilter.class.getName(), xFrameParams);
    final FilterInitializer[] initializers = getFilterInitializers(conf);
    if (initializers != null) {
      conf = new Configuration(conf);
      conf.set(BIND_ADDRESS, hostName);
      for (FilterInitializer c : initializers) {
        c.initFilter(this, conf);
      }
    }

    addDefaultServlets();
    addPrometheusServlet(conf);
  }

}
