====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	KerberosName.java	methodSinagture:	org.apache.hadoop.security.authentication.util.KerberosName.setRuleMechanism(Ljava/lang/String;)V	methodLines:	483:490
blockLines:	484:-1
paras:	null
TaintedStat:	NORMAL setRuleMechanism:conditional branch(eq, to iindex=25) 1,3 Node: < Application, Lorg/apache/hadoop/security/authentication/util/KerberosName, setRuleMechanism(Ljava/lang/String;)V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/security/HadoopKerberosName, setConfiguration(Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere[31]25 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 1,22,23 @81 exception:24
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/security/HadoopKerberosName, setConfiguration(Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere[31]25 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 1,22,23 @81 exception:24
PARAM_CALLER:Node: < Application, Lorg/apache/hadoop/security/HadoopKerberosName, setConfiguration(Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere[34]invokestatic < Application, Lorg/apache/hadoop/security/HadoopKerberosName, setRuleMechanism(Ljava/lang/String;)V > 25 @86 exception:26 v25
PARAM_CALLEE:Node: < Application, Lorg/apache/hadoop/security/authentication/util/KerberosName, setRuleMechanism(Ljava/lang/String;)V > Context: Everywhere v1
NORMAL setRuleMechanism:conditional branch(eq, to iindex=25) 1,3 Node: < Application, Lorg/apache/hadoop/security/authentication/util/KerberosName, setRuleMechanism(Ljava/lang/String;)V > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
  public static void setRuleMechanism(String ruleMech) {
    if (ruleMech != null
            && (!ruleMech.equalsIgnoreCase(MECHANISM_HADOOP)
            && !ruleMech.equalsIgnoreCase(MECHANISM_MIT))) {
      throw new IllegalArgumentException("Invalid rule mechanism: " + ruleMech);
    }
    ruleMechanism = ruleMech;
  }



====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/security/HadoopKerberosName, setConfiguration(Lorg/apache/hadoop/conf/Configuration;)V > Context: Everywhere, blocks=null, numberOfBasicBlocks=0, firstLineNumber=0, lastLineNumber=0, firstMethodNumber=64, lastMethodNumber=85, isFirstLineValid=true, methodSrcCode=
    final String defaultRule;
    switch (SecurityUtil.getAuthenticationMethod(conf)) {
      case KERBEROS:
      case KERBEROS_SSL:
        try {
          KerberosUtil.getDefaultRealm();
        } catch (Exception ke) {
          throw new IllegalArgumentException("Can't get Kerberos realm", ke);
        }
        defaultRule = "DEFAULT";
        break;
      default:
        // just extract the simple user name
        defaultRule = "RULE:[1:$1] RULE:[2:$1]";
        break; 
    }
    String ruleString = conf.get(HADOOP_SECURITY_AUTH_TO_LOCAL, defaultRule);
    setRules(ruleString);

    String ruleMechanism = conf.get(HADOOP_SECURITY_AUTH_TO_LOCAL_MECHANISM,  DEFAULT_MECHANISM);
    setRuleMechanism(ruleMechanism);
  }

}
