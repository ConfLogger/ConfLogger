====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	HttpServer2.java	methodSinagture:	org.apache.hadoop.http.HttpServer2.createWebAppContext(Lorg/apache/hadoop/http/HttpServer2$Builder;Lorg/apache/hadoop/security/authorize/AccessControlList;Ljava/lang/String;)Lorg/eclipse/jetty/webapp/WebAppContext;	methodLines:	766:790
blockLines:	783:-1
paras:	null
TaintedStat:	NORMAL createWebAppContext:conditional branch(eq, to iindex=86) 60,7 Node: < Application, Lorg/apache/hadoop/http/HttpServer2, createWebAppContext(Lorg/apache/hadoop/http/HttpServer2$Builder;Lorg/apache/hadoop/security/authorize/AccessControlList;Ljava/lang/String;)Lorg/eclipse/jetty/webapp/WebAppContext; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/http/HttpServer2, createWebAppContext(Lorg/apache/hadoop/http/HttpServer2$Builder;Lorg/apache/hadoop/security/authorize/AccessControlList;Ljava/lang/String;)Lorg/eclipse/jetty/webapp/WebAppContext; > Context: Everywhere[67]60 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;)Ljava/lang/String; > 57,58 @143 exception:59
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/hadoop/http/HttpServer2, createWebAppContext(Lorg/apache/hadoop/http/HttpServer2$Builder;Lorg/apache/hadoop/security/authorize/AccessControlList;Ljava/lang/String;)Lorg/eclipse/jetty/webapp/WebAppContext; > Context: Everywhere[67]60 = invokevirtual < Application, Lorg/apache/hadoop/conf/Configuration, get(Ljava/lang/String;)Ljava/lang/String; > 57,58 @143 exception:59
NORMAL createWebAppContext:conditional branch(eq, to iindex=86) 60,7 Node: < Application, Lorg/apache/hadoop/http/HttpServer2, createWebAppContext(Lorg/apache/hadoop/http/HttpServer2$Builder;Lorg/apache/hadoop/security/authorize/AccessControlList;Ljava/lang/String;)Lorg/eclipse/jetty/webapp/WebAppContext; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
      AccessControlList adminsAcl, final String appDir) {
    WebAppContext ctx = new WebAppContext();
    ctx.setDefaultsDescriptor(null);
    ServletHolder holder = new ServletHolder(new WebServlet());
    Map<String, String> params = ImmutableMap. <String, String> builder()
            .put("acceptRanges", "true")
            .put("dirAllowed", "false")
            .put("gzip", "true")
            .put("useFileMappedBuffer", "true")
            .build();
    holder.setInitParameters(params);
    ctx.setWelcomeFiles(new String[] {"index.html"});
    ctx.addServlet(holder, "/");
    ctx.setDisplayName(b.name);
    ctx.setContextPath("/");
    ctx.setWar(appDir + "/" + b.name);
    String tempDirectory = b.conf.get(HTTP_TEMP_DIR_KEY);
    if (tempDirectory != null && !tempDirectory.isEmpty()) {
      ctx.setTempDirectory(new File(tempDirectory));
      ctx.setAttribute("javax.servlet.context.tempdir", tempDirectory);
    }
    ctx.getServletContext().setAttribute(CONF_CONTEXT_ATTRIBUTE, b.conf);
    ctx.getServletContext().setAttribute(ADMINS_ACL, adminsAcl);
    addNoCacheFilter(ctx);
    return ctx;
  }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/hadoop/http/HttpServer2, <init>(Lorg/apache/hadoop/http/HttpServer2$Builder;)V > Context: Everywhere, blocks=[BB[SSA:38..39]21 - org.apache.hadoop.http.HttpServer2.<init>(Lorg/apache/hadoop/http/HttpServer2$Builder;)V, BB[SSA:34..37]20 - org.apache.hadoop.http.HttpServer2.<init>(Lorg/apache/hadoop/http/HttpServer2$Builder;)V, BB[SSA:40..40]22 - org.apache.hadoop.http.HttpServer2.<init>(Lorg/apache/hadoop/http/HttpServer2$Builder;)V, BB[SSA:-1..-2]52 - org.apache.hadoop.http.HttpServer2.<init>(Lorg/apache/hadoop/http/HttpServer2$Builder;)V], numberOfBasicBlocks=4, firstLineNumber=678, lastLineNumber=678, firstMethodNumber=672, lastMethodNumber=698, isFirstLineValid=true, methodSrcCode=

  private HttpServer2(final Builder b) throws IOException {
    final String appDir = getWebAppsPath(b.name);
    this.webServer = new Server();
    this.adminsAcl = b.adminsAcl;
    this.handlers = new HandlerCollection();
    this.webAppContext = createWebAppContext(b, adminsAcl, appDir);
    this.xFrameOptionIsEnabled = b.xFrameEnabled;
    this.xFrameOption = b.xFrameOption;
    this.configurationChangeMonitor = b.configurationChangeMonitor;

    try {
      this.secretProvider =
          constructSecretProvider(b, webAppContext.getServletContext());
      this.webAppContext.getServletContext().setAttribute
          (AuthenticationFilter.SIGNER_SECRET_PROVIDER_ATTRIBUTE,
           secretProvider);
    } catch(IOException e) {
      throw e;
    } catch (Exception e) {
      throw new IOException(e);
    }

    this.findPort = b.findPort;
    this.portRanges = b.portRanges;
    initializeWebServer(b.name, b.hostName, b.conf, b.pathSpecs);
  }

}
