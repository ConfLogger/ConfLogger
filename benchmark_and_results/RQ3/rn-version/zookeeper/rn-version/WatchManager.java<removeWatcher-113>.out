====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	WatchManager.java	methodSinagture:	org.apache.zookeeper.server.watch.WatchManager.removeWatcher(Lorg/apache/zookeeper/Watcher;)V	methodLines:	113:132
blockLines:	120:-1
paras:	null
TaintedStat:	NORMAL removeWatcher:conditional branch(eq, to iindex=44) 22,8 Node: < Application, Lorg/apache/zookeeper/server/watch/WatchManager, removeWatcher(Lorg/apache/zookeeper/Watcher;)V > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/watch/WatchManager, removeWatcher(Lorg/apache/zookeeper/Watcher;)V > Context: Everywhere[25]21 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 19,18 @57 exception:20
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/watch/WatchManager, removeWatcher(Lorg/apache/zookeeper/Watcher;)V > Context: Everywhere[25]21 = invokeinterface < Application, Ljava/util/Map, get(Ljava/lang/Object;)Ljava/lang/Object; > 19,18 @57 exception:20
NORMAL removeWatcher:[null]: 22 = checkcast <Application,Ljava/util/Set>21 <Application,Ljava/util/Set> Node: < Application, Lorg/apache/zookeeper/server/watch/WatchManager, removeWatcher(Lorg/apache/zookeeper/Watcher;)V > Context: Everywhere
NORMAL removeWatcher:conditional branch(eq, to iindex=44) 22,8 Node: < Application, Lorg/apache/zookeeper/server/watch/WatchManager, removeWatcher(Lorg/apache/zookeeper/Watcher;)V > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
    public synchronized void removeWatcher(Watcher watcher) {
        Map<String, WatchStats> paths = watch2Paths.remove(watcher);
        if (paths == null) {
            return;
        }
        for (String p : paths.keySet()) {
            Set<Watcher> list = watchTable.get(p);
            if (list != null) {
                list.remove(watcher);
                if (list.isEmpty()) {
                    watchTable.remove(p);
                }
            }
        }
        for (WatchStats stats : paths.values()) {
            if (stats.hasMode(WatcherMode.PERSISTENT_RECURSIVE)) {
                --recursiveWatchQty;
            }
        }
    }



====================ctx:=======================
