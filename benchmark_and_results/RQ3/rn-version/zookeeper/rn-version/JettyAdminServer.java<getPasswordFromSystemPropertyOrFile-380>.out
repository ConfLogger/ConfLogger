====================TaintedSinkInfo:=======================
-------------TaintedSinkInfo----------
fileName:	JettyAdminServer.java	methodSinagture:	org.apache.zookeeper.server.admin.JettyAdminServer.getPasswordFromSystemPropertyOrFile(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;	methodLines:	380:386
blockLines:	383:-1
paras:	null
TaintedStat:	NORMAL getPasswordFromSystemPropertyOrFile:conditional branch(ne, to iindex=16) 11,12 Node: < Application, Lorg/apache/zookeeper/server/admin/JettyAdminServer, getPasswordFromSystemPropertyOrFile(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere
Source:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/admin/JettyAdminServer, getPasswordFromSystemPropertyOrFile(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/zookeeper/server/admin/JettyAdminServer in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/zookeeper/server/admin/JettyAdminServer, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.zookeeper.server.admin.AdminServerFactory.createAdminServer()Lorg/apache/zookeeper/server/admin/AdminServer;@31 ]], B=Everywhere]}>, B=Everywhere][6]9 = invokestatic < Application, Ljava/lang/System, getProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 3,5 @10 exception:8
Tainted Path:	NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/admin/JettyAdminServer, getPasswordFromSystemPropertyOrFile(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/zookeeper/server/admin/JettyAdminServer in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/zookeeper/server/admin/JettyAdminServer, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.zookeeper.server.admin.AdminServerFactory.createAdminServer()Lorg/apache/zookeeper/server/admin/AdminServer;@31 ]], B=Everywhere]}>, B=Everywhere][6]9 = invokestatic < Application, Ljava/lang/System, getProperty(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > 3,5 @10 exception:8
NORMAL getPasswordFromSystemPropertyOrFile:11 = invokevirtual < Application, Ljava/lang/String, isEmpty()Z > 9 @17 exception:10 Node: < Application, Lorg/apache/zookeeper/server/admin/JettyAdminServer, getPasswordFromSystemPropertyOrFile(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > Context: DelegatingContext [A=ReceiverInstanceContext<SITE_IN_NODE{synthetic  factory < Primordial, Ljava/lang/reflect/Constructor, newInstance([Ljava/lang/Object;)Ljava/lang/Object; >:Lorg/apache/zookeeper/server/admin/JettyAdminServer in DelegatingContext [A=DelegatingContext [A=ReceiverInstanceContext<[ConstantKey:< Application, Lorg/apache/zookeeper/server/admin/JettyAdminServer, <init>()V >:<Primordial,Ljava/lang/reflect/Constructor>]>, B=CallStringContext: [ org.apache.zookeeper.server.admin.AdminServerFactory.createAdminServer()Lorg/apache/zookeeper/server/admin/AdminServer;@31 ]], B=Everywhere]}>, B=Everywhere]
METHOD_ENTRY:Node: < Primordial, Ljava/lang/String, isEmpty()Z > Context: Everywhere
NORMAL isEmpty:return 7 Node: < Primordial, Ljava/lang/String, isEmpty()Z > Context: Everywhere
NORMAL_RET_CALLEE:Node: < Primordial, Ljava/lang/String, isEmpty()Z > Context: Everywhere
NORMAL_RET_CALLER:Node: < Application, Lorg/apache/zookeeper/server/admin/JettyAdminServer, getPasswordFromSystemPropertyOrFile(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere[9]11 = invokevirtual < Application, Ljava/lang/String, isEmpty()Z > 9 @17 exception:10
NORMAL getPasswordFromSystemPropertyOrFile:conditional branch(ne, to iindex=16) 11,12 Node: < Application, Lorg/apache/zookeeper/server/admin/JettyAdminServer, getPasswordFromSystemPropertyOrFile(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; > Context: Everywhere



====================ExtendedBlocks:=======================


====================MethodSrc:=======================
                                                       final String pathPropertyName) {
        String value = System.getProperty(propertyName, "");
        final String pathValue = System.getProperty(pathPropertyName, "");
        if (!pathValue.isEmpty()) {
            value = String.valueOf(SecretUtils.readSecret(pathValue));
        }
        return value;
    }


====================ctx:=======================
CtxCodeBlock{node=Node: < Application, Lorg/apache/zookeeper/server/admin/JettyAdminServer, <init>(Ljava/lang/String;IILjava/lang/String;IZZZ)V > Context: Everywhere, blocks=[BB[SSA:73..73]31 - org.apache.zookeeper.server.admin.JettyAdminServer.<init>(Ljava/lang/String;IILjava/lang/String;IZZZ)V, BB[SSA:71..72]30 - org.apache.zookeeper.server.admin.JettyAdminServer.<init>(Ljava/lang/String;IILjava/lang/String;IZZZ)V, BB[SSA:74..76]32 - org.apache.zookeeper.server.admin.JettyAdminServer.<init>(Ljava/lang/String;IILjava/lang/String;IZZZ)V, BB[SSA:90..90]38 - org.apache.zookeeper.server.admin.JettyAdminServer.<init>(Ljava/lang/String;IILjava/lang/String;IZZZ)V, BB[SSA:88..89]37 - org.apache.zookeeper.server.admin.JettyAdminServer.<init>(Ljava/lang/String;IILjava/lang/String;IZZZ)V, BB[SSA:91..99]39 - org.apache.zookeeper.server.admin.JettyAdminServer.<init>(Ljava/lang/String;IILjava/lang/String;IZZZ)V], numberOfBasicBlocks=6, firstLineNumber=136, lastLineNumber=141, firstMethodNumber=104, lastMethodNumber=182, isFirstLineValid=true, methodSrcCode=
        boolean forceHttps,
        boolean needClientAuth) throws IOException, GeneralSecurityException {

        this.port = port;
        this.idleTimeout = timeout;
        this.commandUrl = commandUrl;
        this.address = address;

        server = new Server();
        ServerConnector connector = null;

        if (!portUnification && !forceHttps) {
            connector = new ServerConnector(server);
        } else {
            SecureRequestCustomizer customizer = new SecureRequestCustomizer();
            customizer.setStsMaxAge(DEFAULT_STS_MAX_AGE);
            customizer.setStsIncludeSubDomains(true);

            HttpConfiguration config = new HttpConfiguration();
            config.setSecureScheme("https");
            config.addCustomizer(customizer);

            try (QuorumX509Util x509Util = new QuorumX509Util()) {
                String privateKeyType = System.getProperty(x509Util.getSslKeystoreTypeProperty(), "");
                String privateKeyPath = System.getProperty(x509Util.getSslKeystoreLocationProperty(), "");
                String privateKeyPassword = getPasswordFromSystemPropertyOrFile(
                        x509Util.getSslKeystorePasswdProperty(),
                        x509Util.getSslKeystorePasswdPathProperty());

                String certAuthType = System.getProperty(x509Util.getSslTruststoreTypeProperty(), "");
                String certAuthPath = System.getProperty(x509Util.getSslTruststoreLocationProperty(), "");
                String certAuthPassword = getPasswordFromSystemPropertyOrFile(
                        x509Util.getSslTruststorePasswdProperty(),
                        x509Util.getSslTruststorePasswdPathProperty());
                KeyStore keyStore = null, trustStore = null;

                try {
                    keyStore = X509Util.loadKeyStore(privateKeyPath, privateKeyPassword, privateKeyType);
                    trustStore = X509Util.loadTrustStore(certAuthPath, certAuthPassword, certAuthType);
                    LOG.info("Successfully loaded private key from {}", privateKeyPath);
                    LOG.info("Successfully loaded certificate authority from {}", certAuthPath);
                } catch (Exception e) {
                    LOG.error("Failed to load authentication certificates for admin server.", e);
                    throw e;
                }

                SslContextFactory.Server sslContextFactory = new SslContextFactory.Server();
                sslContextFactory.setKeyStore(keyStore);
                sslContextFactory.setKeyStorePassword(privateKeyPassword);
                sslContextFactory.setTrustStore(trustStore);
                sslContextFactory.setTrustStorePassword(certAuthPassword);
                sslContextFactory.setNeedClientAuth(needClientAuth);

                if (forceHttps) {
                    connector = new ServerConnector(server,
                            new SslConnectionFactory(sslContextFactory, HttpVersion.fromVersion(httpVersion).asString()),
                            new HttpConnectionFactory(config));
                } else {
                    connector = new ServerConnector(
                            server,
                            new UnifiedConnectionFactory(sslContextFactory, HttpVersion.fromVersion(httpVersion).asString()),
                            new HttpConnectionFactory(config));
                }
            }
        }

        connector.setHost(address);
        connector.setPort(port);
        connector.setIdleTimeout(idleTimeout);

        server.addConnector(connector);

        ServletContextHandler context = new ServletContextHandler(ServletContextHandler.SESSIONS);
        context.setContextPath("/*");
        constrainTraceMethod(context);
        server.setHandler(context);

        context.addServlet(new ServletHolder(new CommandServlet()), commandUrl + "/*");
    }

}
