/** 
 * the filetxnsnaplog that this zk database maps to. There is a one to one relationship between a filetxnsnaplog and zkdatabase.
 * @param snapLog the FileTxnSnapLog mapping this zkdatabase
 */
public ZKDatabase(FileTxnSnapLog snapLog){
  dataTree=createDataTree();
  sessionsWithTimeouts=new ConcurrentHashMap<>();
  this.snapLog=snapLog;
  try {
    snapshotSizeFactor=Double.parseDouble(System.getProperty(SNAPSHOT_SIZE_FACTOR,Double.toString(DEFAULT_SNAPSHOT_SIZE_FACTOR)));
    if (snapshotSizeFactor > 1) {
      snapshotSizeFactor=DEFAULT_SNAPSHOT_SIZE_FACTOR;
      LOG.warn("The configured {} is invalid, going to use the default {}",SNAPSHOT_SIZE_FACTOR,DEFAULT_SNAPSHOT_SIZE_FACTOR);
    }
  }
 catch (  NumberFormatException e) {
    LOG.error("Error parsing {}, using default value {}",SNAPSHOT_SIZE_FACTOR,DEFAULT_SNAPSHOT_SIZE_FACTOR);
    snapshotSizeFactor=DEFAULT_SNAPSHOT_SIZE_FACTOR;
  }
  LOG.info("{} = {}",SNAPSHOT_SIZE_FACTOR,snapshotSizeFactor);
  try {
    commitLogCount=Integer.parseInt(System.getProperty(COMMIT_LOG_COUNT,Integer.toString(DEFAULT_COMMIT_LOG_COUNT)));
    if (commitLogCount < DEFAULT_COMMIT_LOG_COUNT) {
      commitLogCount=DEFAULT_COMMIT_LOG_COUNT;
      LOG.warn("The configured commitLogCount {} is less than the recommended {}, going to use the recommended one",COMMIT_LOG_COUNT,DEFAULT_COMMIT_LOG_COUNT);
    }
  }
 catch (  NumberFormatException e) {
    LOG.error("Error parsing {} - use default value {}",COMMIT_LOG_COUNT,DEFAULT_COMMIT_LOG_COUNT);
    commitLogCount=DEFAULT_COMMIT_LOG_COUNT;
  }
  LOG.info("{}={}",COMMIT_LOG_COUNT,commitLogCount);
}
