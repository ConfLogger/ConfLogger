Insert a logging statement to the following code using <API>. Format: <Line#X>:# <Statement>:#

Target Code:
<Line#0> private void waitForDesiredCodeReplication(Map<String, Object> topoConf, String topoId) throws Exception {
<Line#1> int minReplicationCount = ObjectReader.getInt(topoConf.get(Config.TOPOLOGY_MIN_REPLICATION_COUNT));
<Line#2> int maxWaitTime = ObjectReader.getInt(topoConf.get(Config.TOPOLOGY_MAX_REPLICATION_WAIT_TIME_SEC));
<Line#3> int jarCount = minReplicationCount;
<Line#4> if (!ConfigUtils.isLocalMode(topoConf)) {
<Line#5> jarCount = getBlobReplicationCount(ConfigUtils.masterStormJarKey(topoId));
<Line#6> }
<Line#7> int codeCount = getBlobReplicationCount(ConfigUtils.masterStormCodeKey(topoId));
<Line#8> int confCount = getBlobReplicationCount(ConfigUtils.masterStormConfKey(topoId));
<Line#9> long totalWaitTime = 0;
<Line#10> //When is this ever null?
<Line#11> if (blobStore != null) {
<Line#12> while (jarCount < minReplicationCount
<Line#13> && codeCount < minReplicationCount
<Line#14> && confCount < minReplicationCount) {
<Line#15> if (maxWaitTime > 0 && totalWaitTime > maxWaitTime) {
<Line#16> return;
<Line#17> }
<Line#18> LOG.debug("Checking if I am still the leader");
<Line#19> assertIsLeader();
<Line#20> LOG.info("WAITING... storm-id {}, {} <? {} {} {}", topoId, minReplicationCount, jarCount, codeCount, confCount);
<Line#21> LOG.info("WAITING... {} <? {}", totalWaitTime, maxWaitTime);
<Line#22> Time.sleepSecs(1);
<Line#23> totalWaitTime++;
<Line#24> if (!ConfigUtils.isLocalMode(topoConf)) {
<Line#25> jarCount = getBlobReplicationCount(ConfigUtils.masterStormJarKey(topoId));
<Line#26> }
<Line#27> codeCount = getBlobReplicationCount(ConfigUtils.masterStormCodeKey(topoId));
<Line#28> confCount = getBlobReplicationCount(ConfigUtils.masterStormConfKey(topoId));
<Line#29> }
<Line#30> }
<Line#31> LOG.info("desired replication count {} achieved for topology {}, current-replication-count for conf key = {},"
<Line#32> + " current-replication-count for code key = {}, current-replication-count for jar key = {}",
<Line#33> minReplicationCount, topoId, confCount, codeCount, jarCount);
<Line#34> }

Relevant Logging Patterns:
Example 1:
File: storm__preCommit-168__.json
Code:
<Line#1>{
<Line#2>  if (!isStateInitialized() || (!isRecovering() && prePrepared)) {
<Line#3>    LOG.debug("Commit streamState, txid {}",txid);
<Line#4>    streamState.commit(txid);
<Line#5>  }
<Line#6> else {
<Line#7>    LOG.debug("Still recovering, ignoring preCommit and not committing streamState.");
<Line#8>  }
<Line#9>}
Log: <Line#3>:# LOG.debug("Commit streamState, txid {}",txid):#

Example 2:
File: storm__preCommit-168__.json
Code:
<Line#1>{
<Line#2>  if (!isStateInitialized() || (!isRecovering() && prePrepared)) {
<Line#3>    LOG.debug("Commit streamState, txid {}",txid);
<Line#4>    streamState.commit(txid);
<Line#5>  }
<Line#6> else {
<Line#7>    LOG.debug("Still recovering, ignoring preCommit and not committing streamState.");
<Line#8>  }
<Line#9>}
Log: <Line#7>:# LOG.debug("Still recovering, ignoring preCommit and not committing streamState."):#

Example 3:
File: storm__onRemoval-224__.json
Code:
<Line#1>{
<Line#2>  Objects.requireNonNull(pid,"Null partition id");
<Line#3>  Objects.requireNonNull(p,"Null window partition");
<Line#4>  LOG.debug("onRemoval for id '{}', WindowPartition '{}'",pid,p);
<Line#5>  try {
<Line#6>    windowPartitionsLock.lock(pid);
<Line#7>    if (p.isEmpty() && pid != latestPartitionId) {
<Line#8>      if (removalCause != WindowPartitionCache.RemovalCause.EXPLICIT) {
<Line#9>        deletePartition(pid);
<Line#10>        windowPartitionsState.delete(pid);
<Line#11>      }
<Line#12>    }
<Line#13> else     if (p.isModified()) {
<Line#14>      windowPartitionsState.put(pid,p);
<Line#15>    }
<Line#16> else {
<Line#17>      LOG.debug("WindowPartition '{}' is not modified",pid);
<Line#18>    }
<Line#19>  }
<Line#20>  finally {
<Line#21>    windowPartitionsLock.unlock(pid);
<Line#22>  }
<Line#23>}
Log: <Line#4>:# LOG.debug("onRemoval for id '{}', WindowPartition '{}'",pid,p):#

Example 4:
File: storm__onRemoval-224__.json
Code:
<Line#1>{
<Line#2>  Objects.requireNonNull(pid,"Null partition id");
<Line#3>  Objects.requireNonNull(p,"Null window partition");
<Line#4>  LOG.debug("onRemoval for id '{}', WindowPartition '{}'",pid,p);
<Line#5>  try {
<Line#6>    windowPartitionsLock.lock(pid);
<Line#7>    if (p.isEmpty() && pid != latestPartitionId) {
<Line#8>      if (removalCause != WindowPartitionCache.RemovalCause.EXPLICIT) {
<Line#9>        deletePartition(pid);
<Line#10>        windowPartitionsState.delete(pid);
<Line#11>      }
<Line#12>    }
<Line#13> else     if (p.isModified()) {
<Line#14>      windowPartitionsState.put(pid,p);
<Line#15>    }
<Line#16> else {
<Line#17>      LOG.debug("WindowPartition '{}' is not modified",pid);
<Line#18>    }
<Line#19>  }
<Line#20>  finally {
<Line#21>    windowPartitionsLock.unlock(pid);
<Line#22>  }
<Line#23>}
Log: <Line#17>:# LOG.debug("WindowPartition '{}' is not modified",pid):#

Example 5:
File: storm__success-168__.json
Code:
<Line#1>{
<Line#2>  for (  EmitterPartitionState state : partitionStates.values()) {
<Line#3>    state.rotatingState.cleanupBefore(tx.getTransactionId());
<Line#4>  }
<Line#5>  LOG.debug("Success transaction {}. [{}]",tx,this);
<Line#6>}
Log: <Line#5>:# LOG.debug("Success transaction {}. [{}]",tx,this):#
