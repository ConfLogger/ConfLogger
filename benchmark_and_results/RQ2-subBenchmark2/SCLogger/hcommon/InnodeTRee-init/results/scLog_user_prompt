Insert a logging statement to the following code using <API>. Format: <Line#X>:# <Statement>:#

Target Code:
<Line#0> throws UnsupportedFileSystemException, URISyntaxException,
<Line#1> FileAlreadyExistsException, IOException {
<Line#2> String mountTableName = viewName;
<Line#3> if (mountTableName == null) {
<Line#4> mountTableName = ConfigUtil.getDefaultMountTableName(config);
<Line#5> }
<Line#6> homedirPrefix = ConfigUtil.getHomeDirValue(config, mountTableName);
<Line#7> 
<Line#8> boolean isMergeSlashConfigured = false;
<Line#9> String mergeSlashTarget = null;
<Line#10> List<LinkEntry> linkEntries = new LinkedList<>();
<Line#11> 
<Line#12> final String mountTablePrefix =
<Line#13> Constants.CONFIG_VIEWFS_PREFIX + "." + mountTableName + ".";
<Line#14> final String linkPrefix = Constants.CONFIG_VIEWFS_LINK + ".";
<Line#15> final String linkFallbackPrefix = Constants.CONFIG_VIEWFS_LINK_FALLBACK;
<Line#16> final String linkMergePrefix = Constants.CONFIG_VIEWFS_LINK_MERGE + ".";
<Line#17> final String linkMergeSlashPrefix =
<Line#18> Constants.CONFIG_VIEWFS_LINK_MERGE_SLASH;
<Line#19> boolean gotMountTableEntry = false;
<Line#20> final UserGroupInformation ugi = UserGroupInformation.getCurrentUser();
<Line#21> for (Entry<String, String> si : config) {
<Line#22> final String key = si.getKey();
<Line#23> if (!key.startsWith(mountTablePrefix)) {
<Line#24> continue;
<Line#25> }
<Line#26> 
<Line#27> gotMountTableEntry = true;
<Line#28> LinkType linkType;
<Line#29> String src = key.substring(mountTablePrefix.length());
<Line#30> String settings = null;
<Line#31> if (src.startsWith(linkPrefix)) {
<Line#32> src = src.substring(linkPrefix.length());
<Line#33> if (src.equals(SlashPath.toString())) {
<Line#34> throw new UnsupportedFileSystemException("Unexpected mount table "
<Line#35> + "link entry '" + key + "'. Use "
<Line#36> + Constants.CONFIG_VIEWFS_LINK_MERGE_SLASH  + " instead!");
<Line#37> }
<Line#38> linkType = LinkType.SINGLE;
<Line#39> } else if (src.startsWith(linkFallbackPrefix)) {
<Line#40> checkMntEntryKeyEqualsTarget(src, linkFallbackPrefix);
<Line#41> linkType = LinkType.SINGLE_FALLBACK;
<Line#42> } else if (src.startsWith(linkMergePrefix)) { // A merge link
<Line#43> src = src.substring(linkMergePrefix.length());
<Line#44> linkType = LinkType.MERGE;
<Line#45> } else if (src.startsWith(linkMergeSlashPrefix)) {
<Line#46> // This is a LinkMergeSlash entry. This entry should
<Line#47> // not have any additional source path.
<Line#48> checkMntEntryKeyEqualsTarget(src, linkMergeSlashPrefix);
<Line#49> linkType = LinkType.MERGE_SLASH;
<Line#50> } else if (src.startsWith(Constants.CONFIG_VIEWFS_LINK_NFLY)) {
<Line#51> // prefix.settings.src
<Line#52> src = src.substring(Constants.CONFIG_VIEWFS_LINK_NFLY.length() + 1);
<Line#53> // settings.src
<Line#54> settings = src.substring(0, src.indexOf('.'));
<Line#55> // settings
<Line#56> 
<Line#57> // settings.src
<Line#58> src = src.substring(settings.length() + 1);
<Line#59> // src
<Line#60> 
<Line#61> linkType = LinkType.NFLY;
<Line#62> } else if (src.startsWith(Constants.CONFIG_VIEWFS_LINK_REGEX)) {
<Line#63> linkEntries.add(
<Line#64> buildLinkRegexEntry(config, ugi, src, si.getValue()));
<Line#65> continue;
<Line#66> } else if (src.startsWith(Constants.CONFIG_VIEWFS_HOMEDIR)) {
<Line#67> // ignore - we set home dir from config
<Line#68> continue;
<Line#69> } else {
<Line#70> throw new IOException("ViewFs: Cannot initialize: Invalid entry in " +
<Line#71> "Mount table in config: " + src);
<Line#72> }
<Line#73> 
<Line#74> final String target = si.getValue();
<Line#75> if (linkType != LinkType.MERGE_SLASH) {
<Line#76> if (isMergeSlashConfigured) {
<Line#77> throw new IOException("Mount table " + mountTableName
<Line#78> + " has already been configured with a merge slash link. "
<Line#79> + "A regular link should not be added.");
<Line#80> }
<Line#81> linkEntries.add(
<Line#82> new LinkEntry(src, target, linkType, settings, ugi, config));
<Line#83> } else {
<Line#84> if (!linkEntries.isEmpty()) {
<Line#85> throw new IOException("Mount table " + mountTableName
<Line#86> + " has already been configured with regular links. "
<Line#87> + "A merge slash link should not be configured.");
<Line#88> }
<Line#89> if (isMergeSlashConfigured) {
<Line#90> throw new IOException("Mount table " + mountTableName
<Line#91> + " has already been configured with a merge slash link. "
<Line#92> + "Multiple merge slash links for the same mount table is "
<Line#93> + "not allowed.");
<Line#94> }
<Line#95> isMergeSlashConfigured = true;
<Line#96> mergeSlashTarget = target;
<Line#97> }
<Line#98> } // End of for loop.
<Line#99> 
<Line#100> if (isMergeSlashConfigured) {
<Line#101> Preconditions.checkNotNull(mergeSlashTarget);
<Line#102> root = new INodeLink<T>(mountTableName, ugi,
<Line#103> initAndGetTargetFs(), mergeSlashTarget);
<Line#104> mountPoints.add(new MountPoint<T>("/", (INodeLink<T>) root));
<Line#105> rootFallbackLink = null;
<Line#106> } else {
<Line#107> root = new INodeDir<T>("/", UserGroupInformation.getCurrentUser());
<Line#108> getRootDir().setInternalDirFs(getTargetFileSystem(getRootDir()));
<Line#109> getRootDir().setRoot(true);
<Line#110> INodeLink<T> fallbackLink = null;
<Line#111> for (LinkEntry le : linkEntries) {
<Line#112> switch (le.getLinkType()) {
<Line#113> case SINGLE_FALLBACK:
<Line#114> if (fallbackLink != null) {
<Line#115> throw new IOException("Mount table " + mountTableName
<Line#116> + " has already been configured with a link fallback. "
<Line#117> + "Multiple fallback links for the same mount table is "
<Line#118> + "not allowed.");
<Line#119> }
<Line#120> fallbackLink = new INodeLink<T>(mountTableName, ugi,
<Line#121> initAndGetTargetFs(), le.getTarget());
<Line#122> continue;
<Line#123> case REGEX:
<Line#124> addRegexMountEntry(le);
<Line#125> continue;
<Line#126> default:
<Line#127> createLink(le.getSrc(), le.getTarget(), le.getLinkType(),
<Line#128> le.getSettings(), le.getUgi(), le.getConfig());
<Line#129> }
<Line#130> }
<Line#131> rootFallbackLink = fallbackLink;
<Line#132> getRootDir().addFallbackLink(rootFallbackLink);
<Line#133> }
<Line#134> 
<Line#135> if (!gotMountTableEntry) {
<Line#136> if (!initingUriAsFallbackOnNoMounts) {
<Line#137> throw new IOException(new StringBuilder(
<Line#138> "ViewFs: Cannot initialize: Empty Mount table in config for ")
<Line#139> .append(theUri.getScheme()).append("://").append(mountTableName)
<Line#140> .append("/").toString());
<Line#141> }
<Line#142> rootFallbackLink = new INodeLink<T>(mountTableName, ugi,
<Line#143> initAndGetTargetFs(), theUri.toString());
<Line#144> getRootDir().addFallbackLink(rootFallbackLink);
<Line#145> }
<Line#146> }

Relevant Logging Patterns:
Example 1:
File: hcommon__createRawDecoderWithFallback-193__.json
Code:
<Line#1>{
<Line#2>  String[] coders=getRawCoderNames(conf,codecName);
<Line#3>  for (  String rawCoderName : coders) {
<Line#4>    try {
<Line#5>      if (rawCoderName != null) {
<Line#6>        RawErasureCoderFactory fact=createRawCoderFactory(rawCoderName,codecName);
<Line#7>        return fact.createDecoder(coderOptions);
<Line#8>      }
<Line#9>    }
<Line#10> catch (    LinkageError|Exception e) {
<Line#11>      if (LOG.isDebugEnabled()) {
<Line#12>        LOG.debug("Failed to create raw erasure decoder " + rawCoderName + ", fallback to next codec if possible",e);
<Line#13>      }
<Line#14>    }
<Line#15>  }
<Line#16>  throw new IllegalArgumentException("Fail to create raw erasure " + "decoder with given codec: " + codecName);
<Line#17>}
Log: <Line#12>:# LOG.debug("Failed to create raw erasure decoder " + rawCoderName + ", fallback to next codec if possible",e):#

Example 2:
File: hcommon__logUserInfo-1920__.json
Code:
<Line#1>{
<Line#2>  if (log.isDebugEnabled()) {
<Line#3>    log.debug(caption + " UGI: " + ugi);
<Line#4>    for (    Token<?> token : ugi.getTokens()) {
<Line#5>      log.debug("+token:" + token);
<Line#6>    }
<Line#7>  }
<Line#8>}
Log: <Line#3>:# log.debug(caption + " UGI: " + ugi):#

Example 3:
File: hcommon__logUserInfo-1920__.json
Code:
<Line#1>{
<Line#2>  if (log.isDebugEnabled()) {
<Line#3>    log.debug(caption + " UGI: " + ugi);
<Line#4>    for (    Token<?> token : ugi.getTokens()) {
<Line#5>      log.debug("+token:" + token);
<Line#6>    }
<Line#7>  }
<Line#8>}
Log: <Line#5>:# log.debug("+token:" + token):#

Example 4:
File: hcommon__runParallel-375__.json
Code:
<Line#1>{
<Line#2>  final Queue<I> succeeded=new ConcurrentLinkedQueue<>();
<Line#3>  final Queue<Exception> exceptions=new ConcurrentLinkedQueue<>();
<Line#4>  final AtomicBoolean taskFailed=new AtomicBoolean(false);
<Line#5>  final AtomicBoolean abortFailed=new AtomicBoolean(false);
<Line#6>  final AtomicBoolean revertFailed=new AtomicBoolean(false);
<Line#7>  List<Future<?>> futures=new ArrayList<>();
<Line#8>  ioStatisticsContext=IOStatisticsContext.getCurrentIOStatisticsContext();
<Line#9>  IOException iteratorIOE=null;
<Line#10>  final RemoteIterator<I> iterator=this.items;
<Line#11>  try {
<Line#12>    while (iterator.hasNext()) {
<Line#13>      final I item=iterator.next();
<Line#14>      futures.add(service.submit(() -> {
<Line#15>        setStatisticsContext();
<Line#16>        try {
<Line#17>          if (!(stopOnFailure && taskFailed.get())) {
<Line#18>            boolean threw=true;
<Line#19>            try {
<Line#20>              LOG.debug("Executing task");
<Line#21>              task.run(item);
<Line#22>              succeeded.add(item);
<Line#23>              LOG.debug("Task succeeded");
<Line#24>              threw=false;
<Line#25>            }
<Line#26> catch (            Exception e) {
<Line#27>              taskFailed.set(true);
<Line#28>              exceptions.add(e);
<Line#29>              LOG.info("Task failed {}",e.toString());
<Line#30>              LOG.debug("Task failed",e);
<Line#31>              if (onFailure != null) {
<Line#32>                try {
<Line#33>                  onFailure.run(item,e);
<Line#34>                }
<Line#35> catch (                Exception failException) {
<Line#36>                  LOG.warn("Failed to clean up on failure",e);
<Line#37>                }
<Line#38>              }
<Line#39>            }
<Line#40> finally {
<Line#41>              if (threw) {
<Line#42>                taskFailed.set(true);
<Line#43>              }
<Line#44>            }
<Line#45>          }
<Line#46> else           if (abortTask != null) {
<Line#47>            if (stopAbortsOnFailure && abortFailed.get()) {
<Line#48>              return;
<Line#49>            }
<Line#50>            boolean failed=true;
<Line#51>            try {
<Line#52>              LOG.info("Aborting task");
<Line#53>              abortTask.run(item);
<Line#54>              failed=false;
<Line#55>            }
<Line#56> catch (            Exception e) {
<Line#57>              LOG.error("Failed to abort task",e);
<Line#58>            }
<Line#59> finally {
<Line#60>              if (failed) {
<Line#61>                abortFailed.set(true);
<Line#62>              }
<Line#63>            }
<Line#64>          }
<Line#65>        }
<Line#66>  finally {
<Line#67>          resetStatisticsContext();
<Line#68>        }
<Line#69>      }
<Line#70>));
<Line#71>    }
<Line#72>  }
<Line#73> catch (  IOException e) {
<Line#74>    LOG.debug("IOException when iterating through {}",iterator,e);
<Line#75>    iteratorIOE=e;
<Line#76>    taskFailed.set(true);
<Line#77>  }
<Line#78>  waitFor(futures,sleepInterval);
<Line#79>  int futureCount=futures.size();
<Line#80>  futures.clear();
<Line#81>  if (taskFailed.get() && revertTask != null) {
<Line#82>    LOG.info("Reverting all {} succeeded tasks from {} futures",succeeded.size(),futureCount);
<Line#83>    for (    final I item : succeeded) {
<Line#84>      futures.add(service.submit(() -> {
<Line#85>        if (stopRevertsOnFailure && revertFailed.get()) {
<Line#86>          return;
<Line#87>        }
<Line#88>        boolean failed=true;
<Line#89>        setStatisticsContext();
<Line#90>        try {
<Line#91>          revertTask.run(item);
<Line#92>          failed=false;
<Line#93>        }
<Line#94> catch (        Exception e) {
<Line#95>          LOG.error("Failed to revert task",e);
<Line#96>        }
<Line#97> finally {
<Line#98>          if (failed) {
<Line#99>            revertFailed.set(true);
<Line#100>          }
<Line#101>          resetStatisticsContext();
<Line#102>        }
<Line#103>      }
<Line#104>));
<Line#105>    }
<Line#106>    waitFor(futures,sleepInterval);
<Line#107>  }
<Line#108>  if (!suppressExceptions && !exceptions.isEmpty()) {
<Line#109>    TaskPool.<E>throwOne(exceptions);
<Line#110>  }
<Line#111>  if (iteratorIOE != null) {
<Line#112>    throw iteratorIOE;
<Line#113>  }
<Line#114>  return !taskFailed.get();
<Line#115>}
Log: <Line#20>:# LOG.debug("Executing task"):#

Example 5:
File: hcommon__runParallel-375__.json
Code:
<Line#1>{
<Line#2>  final Queue<I> succeeded=new ConcurrentLinkedQueue<>();
<Line#3>  final Queue<Exception> exceptions=new ConcurrentLinkedQueue<>();
<Line#4>  final AtomicBoolean taskFailed=new AtomicBoolean(false);
<Line#5>  final AtomicBoolean abortFailed=new AtomicBoolean(false);
<Line#6>  final AtomicBoolean revertFailed=new AtomicBoolean(false);
<Line#7>  List<Future<?>> futures=new ArrayList<>();
<Line#8>  ioStatisticsContext=IOStatisticsContext.getCurrentIOStatisticsContext();
<Line#9>  IOException iteratorIOE=null;
<Line#10>  final RemoteIterator<I> iterator=this.items;
<Line#11>  try {
<Line#12>    while (iterator.hasNext()) {
<Line#13>      final I item=iterator.next();
<Line#14>      futures.add(service.submit(() -> {
<Line#15>        setStatisticsContext();
<Line#16>        try {
<Line#17>          if (!(stopOnFailure && taskFailed.get())) {
<Line#18>            boolean threw=true;
<Line#19>            try {
<Line#20>              LOG.debug("Executing task");
<Line#21>              task.run(item);
<Line#22>              succeeded.add(item);
<Line#23>              LOG.debug("Task succeeded");
<Line#24>              threw=false;
<Line#25>            }
<Line#26> catch (            Exception e) {
<Line#27>              taskFailed.set(true);
<Line#28>              exceptions.add(e);
<Line#29>              LOG.info("Task failed {}",e.toString());
<Line#30>              LOG.debug("Task failed",e);
<Line#31>              if (onFailure != null) {
<Line#32>                try {
<Line#33>                  onFailure.run(item,e);
<Line#34>                }
<Line#35> catch (                Exception failException) {
<Line#36>                  LOG.warn("Failed to clean up on failure",e);
<Line#37>                }
<Line#38>              }
<Line#39>            }
<Line#40> finally {
<Line#41>              if (threw) {
<Line#42>                taskFailed.set(true);
<Line#43>              }
<Line#44>            }
<Line#45>          }
<Line#46> else           if (abortTask != null) {
<Line#47>            if (stopAbortsOnFailure && abortFailed.get()) {
<Line#48>              return;
<Line#49>            }
<Line#50>            boolean failed=true;
<Line#51>            try {
<Line#52>              LOG.info("Aborting task");
<Line#53>              abortTask.run(item);
<Line#54>              failed=false;
<Line#55>            }
<Line#56> catch (            Exception e) {
<Line#57>              LOG.error("Failed to abort task",e);
<Line#58>            }
<Line#59> finally {
<Line#60>              if (failed) {
<Line#61>                abortFailed.set(true);
<Line#62>              }
<Line#63>            }
<Line#64>          }
<Line#65>        }
<Line#66>  finally {
<Line#67>          resetStatisticsContext();
<Line#68>        }
<Line#69>      }
<Line#70>));
<Line#71>    }
<Line#72>  }
<Line#73> catch (  IOException e) {
<Line#74>    LOG.debug("IOException when iterating through {}",iterator,e);
<Line#75>    iteratorIOE=e;
<Line#76>    taskFailed.set(true);
<Line#77>  }
<Line#78>  waitFor(futures,sleepInterval);
<Line#79>  int futureCount=futures.size();
<Line#80>  futures.clear();
<Line#81>  if (taskFailed.get() && revertTask != null) {
<Line#82>    LOG.info("Reverting all {} succeeded tasks from {} futures",succeeded.size(),futureCount);
<Line#83>    for (    final I item : succeeded) {
<Line#84>      futures.add(service.submit(() -> {
<Line#85>        if (stopRevertsOnFailure && revertFailed.get()) {
<Line#86>          return;
<Line#87>        }
<Line#88>        boolean failed=true;
<Line#89>        setStatisticsContext();
<Line#90>        try {
<Line#91>          revertTask.run(item);
<Line#92>          failed=false;
<Line#93>        }
<Line#94> catch (        Exception e) {
<Line#95>          LOG.error("Failed to revert task",e);
<Line#96>        }
<Line#97> finally {
<Line#98>          if (failed) {
<Line#99>            revertFailed.set(true);
<Line#100>          }
<Line#101>          resetStatisticsContext();
<Line#102>        }
<Line#103>      }
<Line#104>));
<Line#105>    }
<Line#106>    waitFor(futures,sleepInterval);
<Line#107>  }
<Line#108>  if (!suppressExceptions && !exceptions.isEmpty()) {
<Line#109>    TaskPool.<E>throwOne(exceptions);
<Line#110>  }
<Line#111>  if (iteratorIOE != null) {
<Line#112>    throw iteratorIOE;
<Line#113>  }
<Line#114>  return !taskFailed.get();
<Line#115>}
Log: <Line#23>:# LOG.debug("Task succeeded"):#
