/** 
 * Checks for the presence of the property <code>name</code> in the deprecation map. Returns the first of the list of new keys if present in the deprecation map or the <code>name</code> itself. If the property is not presently set but the property map contains an entry for the deprecated key, the value of the deprecated key is set as the value for the provided property name. Also updates properties and overlays with deprecated keys, if the new key does not already exist.
 * @param deprecations deprecation context
 * @param name the property name
 * @return the first property in the list of properties mappingthe <code>name</code> or the <code>name</code> itself.
 */
private String[] handleDeprecation(DeprecationContext deprecations,String name){
  if (null != name) {
    name=name.trim();
  }
  String[] names=new String[]{name};
  DeprecatedKeyInfo keyInfo=deprecations.getDeprecatedKeyMap().get(name);
  if (keyInfo != null) {
    if (!keyInfo.getAndSetAccessed()) {
      logDeprecation(keyInfo.getWarningMessage(name));
    }
    names=keyInfo.newKeys;
  }
  updatePropertiesWithDeprecatedKeys(deprecations,names);
  Properties overlayProperties=getOverlay();
  if (overlayProperties.isEmpty()) {
    return names;
  }
  for (  String n : names) {
    String deprecatedKey=deprecations.getReverseDeprecatedKeyMap().get(n);
    if (deprecatedKey != null && !overlayProperties.containsKey(n)) {
      String deprecatedValue=overlayProperties.getProperty(deprecatedKey);
      if (deprecatedValue != null) {
        getProps().setProperty(n,deprecatedValue);
        overlayProperties.setProperty(n,deprecatedValue);
      }
    }
  }
  return names;
}
