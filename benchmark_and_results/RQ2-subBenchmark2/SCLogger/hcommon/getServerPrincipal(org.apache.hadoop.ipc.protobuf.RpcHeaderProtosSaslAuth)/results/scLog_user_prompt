Insert a logging statement to the following code using <API>. Format: <Line#X>:# <Statement>:#

Target Code:
<Line#0> String getServerPrincipal(SaslAuth authType) throws IOException {
<Line#1> KerberosInfo krbInfo = SecurityUtil.getKerberosInfo(protocol, conf);
<Line#2> LOG.debug("Get kerberos info proto:" + protocol + " info:" + krbInfo);
<Line#3> if (krbInfo == null) { // protocol has no support for kerberos
<Line#4> return null;
<Line#5> }
<Line#6> String serverKey = krbInfo.serverPrincipal();
<Line#7> if (serverKey == null) {
<Line#8> throw new IllegalArgumentException(
<Line#9> "Can't obtain server Kerberos config key from protocol="
<Line#10> + protocol.getCanonicalName());
<Line#11> }
<Line#12> // construct server advertised principal for comparision
<Line#13> String serverPrincipal = new KerberosPrincipal(
<Line#14> authType.getProtocol() + "/" + authType.getServerId(),
<Line#15> KerberosPrincipal.KRB_NT_SRV_HST).getName();
<Line#16> 
<Line#17> // use the pattern if defined
<Line#18> String serverKeyPattern = conf.get(serverKey + ".pattern");
<Line#19> if (serverKeyPattern != null && !serverKeyPattern.isEmpty()) {
<Line#20> Pattern pattern = GlobPattern.compile(serverKeyPattern);
<Line#21> if (!pattern.matcher(serverPrincipal).matches()) {
<Line#22> throw new IllegalArgumentException(String.format(
<Line#23> "Server has invalid Kerberos principal: %s,"
<Line#24> + " doesn't match the pattern: %s",
<Line#25> serverPrincipal, serverKeyPattern));
<Line#26> }
<Line#27> } else {
<Line#28> // check that the server advertised principal matches our conf
<Line#29> String confPrincipal = SecurityUtil.getServerPrincipal(
<Line#30> conf.get(serverKey), serverAddr.getAddress());
<Line#31> }
<Line#32> if (confPrincipal == null || confPrincipal.isEmpty()) {
<Line#33> throw new IllegalArgumentException(
<Line#34> "Failed to specify server's Kerberos principal name");
<Line#35> }
<Line#36> KerberosName name = new KerberosName(confPrincipal);
<Line#37> if (name.getHostName() == null) {
<Line#38> throw new IllegalArgumentException(
<Line#39> "Kerberos principal name does NOT have the expected hostname part: "
<Line#40> + confPrincipal);
<Line#41> }
<Line#42> if (!serverPrincipal.equals(confPrincipal)) {
<Line#43> throw new IllegalArgumentException(String.format(
<Line#44> "Server has invalid Kerberos principal: %s, expecting: %s",
<Line#45> serverPrincipal, confPrincipal));
<Line#46> }
<Line#47> }
<Line#48> return serverPrincipal;
<Line#49> }

Related Context:
Method A:
<Line#0> /** 
<Line#1>  * Get the value of the <code>name</code> property, <code>null</code> if no such property exists. If the key is deprecated, it returns the value of the first key which replaces the deprecated key and is not null. Values are processed for <a href="#VariableExpansion">variable expansion</a>  before being returned. As a side effect get loads the properties from the sources if called for the first time as a lazy init.
<Line#2>  * @param name the property name, will be trimmed before get value.
<Line#3>  * @return the value of the <code>name</code> or its replacing property, or null if no such property exists.
<Line#4>  */
<Line#5> public String get(String name){
<Line#6>   String[] names=handleDeprecation(deprecationContext.get(),name);
<Line#7>   String result=null;
<Line#8>   for (  String n : names) {
<Line#9>     result=substituteVars(getProps().getProperty(n));
<Line#10>   }
<Line#11>   return result;
<Line#12> }
<Line#13> 
Method B:
<Line#0> /** 
<Line#1>  * Checks for the presence of the property <code>name</code> in the deprecation map. Returns the first of the list of new keys if present in the deprecation map or the <code>name</code> itself. If the property is not presently set but the property map contains an entry for the deprecated key, the value of the deprecated key is set as the value for the provided property name. Also updates properties and overlays with deprecated keys, if the new key does not already exist.
<Line#2>  * @param deprecations deprecation context
<Line#3>  * @param name the property name
<Line#4>  * @return the first property in the list of properties mappingthe <code>name</code> or the <code>name</code> itself.
<Line#5>  */
<Line#6> private String[] handleDeprecation(DeprecationContext deprecations,String name){
<Line#7>   if (null != name) {
<Line#8>     name=name.trim();
<Line#9>   }
<Line#10>   String[] names=new String[]{name};
<Line#11>   DeprecatedKeyInfo keyInfo=deprecations.getDeprecatedKeyMap().get(name);
<Line#12>   if (keyInfo != null) {
<Line#13>     if (!keyInfo.getAndSetAccessed()) {
<Line#14>       logDeprecation(keyInfo.getWarningMessage(name));
<Line#15>     }
<Line#16>     names=keyInfo.newKeys;
<Line#17>   }
<Line#18>   updatePropertiesWithDeprecatedKeys(deprecations,names);
<Line#19>   Properties overlayProperties=getOverlay();
<Line#20>   if (overlayProperties.isEmpty()) {
<Line#21>     return names;
<Line#22>   }
<Line#23>   for (  String n : names) {
<Line#24>     String deprecatedKey=deprecations.getReverseDeprecatedKeyMap().get(n);
<Line#25>     if (deprecatedKey != null && !overlayProperties.containsKey(n)) {
<Line#26>       String deprecatedValue=overlayProperties.getProperty(deprecatedKey);
<Line#27>       if (deprecatedValue != null) {
<Line#28>         getProps().setProperty(n,deprecatedValue);
<Line#29>         overlayProperties.setProperty(n,deprecatedValue);
<Line#30>       }
<Line#31>     }
<Line#32>   }
<Line#33>   return names;
<Line#34> }
<Line#35> 

Relevant Logging Patterns:
Example 1:
File: hcommon__createRawDecoderWithFallback-193__.json
Code:
<Line#1>{
<Line#2>  String[] coders=getRawCoderNames(conf,codecName);
<Line#3>  for (  String rawCoderName : coders) {
<Line#4>    try {
<Line#5>      if (rawCoderName != null) {
<Line#6>        RawErasureCoderFactory fact=createRawCoderFactory(rawCoderName,codecName);
<Line#7>        return fact.createDecoder(coderOptions);
<Line#8>      }
<Line#9>    }
<Line#10> catch (    LinkageError|Exception e) {
<Line#11>      if (LOG.isDebugEnabled()) {
<Line#12>        LOG.debug("Failed to create raw erasure decoder " + rawCoderName + ", fallback to next codec if possible",e);
<Line#13>      }
<Line#14>    }
<Line#15>  }
<Line#16>  throw new IllegalArgumentException("Fail to create raw erasure " + "decoder with given codec: " + codecName);
<Line#17>}
Log: <Line#12>:# LOG.debug("Failed to create raw erasure decoder " + rawCoderName + ", fallback to next codec if possible",e):#

Example 2:
File: hcommon__logUserInfo-1920__.json
Code:
<Line#1>{
<Line#2>  if (log.isDebugEnabled()) {
<Line#3>    log.debug(caption + " UGI: " + ugi);
<Line#4>    for (    Token<?> token : ugi.getTokens()) {
<Line#5>      log.debug("+token:" + token);
<Line#6>    }
<Line#7>  }
<Line#8>}
Log: <Line#3>:# log.debug(caption + " UGI: " + ugi):#

Example 3:
File: hcommon__logUserInfo-1920__.json
Code:
<Line#1>{
<Line#2>  if (log.isDebugEnabled()) {
<Line#3>    log.debug(caption + " UGI: " + ugi);
<Line#4>    for (    Token<?> token : ugi.getTokens()) {
<Line#5>      log.debug("+token:" + token);
<Line#6>    }
<Line#7>  }
<Line#8>}
Log: <Line#5>:# log.debug("+token:" + token):#

Example 4:
File: hcommon__runParallel-375__.json
Code:
<Line#1>{
<Line#2>  final Queue<I> succeeded=new ConcurrentLinkedQueue<>();
<Line#3>  final Queue<Exception> exceptions=new ConcurrentLinkedQueue<>();
<Line#4>  final AtomicBoolean taskFailed=new AtomicBoolean(false);
<Line#5>  final AtomicBoolean abortFailed=new AtomicBoolean(false);
<Line#6>  final AtomicBoolean revertFailed=new AtomicBoolean(false);
<Line#7>  List<Future<?>> futures=new ArrayList<>();
<Line#8>  ioStatisticsContext=IOStatisticsContext.getCurrentIOStatisticsContext();
<Line#9>  IOException iteratorIOE=null;
<Line#10>  final RemoteIterator<I> iterator=this.items;
<Line#11>  try {
<Line#12>    while (iterator.hasNext()) {
<Line#13>      final I item=iterator.next();
<Line#14>      futures.add(service.submit(() -> {
<Line#15>        setStatisticsContext();
<Line#16>        try {
<Line#17>          if (!(stopOnFailure && taskFailed.get())) {
<Line#18>            boolean threw=true;
<Line#19>            try {
<Line#20>              LOG.debug("Executing task");
<Line#21>              task.run(item);
<Line#22>              succeeded.add(item);
<Line#23>              LOG.debug("Task succeeded");
<Line#24>              threw=false;
<Line#25>            }
<Line#26> catch (            Exception e) {
<Line#27>              taskFailed.set(true);
<Line#28>              exceptions.add(e);
<Line#29>              LOG.info("Task failed {}",e.toString());
<Line#30>              LOG.debug("Task failed",e);
<Line#31>              if (onFailure != null) {
<Line#32>                try {
<Line#33>                  onFailure.run(item,e);
<Line#34>                }
<Line#35> catch (                Exception failException) {
<Line#36>                  LOG.warn("Failed to clean up on failure",e);
<Line#37>                }
<Line#38>              }
<Line#39>            }
<Line#40> finally {
<Line#41>              if (threw) {
<Line#42>                taskFailed.set(true);
<Line#43>              }
<Line#44>            }
<Line#45>          }
<Line#46> else           if (abortTask != null) {
<Line#47>            if (stopAbortsOnFailure && abortFailed.get()) {
<Line#48>              return;
<Line#49>            }
<Line#50>            boolean failed=true;
<Line#51>            try {
<Line#52>              LOG.info("Aborting task");
<Line#53>              abortTask.run(item);
<Line#54>              failed=false;
<Line#55>            }
<Line#56> catch (            Exception e) {
<Line#57>              LOG.error("Failed to abort task",e);
<Line#58>            }
<Line#59> finally {
<Line#60>              if (failed) {
<Line#61>                abortFailed.set(true);
<Line#62>              }
<Line#63>            }
<Line#64>          }
<Line#65>        }
<Line#66>  finally {
<Line#67>          resetStatisticsContext();
<Line#68>        }
<Line#69>      }
<Line#70>));
<Line#71>    }
<Line#72>  }
<Line#73> catch (  IOException e) {
<Line#74>    LOG.debug("IOException when iterating through {}",iterator,e);
<Line#75>    iteratorIOE=e;
<Line#76>    taskFailed.set(true);
<Line#77>  }
<Line#78>  waitFor(futures,sleepInterval);
<Line#79>  int futureCount=futures.size();
<Line#80>  futures.clear();
<Line#81>  if (taskFailed.get() && revertTask != null) {
<Line#82>    LOG.info("Reverting all {} succeeded tasks from {} futures",succeeded.size(),futureCount);
<Line#83>    for (    final I item : succeeded) {
<Line#84>      futures.add(service.submit(() -> {
<Line#85>        if (stopRevertsOnFailure && revertFailed.get()) {
<Line#86>          return;
<Line#87>        }
<Line#88>        boolean failed=true;
<Line#89>        setStatisticsContext();
<Line#90>        try {
<Line#91>          revertTask.run(item);
<Line#92>          failed=false;
<Line#93>        }
<Line#94> catch (        Exception e) {
<Line#95>          LOG.error("Failed to revert task",e);
<Line#96>        }
<Line#97> finally {
<Line#98>          if (failed) {
<Line#99>            revertFailed.set(true);
<Line#100>          }
<Line#101>          resetStatisticsContext();
<Line#102>        }
<Line#103>      }
<Line#104>));
<Line#105>    }
<Line#106>    waitFor(futures,sleepInterval);
<Line#107>  }
<Line#108>  if (!suppressExceptions && !exceptions.isEmpty()) {
<Line#109>    TaskPool.<E>throwOne(exceptions);
<Line#110>  }
<Line#111>  if (iteratorIOE != null) {
<Line#112>    throw iteratorIOE;
<Line#113>  }
<Line#114>  return !taskFailed.get();
<Line#115>}
Log: <Line#20>:# LOG.debug("Executing task"):#

Example 5:
File: hcommon__runParallel-375__.json
Code:
<Line#1>{
<Line#2>  final Queue<I> succeeded=new ConcurrentLinkedQueue<>();
<Line#3>  final Queue<Exception> exceptions=new ConcurrentLinkedQueue<>();
<Line#4>  final AtomicBoolean taskFailed=new AtomicBoolean(false);
<Line#5>  final AtomicBoolean abortFailed=new AtomicBoolean(false);
<Line#6>  final AtomicBoolean revertFailed=new AtomicBoolean(false);
<Line#7>  List<Future<?>> futures=new ArrayList<>();
<Line#8>  ioStatisticsContext=IOStatisticsContext.getCurrentIOStatisticsContext();
<Line#9>  IOException iteratorIOE=null;
<Line#10>  final RemoteIterator<I> iterator=this.items;
<Line#11>  try {
<Line#12>    while (iterator.hasNext()) {
<Line#13>      final I item=iterator.next();
<Line#14>      futures.add(service.submit(() -> {
<Line#15>        setStatisticsContext();
<Line#16>        try {
<Line#17>          if (!(stopOnFailure && taskFailed.get())) {
<Line#18>            boolean threw=true;
<Line#19>            try {
<Line#20>              LOG.debug("Executing task");
<Line#21>              task.run(item);
<Line#22>              succeeded.add(item);
<Line#23>              LOG.debug("Task succeeded");
<Line#24>              threw=false;
<Line#25>            }
<Line#26> catch (            Exception e) {
<Line#27>              taskFailed.set(true);
<Line#28>              exceptions.add(e);
<Line#29>              LOG.info("Task failed {}",e.toString());
<Line#30>              LOG.debug("Task failed",e);
<Line#31>              if (onFailure != null) {
<Line#32>                try {
<Line#33>                  onFailure.run(item,e);
<Line#34>                }
<Line#35> catch (                Exception failException) {
<Line#36>                  LOG.warn("Failed to clean up on failure",e);
<Line#37>                }
<Line#38>              }
<Line#39>            }
<Line#40> finally {
<Line#41>              if (threw) {
<Line#42>                taskFailed.set(true);
<Line#43>              }
<Line#44>            }
<Line#45>          }
<Line#46> else           if (abortTask != null) {
<Line#47>            if (stopAbortsOnFailure && abortFailed.get()) {
<Line#48>              return;
<Line#49>            }
<Line#50>            boolean failed=true;
<Line#51>            try {
<Line#52>              LOG.info("Aborting task");
<Line#53>              abortTask.run(item);
<Line#54>              failed=false;
<Line#55>            }
<Line#56> catch (            Exception e) {
<Line#57>              LOG.error("Failed to abort task",e);
<Line#58>            }
<Line#59> finally {
<Line#60>              if (failed) {
<Line#61>                abortFailed.set(true);
<Line#62>              }
<Line#63>            }
<Line#64>          }
<Line#65>        }
<Line#66>  finally {
<Line#67>          resetStatisticsContext();
<Line#68>        }
<Line#69>      }
<Line#70>));
<Line#71>    }
<Line#72>  }
<Line#73> catch (  IOException e) {
<Line#74>    LOG.debug("IOException when iterating through {}",iterator,e);
<Line#75>    iteratorIOE=e;
<Line#76>    taskFailed.set(true);
<Line#77>  }
<Line#78>  waitFor(futures,sleepInterval);
<Line#79>  int futureCount=futures.size();
<Line#80>  futures.clear();
<Line#81>  if (taskFailed.get() && revertTask != null) {
<Line#82>    LOG.info("Reverting all {} succeeded tasks from {} futures",succeeded.size(),futureCount);
<Line#83>    for (    final I item : succeeded) {
<Line#84>      futures.add(service.submit(() -> {
<Line#85>        if (stopRevertsOnFailure && revertFailed.get()) {
<Line#86>          return;
<Line#87>        }
<Line#88>        boolean failed=true;
<Line#89>        setStatisticsContext();
<Line#90>        try {
<Line#91>          revertTask.run(item);
<Line#92>          failed=false;
<Line#93>        }
<Line#94> catch (        Exception e) {
<Line#95>          LOG.error("Failed to revert task",e);
<Line#96>        }
<Line#97> finally {
<Line#98>          if (failed) {
<Line#99>            revertFailed.set(true);
<Line#100>          }
<Line#101>          resetStatisticsContext();
<Line#102>        }
<Line#103>      }
<Line#104>));
<Line#105>    }
<Line#106>    waitFor(futures,sleepInterval);
<Line#107>  }
<Line#108>  if (!suppressExceptions && !exceptions.isEmpty()) {
<Line#109>    TaskPool.<E>throwOne(exceptions);
<Line#110>  }
<Line#111>  if (iteratorIOE != null) {
<Line#112>    throw iteratorIOE;
<Line#113>  }
<Line#114>  return !taskFailed.get();
<Line#115>}
Log: <Line#23>:# LOG.debug("Task succeeded"):#
