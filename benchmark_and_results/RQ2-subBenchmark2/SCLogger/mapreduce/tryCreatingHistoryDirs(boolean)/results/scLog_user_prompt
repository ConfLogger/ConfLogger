Insert a logging statement to the following code using <API>. Format: <Line#X>:# <Statement>:#

Target Code:
<Line#0> boolean tryCreatingHistoryDirs(boolean logWait) throws IOException {
<Line#1> boolean succeeded = true;
<Line#2> String doneDirPrefix = JobHistoryUtils.
<Line#3> getConfiguredHistoryServerDoneDirPrefix(conf);
<Line#4> try {
<Line#5> doneDirPrefixPath = FileContext.getFileContext(conf).makeQualified(
<Line#6> new Path(doneDirPrefix));
<Line#7> doneDirFc = FileContext.getFileContext(doneDirPrefixPath.toUri(), conf);
<Line#8> doneDirFc.setUMask(JobHistoryUtils.HISTORY_DONE_DIR_UMASK);
<Line#9> mkdir(doneDirFc, doneDirPrefixPath, new FsPermission(
<Line#10> JobHistoryUtils.HISTORY_DONE_DIR_PERMISSION));
<Line#11> } catch (ConnectException ex) {
<Line#12> if (logWait) {
<Line#13> ;
<Line#14> }
<Line#15> succeeded = false;
<Line#16> } catch (IOException e) {
<Line#17> if (isNameNodeStillNotStarted(e)) {
<Line#18> succeeded = false;
<Line#19> if (logWait) {
<Line#20> LOG.info("Waiting for FileSystem at " +
<Line#21> doneDirPrefixPath.toUri().getAuthority() +
<Line#22> "to be out of safe mode");
<Line#23> }
<Line#24> } else {
<Line#25> throw new YarnRuntimeException("Error creating done directory: ["
<Line#26> + doneDirPrefixPath + "]", e);
<Line#27> }
<Line#28> }
<Line#29> if (succeeded) {
<Line#30> String intermediateDoneDirPrefix = JobHistoryUtils.
<Line#31> getConfiguredHistoryIntermediateDoneDirPrefix(conf);
<Line#32> try {
<Line#33> intermediateDoneDirPath = FileContext.getFileContext(conf).makeQualified(
<Line#34> new Path(intermediateDoneDirPrefix));
<Line#35> intermediateDoneDirFc = FileContext.getFileContext(
<Line#36> intermediateDoneDirPath.toUri(), conf);
<Line#37> mkdir(intermediateDoneDirFc, intermediateDoneDirPath, new FsPermission(
<Line#38> JobHistoryUtils.HISTORY_INTERMEDIATE_DONE_DIR_PERMISSIONS.toShort()));
<Line#39> } catch (ConnectException ex) {
<Line#40> succeeded = false;
<Line#41> if (logWait) {
<Line#42> LOG.info("Waiting for FileSystem at " +
<Line#43> intermediateDoneDirPath.toUri().getAuthority() +
<Line#44> "to be available");
<Line#45> }
<Line#46> } catch (IOException e) {
<Line#47> if (isNameNodeStillNotStarted(e)) {
<Line#48> succeeded = false;
<Line#49> if (logWait) {
<Line#50> LOG.info("Waiting for FileSystem at " +
<Line#51> intermediateDoneDirPath.toUri().getAuthority() +
<Line#52> "to be out of safe mode");
<Line#53> }
<Line#54> } else {
<Line#55> throw new YarnRuntimeException(
<Line#56> "Error creating intermediate done directory: ["
<Line#57> + intermediateDoneDirPath + "]", e);
<Line#58> }
<Line#59> }
<Line#60> }
<Line#61> return succeeded;
<Line#62> }

Related Context:
Method A:
<Line#0> /** 
<Line#1>  * Gets the configured directory prefix for intermediate done history files.
<Line#2>  * @param conf
<Line#3>  * @return A string representation of the prefix.
<Line#4>  */
<Line#5> public static String getConfiguredHistoryIntermediateDoneDirPrefix(Configuration conf){
<Line#6>   String doneDirPrefix=conf.get(JHAdminConfig.MR_HISTORY_INTERMEDIATE_DONE_DIR);
<Line#7>   if (doneDirPrefix == null) {
<Line#8>     doneDirPrefix=conf.get(MRJobConfig.MR_AM_STAGING_DIR,MRJobConfig.DEFAULT_MR_AM_STAGING_DIR) + "/history/done_intermediate";
<Line#9>   }
<Line#10>   return ensurePathInDefaultFileSystem(doneDirPrefix,conf);
<Line#11> }
<Line#12> 
Method B:
<Line#0> /** 
<Line#1>  * Check if the NameNode is still not started yet as indicated by the exception type and message. DistributedFileSystem returns a RemoteException with a message stating SafeModeException in it. So this is only way to check it is because of being in safe mode. In addition, Name Node may have not started yet, in which case, the message contains "NameNode still not started".
<Line#2>  */
<Line#3> private boolean isNameNodeStillNotStarted(Exception ex){
<Line#4>   String nameNodeNotStartedMsg=NameNode.composeNotStartedMessage(HdfsServerConstants.NamenodeRole.NAMENODE);
<Line#5>   return ex.toString().contains("SafeModeException") || (ex instanceof RetriableException && ex.getMessage().contains(nameNodeNotStartedMsg));
<Line#6> }
<Line#7> 

Relevant Logging Patterns:
Example 1:
File: mapreduce__createNativeObject-81__.json
Code:
<Line#1>{
<Line#2>  assertNativeLibraryLoaded();
<Line#3>  final long ret=JNICreateNativeObject(clazz.getBytes(Charsets.UTF_8));
<Line#4>  if (ret == 0) {
<Line#5>    LOG.warn("Can't create NativeObject for class " + clazz + ", probably not exist.");
<Line#6>  }
<Line#7>  return ret;
<Line#8>}
Log: <Line#5>:# LOG.warn("Can't create NativeObject for class " + clazz + ", probably not exist."):#

Example 2:
File: mapreduce__createControlFile-122__.json
Code:
<Line#1>{
<Line#2>  LOG.info("creating control file: " + fileSize + " mega bytes, "+ nrFiles+ " files");
<Line#3>  fs.delete(CONTROL_DIR,true);
<Line#4>  for (int i=0; i < nrFiles; i++) {
<Line#5>    String name=getFileName(i);
<Line#6>    Path controlFile=new Path(CONTROL_DIR,"in_file_" + name);
<Line#7>    SequenceFile.Writer writer=null;
<Line#8>    try {
<Line#9>      writer=SequenceFile.createWriter(fs,fsConfig,controlFile,Text.class,LongWritable.class,CompressionType.NONE);
<Line#10>      writer.append(new Text(name),new LongWritable(fileSize));
<Line#11>    }
<Line#12> catch (    Exception e) {
<Line#13>      throw new IOException(e.getLocalizedMessage());
<Line#14>    }
<Line#15> finally {
<Line#16>      if (writer != null)       writer.close();
<Line#17>      writer=null;
<Line#18>    }
<Line#19>  }
<Line#20>  LOG.info("created control files for: " + nrFiles + " files");
<Line#21>}
Log: <Line#2>:# LOG.info("creating control file: " + fileSize + " mega bytes, "+ nrFiles+ " files"):#

Example 3:
File: mapreduce__createControlFile-122__.json
Code:
<Line#1>{
<Line#2>  LOG.info("creating control file: " + fileSize + " mega bytes, "+ nrFiles+ " files");
<Line#3>  fs.delete(CONTROL_DIR,true);
<Line#4>  for (int i=0; i < nrFiles; i++) {
<Line#5>    String name=getFileName(i);
<Line#6>    Path controlFile=new Path(CONTROL_DIR,"in_file_" + name);
<Line#7>    SequenceFile.Writer writer=null;
<Line#8>    try {
<Line#9>      writer=SequenceFile.createWriter(fs,fsConfig,controlFile,Text.class,LongWritable.class,CompressionType.NONE);
<Line#10>      writer.append(new Text(name),new LongWritable(fileSize));
<Line#11>    }
<Line#12> catch (    Exception e) {
<Line#13>      throw new IOException(e.getLocalizedMessage());
<Line#14>    }
<Line#15> finally {
<Line#16>      if (writer != null)       writer.close();
<Line#17>      writer=null;
<Line#18>    }
<Line#19>  }
<Line#20>  LOG.info("created control files for: " + nrFiles + " files");
<Line#21>}
Log: <Line#20>:# LOG.info("created control files for: " + nrFiles + " files"):#

Example 4:
File: mapreduce__addMap-1106__.json
Code:
<Line#1>{
<Line#2>  ContainerRequest request=null;
<Line#3>  if (event.getEarlierAttemptFailed()) {
<Line#4>    earlierFailedMaps.add(event.getAttemptID());
<Line#5>    request=new ContainerRequest(event,PRIORITY_FAST_FAIL_MAP,mapNodeLabelExpression);
<Line#6>    LOG.info("Added " + event.getAttemptID() + " to list of failed maps");
<Line#7>    maps.put(event.getAttemptID(),request);
<Line#8>    addContainerReq(request);
<Line#9>  }
<Line#10> else {
<Line#11>    if (mapsMod100 < numOpportunisticMapsPercent) {
<Line#12>      request=new ContainerRequest(event,PRIORITY_OPPORTUNISTIC_MAP,mapNodeLabelExpression);
<Line#13>      maps.put(event.getAttemptID(),request);
<Line#14>      addOpportunisticResourceRequest(request.priority,request.capability);
<Line#15>    }
<Line#16> else {
<Line#17>      request=new ContainerRequest(event,PRIORITY_MAP,mapNodeLabelExpression);
<Line#18>      for (      String host : event.getHosts()) {
<Line#19>        LinkedList<TaskAttemptId> list=mapsHostMapping.get(host);
<Line#20>        if (list == null) {
<Line#21>          list=new LinkedList<TaskAttemptId>();
<Line#22>          mapsHostMapping.put(host,list);
<Line#23>        }
<Line#24>        list.add(event.getAttemptID());
<Line#25>        if (LOG.isDebugEnabled()) {
<Line#26>          LOG.debug("Added attempt req to host " + host);
<Line#27>        }
<Line#28>      }
<Line#29>      for (      String rack : event.getRacks()) {
<Line#30>        LinkedList<TaskAttemptId> list=mapsRackMapping.get(rack);
<Line#31>        if (list == null) {
<Line#32>          list=new LinkedList<TaskAttemptId>();
<Line#33>          mapsRackMapping.put(rack,list);
<Line#34>        }
<Line#35>        list.add(event.getAttemptID());
<Line#36>        if (LOG.isDebugEnabled()) {
<Line#37>          LOG.debug("Added attempt req to rack " + rack);
<Line#38>        }
<Line#39>      }
<Line#40>      maps.put(event.getAttemptID(),request);
<Line#41>      addContainerReq(request);
<Line#42>    }
<Line#43>    mapsMod100++;
<Line#44>    mapsMod100%=100;
<Line#45>  }
<Line#46>}
Log: <Line#6>:# LOG.info("Added " + event.getAttemptID() + " to list of failed maps"):#

Example 5:
File: mapreduce__addMap-1106__.json
Code:
<Line#1>{
<Line#2>  ContainerRequest request=null;
<Line#3>  if (event.getEarlierAttemptFailed()) {
<Line#4>    earlierFailedMaps.add(event.getAttemptID());
<Line#5>    request=new ContainerRequest(event,PRIORITY_FAST_FAIL_MAP,mapNodeLabelExpression);
<Line#6>    LOG.info("Added " + event.getAttemptID() + " to list of failed maps");
<Line#7>    maps.put(event.getAttemptID(),request);
<Line#8>    addContainerReq(request);
<Line#9>  }
<Line#10> else {
<Line#11>    if (mapsMod100 < numOpportunisticMapsPercent) {
<Line#12>      request=new ContainerRequest(event,PRIORITY_OPPORTUNISTIC_MAP,mapNodeLabelExpression);
<Line#13>      maps.put(event.getAttemptID(),request);
<Line#14>      addOpportunisticResourceRequest(request.priority,request.capability);
<Line#15>    }
<Line#16> else {
<Line#17>      request=new ContainerRequest(event,PRIORITY_MAP,mapNodeLabelExpression);
<Line#18>      for (      String host : event.getHosts()) {
<Line#19>        LinkedList<TaskAttemptId> list=mapsHostMapping.get(host);
<Line#20>        if (list == null) {
<Line#21>          list=new LinkedList<TaskAttemptId>();
<Line#22>          mapsHostMapping.put(host,list);
<Line#23>        }
<Line#24>        list.add(event.getAttemptID());
<Line#25>        if (LOG.isDebugEnabled()) {
<Line#26>          LOG.debug("Added attempt req to host " + host);
<Line#27>        }
<Line#28>      }
<Line#29>      for (      String rack : event.getRacks()) {
<Line#30>        LinkedList<TaskAttemptId> list=mapsRackMapping.get(rack);
<Line#31>        if (list == null) {
<Line#32>          list=new LinkedList<TaskAttemptId>();
<Line#33>          mapsRackMapping.put(rack,list);
<Line#34>        }
<Line#35>        list.add(event.getAttemptID());
<Line#36>        if (LOG.isDebugEnabled()) {
<Line#37>          LOG.debug("Added attempt req to rack " + rack);
<Line#38>        }
<Line#39>      }
<Line#40>      maps.put(event.getAttemptID(),request);
<Line#41>      addContainerReq(request);
<Line#42>    }
<Line#43>    mapsMod100++;
<Line#44>    mapsMod100%=100;
<Line#45>  }
<Line#46>}
Log: <Line#26>:# LOG.debug("Added attempt req to host " + host):#
