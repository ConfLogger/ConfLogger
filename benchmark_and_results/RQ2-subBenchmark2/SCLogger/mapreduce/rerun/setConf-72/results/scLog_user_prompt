Insert a logging statement to the following code using <API>. Format: <Line#X>:# <Statement>:#

Target Code:
<Line#0> public void setConf(Configuration conf) {
<Line#1> this.conf = conf;
<Line#2> 
<Line#3> numTries = Math.min(
<Line#4> conf.getInt(MRJobConfig.MR_JOB_END_RETRY_ATTEMPTS, 0) + 1
<Line#5> , conf.getInt(MRJobConfig.MR_JOB_END_NOTIFICATION_MAX_ATTEMPTS, 1)
<Line#6> );
<Line#7> waitInterval = Math.min(
<Line#8> conf.getInt(MRJobConfig.MR_JOB_END_RETRY_INTERVAL, 5000)
<Line#9> , conf.getInt(MRJobConfig.MR_JOB_END_NOTIFICATION_MAX_RETRY_INTERVAL, 5000)
<Line#10> );
<Line#11> waitInterval = (waitInterval < 0) ? 5000 : waitInterval;
<Line#12> 
<Line#13> timeout = conf.getInt(JobContext.MR_JOB_END_NOTIFICATION_TIMEOUT,
<Line#14> JobContext.DEFAULT_MR_JOB_END_NOTIFICATION_TIMEOUT);
<Line#15> 
<Line#16> userUrl = conf.get(MRJobConfig.MR_JOB_END_NOTIFICATION_URL);
<Line#17> 
<Line#18> proxyConf = conf.get(MRJobConfig.MR_JOB_END_NOTIFICATION_PROXY);
<Line#19> 
<Line#20> customJobEndNotifierClassName = StringUtils.stripToNull(
<Line#21> conf.get(MRJobConfig.MR_JOB_END_NOTIFICATION_CUSTOM_NOTIFIER_CLASS));
<Line#22> 
<Line#23> //Configure the proxy to use if its set. It should be set like
<Line#24> //proxyType@proxyHostname:port
<Line#25> if(proxyConf != null && !proxyConf.equals("") &&
<Line#26> proxyConf.lastIndexOf(":") != -1) {
<Line#27> int typeIndex = proxyConf.indexOf("@");
<Line#28> Proxy.Type proxyType = Proxy.Type.HTTP;
<Line#29> if(typeIndex != -1 &&
<Line#30> proxyConf.substring(0, typeIndex).compareToIgnoreCase("socks") == 0) {
<Line#31> proxyType = Proxy.Type.SOCKS;
<Line#32> }
<Line#33> String hostname = proxyConf.substring(typeIndex + 1,
<Line#34> proxyConf.lastIndexOf(":"));
<Line#35> String portConf = proxyConf.substring(proxyConf.lastIndexOf(":") + 1);
<Line#36> try {
<Line#37> int port = Integer.parseInt(portConf);
<Line#38> proxyToUse = new Proxy(proxyType,
<Line#39> new InetSocketAddress(hostname, port));
<Line#40> } catch(NumberFormatException nfe) {
<Line#41> Log.getLog().warn("Job end notification couldn't parse configured"
<Line#42> + "proxy's port " + portConf + ". Not going to use a proxy");
<Line#43> }
<Line#44> }
<Line#45> 
<Line#46> }

Relevant Logging Patterns:
Example 1:
File: mapreduce__createNativeObject-81__.json
Code:
<Line#1>{
<Line#2>  assertNativeLibraryLoaded();
<Line#3>  final long ret=JNICreateNativeObject(clazz.getBytes(Charsets.UTF_8));
<Line#4>  if (ret == 0) {
<Line#5>    LOG.warn("Can't create NativeObject for class " + clazz + ", probably not exist.");
<Line#6>  }
<Line#7>  return ret;
<Line#8>}
Log: <Line#5>:# LOG.warn("Can't create NativeObject for class " + clazz + ", probably not exist."):#

Example 2:
File: mapreduce__createControlFile-122__.json
Code:
<Line#1>{
<Line#2>  LOG.info("creating control file: " + fileSize + " mega bytes, "+ nrFiles+ " files");
<Line#3>  fs.delete(CONTROL_DIR,true);
<Line#4>  for (int i=0; i < nrFiles; i++) {
<Line#5>    String name=getFileName(i);
<Line#6>    Path controlFile=new Path(CONTROL_DIR,"in_file_" + name);
<Line#7>    SequenceFile.Writer writer=null;
<Line#8>    try {
<Line#9>      writer=SequenceFile.createWriter(fs,fsConfig,controlFile,Text.class,LongWritable.class,CompressionType.NONE);
<Line#10>      writer.append(new Text(name),new LongWritable(fileSize));
<Line#11>    }
<Line#12> catch (    Exception e) {
<Line#13>      throw new IOException(e.getLocalizedMessage());
<Line#14>    }
<Line#15> finally {
<Line#16>      if (writer != null)       writer.close();
<Line#17>      writer=null;
<Line#18>    }
<Line#19>  }
<Line#20>  LOG.info("created control files for: " + nrFiles + " files");
<Line#21>}
Log: <Line#2>:# LOG.info("creating control file: " + fileSize + " mega bytes, "+ nrFiles+ " files"):#

Example 3:
File: mapreduce__createControlFile-122__.json
Code:
<Line#1>{
<Line#2>  LOG.info("creating control file: " + fileSize + " mega bytes, "+ nrFiles+ " files");
<Line#3>  fs.delete(CONTROL_DIR,true);
<Line#4>  for (int i=0; i < nrFiles; i++) {
<Line#5>    String name=getFileName(i);
<Line#6>    Path controlFile=new Path(CONTROL_DIR,"in_file_" + name);
<Line#7>    SequenceFile.Writer writer=null;
<Line#8>    try {
<Line#9>      writer=SequenceFile.createWriter(fs,fsConfig,controlFile,Text.class,LongWritable.class,CompressionType.NONE);
<Line#10>      writer.append(new Text(name),new LongWritable(fileSize));
<Line#11>    }
<Line#12> catch (    Exception e) {
<Line#13>      throw new IOException(e.getLocalizedMessage());
<Line#14>    }
<Line#15> finally {
<Line#16>      if (writer != null)       writer.close();
<Line#17>      writer=null;
<Line#18>    }
<Line#19>  }
<Line#20>  LOG.info("created control files for: " + nrFiles + " files");
<Line#21>}
Log: <Line#20>:# LOG.info("created control files for: " + nrFiles + " files"):#

Example 4:
File: mapreduce__addMap-1106__.json
Code:
<Line#1>{
<Line#2>  ContainerRequest request=null;
<Line#3>  if (event.getEarlierAttemptFailed()) {
<Line#4>    earlierFailedMaps.add(event.getAttemptID());
<Line#5>    request=new ContainerRequest(event,PRIORITY_FAST_FAIL_MAP,mapNodeLabelExpression);
<Line#6>    LOG.info("Added " + event.getAttemptID() + " to list of failed maps");
<Line#7>    maps.put(event.getAttemptID(),request);
<Line#8>    addContainerReq(request);
<Line#9>  }
<Line#10> else {
<Line#11>    if (mapsMod100 < numOpportunisticMapsPercent) {
<Line#12>      request=new ContainerRequest(event,PRIORITY_OPPORTUNISTIC_MAP,mapNodeLabelExpression);
<Line#13>      maps.put(event.getAttemptID(),request);
<Line#14>      addOpportunisticResourceRequest(request.priority,request.capability);
<Line#15>    }
<Line#16> else {
<Line#17>      request=new ContainerRequest(event,PRIORITY_MAP,mapNodeLabelExpression);
<Line#18>      for (      String host : event.getHosts()) {
<Line#19>        LinkedList<TaskAttemptId> list=mapsHostMapping.get(host);
<Line#20>        if (list == null) {
<Line#21>          list=new LinkedList<TaskAttemptId>();
<Line#22>          mapsHostMapping.put(host,list);
<Line#23>        }
<Line#24>        list.add(event.getAttemptID());
<Line#25>        if (LOG.isDebugEnabled()) {
<Line#26>          LOG.debug("Added attempt req to host " + host);
<Line#27>        }
<Line#28>      }
<Line#29>      for (      String rack : event.getRacks()) {
<Line#30>        LinkedList<TaskAttemptId> list=mapsRackMapping.get(rack);
<Line#31>        if (list == null) {
<Line#32>          list=new LinkedList<TaskAttemptId>();
<Line#33>          mapsRackMapping.put(rack,list);
<Line#34>        }
<Line#35>        list.add(event.getAttemptID());
<Line#36>        if (LOG.isDebugEnabled()) {
<Line#37>          LOG.debug("Added attempt req to rack " + rack);
<Line#38>        }
<Line#39>      }
<Line#40>      maps.put(event.getAttemptID(),request);
<Line#41>      addContainerReq(request);
<Line#42>    }
<Line#43>    mapsMod100++;
<Line#44>    mapsMod100%=100;
<Line#45>  }
<Line#46>}
Log: <Line#6>:# LOG.info("Added " + event.getAttemptID() + " to list of failed maps"):#

Example 5:
File: mapreduce__addMap-1106__.json
Code:
<Line#1>{
<Line#2>  ContainerRequest request=null;
<Line#3>  if (event.getEarlierAttemptFailed()) {
<Line#4>    earlierFailedMaps.add(event.getAttemptID());
<Line#5>    request=new ContainerRequest(event,PRIORITY_FAST_FAIL_MAP,mapNodeLabelExpression);
<Line#6>    LOG.info("Added " + event.getAttemptID() + " to list of failed maps");
<Line#7>    maps.put(event.getAttemptID(),request);
<Line#8>    addContainerReq(request);
<Line#9>  }
<Line#10> else {
<Line#11>    if (mapsMod100 < numOpportunisticMapsPercent) {
<Line#12>      request=new ContainerRequest(event,PRIORITY_OPPORTUNISTIC_MAP,mapNodeLabelExpression);
<Line#13>      maps.put(event.getAttemptID(),request);
<Line#14>      addOpportunisticResourceRequest(request.priority,request.capability);
<Line#15>    }
<Line#16> else {
<Line#17>      request=new ContainerRequest(event,PRIORITY_MAP,mapNodeLabelExpression);
<Line#18>      for (      String host : event.getHosts()) {
<Line#19>        LinkedList<TaskAttemptId> list=mapsHostMapping.get(host);
<Line#20>        if (list == null) {
<Line#21>          list=new LinkedList<TaskAttemptId>();
<Line#22>          mapsHostMapping.put(host,list);
<Line#23>        }
<Line#24>        list.add(event.getAttemptID());
<Line#25>        if (LOG.isDebugEnabled()) {
<Line#26>          LOG.debug("Added attempt req to host " + host);
<Line#27>        }
<Line#28>      }
<Line#29>      for (      String rack : event.getRacks()) {
<Line#30>        LinkedList<TaskAttemptId> list=mapsRackMapping.get(rack);
<Line#31>        if (list == null) {
<Line#32>          list=new LinkedList<TaskAttemptId>();
<Line#33>          mapsRackMapping.put(rack,list);
<Line#34>        }
<Line#35>        list.add(event.getAttemptID());
<Line#36>        if (LOG.isDebugEnabled()) {
<Line#37>          LOG.debug("Added attempt req to rack " + rack);
<Line#38>        }
<Line#39>      }
<Line#40>      maps.put(event.getAttemptID(),request);
<Line#41>      addContainerReq(request);
<Line#42>    }
<Line#43>    mapsMod100++;
<Line#44>    mapsMod100%=100;
<Line#45>  }
<Line#46>}
Log: <Line#26>:# LOG.debug("Added attempt req to host " + host):#
