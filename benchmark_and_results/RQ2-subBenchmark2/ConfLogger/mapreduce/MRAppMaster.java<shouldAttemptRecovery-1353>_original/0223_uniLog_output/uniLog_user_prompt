select <line#> and insert log level and Log verbosity message after <line#>

Query: Target method code:
<Line#0>private boolean shouldAttemptRecovery() throws IOException {
<Line#1>if (isFirstAttempt()) {
<Line#2>return false;  // no need to recover on the first attempt
<Line#3>}
<Line#4>
<Line#5>boolean recoveryEnabled = getConfig().getBoolean(
<Line#6>MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE,
<Line#7>MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE_DEFAULT);
<Line#8>if (!recoveryEnabled) {
<Line#9>LOG.info("Not attempting to recover. Recovery disabled. To enable " +
<Line#10>"recovery, set " + MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE);
<Line#11>return false;
<Line#12>}
<Line#13>
<Line#14>boolean recoverySupportedByCommitter = isRecoverySupported();
<Line#15>if (!recoverySupportedByCommitter) {
<Line#16>LOG.info("Not attempting to recover. Recovery is not supported by " +
<Line#17>committer.getClass() + ". Use an OutputCommitter that supports" +
<Line#18>" recovery.");
<Line#19>return false;
<Line#20>}
<Line#21>
<Line#22>int reducerCount = getConfig().getInt(MRJobConfig.NUM_REDUCES, 0);
<Line#23>
<Line#24>// If a shuffle secret was not provided by the job client, one will be
<Line#25>// generated in this job attempt. However, that disables recovery if
<Line#26>// there are reducers as the shuffle secret would be job attempt specific.
<Line#27>boolean shuffleKeyValidForRecovery =
<Line#28>TokenCache.getShuffleSecretKey(jobCredentials) != null;
<Line#29>if (reducerCount > 0 && !shuffleKeyValidForRecovery) {
<Line#30>LOG.info("Not attempting to recover. The shuffle key is invalid for " +
<Line#31>"recovery.");
<Line#32>return false;
<Line#33>}
<Line#34>
<Line#35>// If the intermediate data is encrypted, recovering the job requires the
<Line#36>// access to the key. Until the encryption key is persisted, we should
<Line#37>// avoid attempts to recover.
<Line#38>boolean spillEncrypted = CryptoUtils.isEncryptedSpillEnabled(getConfig());
<Line#39>if (reducerCount > 0 && spillEncrypted) {
<Line#40>LOG.info("Not attempting to recover. Intermediate spill encryption" +
<Line#41>" is enabled.");
<Line#42>return false;
<Line#43>}
<Line#44>
<Line#45>return true;
<Line#46>}

Example 1:
<Line#1>{
<Line#2>  boolean attemptRecovery=shouldAttemptRecovery();
<Line#3>  boolean recoverySucceeded=true;
<Line#4>  if (attemptRecovery) {
<Line#5>    LOG.info("Attempting to recover.");
<Line#6>    try {
<Line#7>      parsePreviousJobHistory();
<Line#8>    }
<Line#9> catch (    IOException e) {
<Line#10>      LOG.warn("Unable to parse prior job history, aborting recovery",e);
<Line#11>      recoverySucceeded=false;
<Line#12>    }
<Line#13>  }
<Line#14>  if (!isFirstAttempt() && (!attemptRecovery || !recoverySucceeded)) {
<Line#15>    amInfos.addAll(readJustAMInfos());
<Line#16>  }
<Line#17>}
Label: <Line#5> LOG.info("Attempting to recover.")

Example 2:
<Line#1>{
<Line#2>  boolean attemptRecovery=shouldAttemptRecovery();
<Line#3>  boolean recoverySucceeded=true;
<Line#4>  if (attemptRecovery) {
<Line#5>    LOG.info("Attempting to recover.");
<Line#6>    try {
<Line#7>      parsePreviousJobHistory();
<Line#8>    }
<Line#9> catch (    IOException e) {
<Line#10>      LOG.warn("Unable to parse prior job history, aborting recovery",e);
<Line#11>      recoverySucceeded=false;
<Line#12>    }
<Line#13>  }
<Line#14>  if (!isFirstAttempt() && (!attemptRecovery || !recoverySucceeded)) {
<Line#15>    amInfos.addAll(readJustAMInfos());
<Line#16>  }
<Line#17>}
Label: <Line#10> LOG.warn("Unable to parse prior job history, aborting recovery",e)

Example 3:
<Line#1>{
<Line#2>  int exitCode=-1;
<Line#3>  if (argv.length < 1) {
<Line#4>    displayUsage("");
<Line#5>    return exitCode;
<Line#6>  }
<Line#7>  String cmd=argv[0];
<Line#8>  String submitJobFile=null;
<Line#9>  String jobid=null;
<Line#10>  String taskid=null;
<Line#11>  String historyFileOrJobId=null;
<Line#12>  String historyOutFile=null;
<Line#13>  String historyOutFormat=HistoryViewer.HUMAN_FORMAT;
<Line#14>  String counterGroupName=null;
<Line#15>  String counterName=null;
<Line#16>  JobPriority jp=null;
<Line#17>  String taskType=null;
<Line#18>  String taskState=null;
<Line#19>  int fromEvent=0;
<Line#20>  int nEvents=0;
<Line#21>  int jpvalue=0;
<Line#22>  String configOutFile=null;
<Line#23>  boolean getStatus=false;
<Line#24>  boolean getCounter=false;
<Line#25>  boolean killJob=false;
<Line#26>  boolean listEvents=false;
<Line#27>  boolean viewHistory=false;
<Line#28>  boolean viewAllHistory=false;
<Line#29>  boolean listJobs=false;
<Line#30>  boolean listAllJobs=false;
<Line#31>  boolean listActiveTrackers=false;
<Line#32>  boolean listBlacklistedTrackers=false;
<Line#33>  boolean displayTasks=false;
<Line#34>  boolean killTask=false;
<Line#35>  boolean failTask=false;
<Line#36>  boolean setJobPriority=false;
<Line#37>  boolean logs=false;
<Line#38>  boolean downloadConfig=false;
<Line#39>  if ("-submit".equals(cmd)) {
<Line#40>    if (argv.length != 2) {
<Line#41>      displayUsage(cmd);
<Line#42>      return exitCode;
<Line#43>    }
<Line#44>    submitJobFile=argv[1];
<Line#45>  }
<Line#46> else   if ("-status".equals(cmd)) {
<Line#47>    if (argv.length != 2) {
<Line#48>      displayUsage(cmd);
<Line#49>      return exitCode;
<Line#50>    }
<Line#51>    jobid=argv[1];
<Line#52>    getStatus=true;
<Line#53>  }
<Line#54> else   if ("-counter".equals(cmd)) {
<Line#55>    if (argv.length != 4) {
<Line#56>      displayUsage(cmd);
<Line#57>      return exitCode;
<Line#58>    }
<Line#59>    getCounter=true;
<Line#60>    jobid=argv[1];
<Line#61>    counterGroupName=argv[2];
<Line#62>    counterName=argv[3];
<Line#63>  }
<Line#64> else   if ("-kill".equals(cmd)) {
<Line#65>    if (argv.length != 2) {
<Line#66>      displayUsage(cmd);
<Line#67>      return exitCode;
<Line#68>    }
<Line#69>    jobid=argv[1];
<Line#70>    killJob=true;
<Line#71>  }
<Line#72> else   if ("-set-priority".equals(cmd)) {
<Line#73>    if (argv.length != 3) {
<Line#74>      displayUsage(cmd);
<Line#75>      return exitCode;
<Line#76>    }
<Line#77>    jobid=argv[1];
<Line#78>    try {
<Line#79>      jp=JobPriority.valueOf(argv[2]);
<Line#80>    }
<Line#81> catch (    IllegalArgumentException iae) {
<Line#82>      try {
<Line#83>        jpvalue=Integer.parseInt(argv[2]);
<Line#84>      }
<Line#85> catch (      NumberFormatException ne) {
<Line#86>        LOG.info("Error number format: ",ne);
<Line#87>        displayUsage(cmd);
<Line#88>        return exitCode;
<Line#89>      }
<Line#90>    }
<Line#91>    setJobPriority=true;
<Line#92>  }
<Line#93> else   if ("-events".equals(cmd)) {
<Line#94>    if (argv.length != 4) {
<Line#95>      displayUsage(cmd);
<Line#96>      return exitCode;
<Line#97>    }
<Line#98>    jobid=argv[1];
<Line#99>    fromEvent=Integer.parseInt(argv[2]);
<Line#100>    nEvents=Integer.parseInt(argv[3]);
<Line#101>    listEvents=true;
<Line#102>  }
<Line#103> else   if ("-history".equals(cmd)) {
<Line#104>    viewHistory=true;
<Line#105>    if (argv.length < 2 || argv.length > 7) {
<Line#106>      displayUsage(cmd);
<Line#107>      return exitCode;
<Line#108>    }
<Line#109>    int index=1;
<Line#110>    if ("all".equals(argv[index])) {
<Line#111>      index++;
<Line#112>      viewAllHistory=true;
<Line#113>      if (argv.length == 2) {
<Line#114>        displayUsage(cmd);
<Line#115>        return exitCode;
<Line#116>      }
<Line#117>    }
<Line#118>    historyFileOrJobId=argv[index++];
<Line#119>    if (argv.length > index + 1 && "-outfile".equals(argv[index])) {
<Line#120>      index++;
<Line#121>      historyOutFile=argv[index++];
<Line#122>    }
<Line#123>    if (argv.length > index + 1 && "-format".equals(argv[index])) {
<Line#124>      index++;
<Line#125>      historyOutFormat=argv[index++];
<Line#126>    }
<Line#127>    if (argv.length > index) {
<Line#128>      displayUsage(cmd);
<Line#129>      return exitCode;
<Line#130>    }
<Line#131>  }
<Line#132> else   if ("-list".equals(cmd)) {
<Line#133>    if (argv.length != 1 && !(argv.length == 2 && "all".equals(argv[1]))) {
<Line#134>      displayUsage(cmd);
<Line#135>      return exitCode;
<Line#136>    }
<Line#137>    if (argv.length == 2 && "all".equals(argv[1])) {
<Line#138>      listAllJobs=true;
<Line#139>    }
<Line#140> else {
<Line#141>      listJobs=true;
<Line#142>    }
<Line#143>  }
<Line#144> else   if ("-kill-task".equals(cmd)) {
<Line#145>    if (argv.length != 2) {
<Line#146>      displayUsage(cmd);
<Line#147>      return exitCode;
<Line#148>    }
<Line#149>    killTask=true;
<Line#150>    taskid=argv[1];
<Line#151>  }
<Line#152> else   if ("-fail-task".equals(cmd)) {
<Line#153>    if (argv.length != 2) {
<Line#154>      displayUsage(cmd);
<Line#155>      return exitCode;
<Line#156>    }
<Line#157>    failTask=true;
<Line#158>    taskid=argv[1];
<Line#159>  }
<Line#160> else   if ("-list-active-trackers".equals(cmd)) {
<Line#161>    if (argv.length != 1) {
<Line#162>      displayUsage(cmd);
<Line#163>      return exitCode;
<Line#164>    }
<Line#165>    listActiveTrackers=true;
<Line#166>  }
<Line#167> else   if ("-list-blacklisted-trackers".equals(cmd)) {
<Line#168>    if (argv.length != 1) {
<Line#169>      displayUsage(cmd);
<Line#170>      return exitCode;
<Line#171>    }
<Line#172>    listBlacklistedTrackers=true;
<Line#173>  }
<Line#174> else   if ("-list-attempt-ids".equals(cmd)) {
<Line#175>    if (argv.length != 4) {
<Line#176>      displayUsage(cmd);
<Line#177>      return exitCode;
<Line#178>    }
<Line#179>    jobid=argv[1];
<Line#180>    taskType=argv[2];
<Line#181>    taskState=argv[3];
<Line#182>    displayTasks=true;
<Line#183>    if (!taskTypes.contains(org.apache.hadoop.util.StringUtils.toUpperCase(taskType))) {
<Line#184>      System.out.println("Error: Invalid task-type: " + taskType);
<Line#185>      displayUsage(cmd);
<Line#186>      return exitCode;
<Line#187>    }
<Line#188>    if (!taskStates.contains(org.apache.hadoop.util.StringUtils.toLowerCase(taskState))) {
<Line#189>      System.out.println("Error: Invalid task-state: " + taskState);
<Line#190>      displayUsage(cmd);
<Line#191>      return exitCode;
<Line#192>    }
<Line#193>  }
<Line#194> else   if ("-logs".equals(cmd)) {
<Line#195>    if (argv.length == 2 || argv.length == 3) {
<Line#196>      logs=true;
<Line#197>      jobid=argv[1];
<Line#198>      if (argv.length == 3) {
<Line#199>        taskid=argv[2];
<Line#200>      }
<Line#201> else {
<Line#202>        taskid=null;
<Line#203>      }
<Line#204>    }
<Line#205> else {
<Line#206>      displayUsage(cmd);
<Line#207>      return exitCode;
<Line#208>    }
<Line#209>  }
<Line#210> else   if ("-config".equals(cmd)) {
<Line#211>    downloadConfig=true;
<Line#212>    if (argv.length != 3) {
<Line#213>      displayUsage(cmd);
<Line#214>      return exitCode;
<Line#215>    }
<Line#216>    jobid=argv[1];
<Line#217>    configOutFile=argv[2];
<Line#218>  }
<Line#219> else {
<Line#220>    displayUsage(cmd);
<Line#221>    return exitCode;
<Line#222>  }
<Line#223>  cluster=createCluster();
<Line#224>  try {
<Line#225>    if (submitJobFile != null) {
<Line#226>      Job job=Job.getInstance(new JobConf(submitJobFile));
<Line#227>      job.submit();
<Line#228>      System.out.println("Created job " + job.getJobID());
<Line#229>      exitCode=0;
<Line#230>    }
<Line#231> else     if (getStatus) {
<Line#232>      Job job=getJob(JobID.forName(jobid));
<Line#233>      if (job == null) {
<Line#234>        System.out.println("Could not find job " + jobid);
<Line#235>      }
<Line#236> else {
<Line#237>        Counters counters=job.getCounters();
<Line#238>        System.out.println();
<Line#239>        System.out.println(job);
<Line#240>        if (counters != null) {
<Line#241>          System.out.println(counters);
<Line#242>        }
<Line#243> else {
<Line#244>          System.out.println("Counters not available. Job is retired.");
<Line#245>        }
<Line#246>        exitCode=0;
<Line#247>      }
<Line#248>    }
<Line#249> else     if (getCounter) {
<Line#250>      Job job=getJob(JobID.forName(jobid));
<Line#251>      if (job == null) {
<Line#252>        System.out.println("Could not find job " + jobid);
<Line#253>      }
<Line#254> else {
<Line#255>        Counters counters=job.getCounters();
<Line#256>        if (counters == null) {
<Line#257>          System.out.println("Counters not available for retired job " + jobid);
<Line#258>          exitCode=-1;
<Line#259>        }
<Line#260> else {
<Line#261>          System.out.println(getCounter(counters,counterGroupName,counterName));
<Line#262>          exitCode=0;
<Line#263>        }
<Line#264>      }
<Line#265>    }
<Line#266> else     if (killJob) {
<Line#267>      Job job=getJob(JobID.forName(jobid));
<Line#268>      if (job == null) {
<Line#269>        System.out.println("Could not find job " + jobid);
<Line#270>      }
<Line#271> else {
<Line#272>        JobStatus jobStatus=job.getStatus();
<Line#273>        if (jobStatus.getState() == JobStatus.State.FAILED) {
<Line#274>          System.out.println("Could not mark the job " + jobid + " as killed, as it has already failed.");
<Line#275>          exitCode=-1;
<Line#276>        }
<Line#277> else         if (jobStatus.getState() == JobStatus.State.KILLED) {
<Line#278>          System.out.println("The job " + jobid + " has already been killed.");
<Line#279>          exitCode=-1;
<Line#280>        }
<Line#281> else         if (jobStatus.getState() == JobStatus.State.SUCCEEDED) {
<Line#282>          System.out.println("Could not kill the job " + jobid + ", as it has already succeeded.");
<Line#283>          exitCode=-1;
<Line#284>        }
<Line#285> else {
<Line#286>          job.killJob();
<Line#287>          System.out.println("Killed job " + jobid);
<Line#288>          exitCode=0;
<Line#289>        }
<Line#290>      }
<Line#291>    }
<Line#292> else     if (setJobPriority) {
<Line#293>      Job job=getJob(JobID.forName(jobid));
<Line#294>      if (job == null) {
<Line#295>        System.out.println("Could not find job " + jobid);
<Line#296>      }
<Line#297> else {
<Line#298>        if (jp != null) {
<Line#299>          job.setPriority(jp);
<Line#300>        }
<Line#301> else {
<Line#302>          job.setPriorityAsInteger(jpvalue);
<Line#303>        }
<Line#304>        System.out.println("Changed job priority.");
<Line#305>        exitCode=0;
<Line#306>      }
<Line#307>    }
<Line#308> else     if (viewHistory) {
<Line#309>      if (historyFileOrJobId.endsWith(".jhist")) {
<Line#310>        viewHistory(historyFileOrJobId,viewAllHistory,historyOutFile,historyOutFormat);
<Line#311>        exitCode=0;
<Line#312>      }
<Line#313> else {
<Line#314>        Job job=getJob(JobID.forName(historyFileOrJobId));
<Line#315>        if (job == null) {
<Line#316>          System.out.println("Could not find job " + jobid);
<Line#317>        }
<Line#318> else {
<Line#319>          String historyUrl=job.getHistoryUrl();
<Line#320>          if (historyUrl == null || historyUrl.isEmpty()) {
<Line#321>            System.out.println("History file for job " + historyFileOrJobId + " is currently unavailable.");
<Line#322>          }
<Line#323> else {
<Line#324>            viewHistory(historyUrl,viewAllHistory,historyOutFile,historyOutFormat);
<Line#325>            exitCode=0;
<Line#326>          }
<Line#327>        }
<Line#328>      }
<Line#329>    }
<Line#330> else     if (listEvents) {
<Line#331>      Job job=getJob(JobID.forName(jobid));
<Line#332>      if (job == null) {
<Line#333>        System.out.println("Could not find job " + jobid);
<Line#334>      }
<Line#335> else {
<Line#336>        listEvents(job,fromEvent,nEvents);
<Line#337>        exitCode=0;
<Line#338>      }
<Line#339>    }
<Line#340> else     if (listJobs) {
<Line#341>      listJobs(cluster);
<Line#342>      exitCode=0;
<Line#343>    }
<Line#344> else     if (listAllJobs) {
<Line#345>      listAllJobs(cluster);
<Line#346>      exitCode=0;
<Line#347>    }
<Line#348> else     if (listActiveTrackers) {
<Line#349>      listActiveTrackers(cluster);
<Line#350>      exitCode=0;
<Line#351>    }
<Line#352> else     if (listBlacklistedTrackers) {
<Line#353>      listBlacklistedTrackers(cluster);
<Line#354>      exitCode=0;
<Line#355>    }
<Line#356> else     if (displayTasks) {
<Line#357>      Job job=getJob(JobID.forName(jobid));
<Line#358>      if (job == null) {
<Line#359>        System.out.println("Could not find job " + jobid);
<Line#360>      }
<Line#361> else {
<Line#362>        displayTasks(getJob(JobID.forName(jobid)),taskType,taskState);
<Line#363>        exitCode=0;
<Line#364>      }
<Line#365>    }
<Line#366> else     if (killTask) {
<Line#367>      TaskAttemptID taskID=TaskAttemptID.forName(taskid);
<Line#368>      Job job=getJob(taskID.getJobID());
<Line#369>      if (job == null) {
<Line#370>        System.out.println("Could not find job " + jobid);
<Line#371>      }
<Line#372> else       if (job.killTask(taskID,false)) {
<Line#373>        System.out.println("Killed task " + taskid);
<Line#374>        exitCode=0;
<Line#375>      }
<Line#376> else {
<Line#377>        System.out.println("Could not kill task " + taskid);
<Line#378>        exitCode=-1;
<Line#379>      }
<Line#380>    }
<Line#381> else     if (failTask) {
<Line#382>      TaskAttemptID taskID=TaskAttemptID.forName(taskid);
<Line#383>      Job job=getJob(taskID.getJobID());
<Line#384>      if (job == null) {
<Line#385>        System.out.println("Could not find job " + jobid);
<Line#386>      }
<Line#387> else       if (job.killTask(taskID,true)) {
<Line#388>        System.out.println("Killed task " + taskID + " by failing it");
<Line#389>        exitCode=0;
<Line#390>      }
<Line#391> else {
<Line#392>        System.out.println("Could not fail task " + taskid);
<Line#393>        exitCode=-1;
<Line#394>      }
<Line#395>    }
<Line#396> else     if (logs) {
<Line#397>      JobID jobID=JobID.forName(jobid);
<Line#398>      if (getJob(jobID) == null) {
<Line#399>        System.out.println("Could not find job " + jobid);
<Line#400>      }
<Line#401> else {
<Line#402>        try {
<Line#403>          TaskAttemptID taskAttemptID=TaskAttemptID.forName(taskid);
<Line#404>          LogParams logParams=cluster.getLogParams(jobID,taskAttemptID);
<Line#405>          LogCLIHelpers logDumper=new LogCLIHelpers();
<Line#406>          logDumper.setConf(getConf());
<Line#407>          exitCode=logDumper.dumpAContainersLogs(logParams.getApplicationId(),logParams.getContainerId(),logParams.getNodeId(),logParams.getOwner());
<Line#408>        }
<Line#409> catch (        IOException e) {
<Line#410>          if (e instanceof RemoteException) {
<Line#411>            throw e;
<Line#412>          }
<Line#413>          System.out.println(e.getMessage());
<Line#414>        }
<Line#415>      }
<Line#416>    }
<Line#417> else     if (downloadConfig) {
<Line#418>      Job job=getJob(JobID.forName(jobid));
<Line#419>      if (job == null) {
<Line#420>        System.out.println("Could not find job " + jobid);
<Line#421>      }
<Line#422> else {
<Line#423>        String jobFile=job.getJobFile();
<Line#424>        if (jobFile == null || jobFile.isEmpty()) {
<Line#425>          System.out.println("Config file for job " + jobFile + " could not be found.");
<Line#426>        }
<Line#427> else {
<Line#428>          Path configPath=new Path(jobFile);
<Line#429>          FileSystem fs=FileSystem.get(getConf());
<Line#430>          fs.copyToLocalFile(configPath,new Path(configOutFile));
<Line#431>          exitCode=0;
<Line#432>        }
<Line#433>      }
<Line#434>    }
<Line#435>  }
<Line#436> catch (  RemoteException re) {
<Line#437>    IOException unwrappedException=re.unwrapRemoteException();
<Line#438>    if (unwrappedException instanceof AccessControlException) {
<Line#439>      System.out.println(unwrappedException.getMessage());
<Line#440>    }
<Line#441> else {
<Line#442>      throw re;
<Line#443>    }
<Line#444>  }
<Line#445> finally {
<Line#446>    cluster.close();
<Line#447>  }
<Line#448>  return exitCode;
<Line#449>}
Label: <Line#86> LOG.info("Error number format: ",ne)

Example 4:
<Line#1>{
<Line#2>  if (LOG.isDebugEnabled()) {
<Line#3>    LOG.debug("Flushing " + toString());
<Line#4>  }
<Line#5>synchronized (lock) {
<Line#6>    if (numUnflushedCompletionEvents != 0) {
<Line#7>      writer.flush();
<Line#8>      numUnflushedCompletionEvents=0;
<Line#9>      resetFlushTimer();
<Line#10>    }
<Line#11>  }
<Line#12>}
Label: <Line#3> LOG.debug("Flushing " + toString())

Example 5:
<Line#1>{
<Line#2>  ArrayList<OneBlockInfo> validBlocks=new ArrayList<OneBlockInfo>();
<Line#3>  long curSplitSize=0;
<Line#4>  int totalNodes=nodeToBlocks.size();
<Line#5>  long totalLength=totLength;
<Line#6>  Multiset<String> splitsPerNode=HashMultiset.create();
<Line#7>  Set<String> completedNodes=new HashSet<String>();
<Line#8>  while (true) {
<Line#9>    for (Iterator<Map.Entry<String,Set<OneBlockInfo>>> iter=nodeToBlocks.entrySet().iterator(); iter.hasNext(); ) {
<Line#10>      Map.Entry<String,Set<OneBlockInfo>> one=iter.next();
<Line#11>      String node=one.getKey();
<Line#12>      if (completedNodes.contains(node)) {
<Line#13>        continue;
<Line#14>      }
<Line#15>      Set<OneBlockInfo> blocksInCurrentNode=one.getValue();
<Line#16>      Iterator<OneBlockInfo> oneBlockIter=blocksInCurrentNode.iterator();
<Line#17>      while (oneBlockIter.hasNext()) {
<Line#18>        OneBlockInfo oneblock=oneBlockIter.next();
<Line#19>        if (!blockToNodes.containsKey(oneblock)) {
<Line#20>          oneBlockIter.remove();
<Line#21>          continue;
<Line#22>        }
<Line#23>        validBlocks.add(oneblock);
<Line#24>        blockToNodes.remove(oneblock);
<Line#25>        curSplitSize+=oneblock.length;
<Line#26>        if (maxSize != 0 && curSplitSize >= maxSize) {
<Line#27>          addCreatedSplit(splits,Collections.singleton(node),validBlocks);
<Line#28>          totalLength-=curSplitSize;
<Line#29>          curSplitSize=0;
<Line#30>          splitsPerNode.add(node);
<Line#31>          blocksInCurrentNode.removeAll(validBlocks);
<Line#32>          validBlocks.clear();
<Line#33>          break;
<Line#34>        }
<Line#35>      }
<Line#36>      if (validBlocks.size() != 0) {
<Line#37>        if (minSizeNode != 0 && curSplitSize >= minSizeNode && splitsPerNode.count(node) == 0) {
<Line#38>          addCreatedSplit(splits,Collections.singleton(node),validBlocks);
<Line#39>          totalLength-=curSplitSize;
<Line#40>          splitsPerNode.add(node);
<Line#41>          blocksInCurrentNode.removeAll(validBlocks);
<Line#42>        }
<Line#43> else {
<Line#44>          for (          OneBlockInfo oneblock : validBlocks) {
<Line#45>            blockToNodes.put(oneblock,oneblock.hosts);
<Line#46>          }
<Line#47>        }
<Line#48>        validBlocks.clear();
<Line#49>        curSplitSize=0;
<Line#50>        completedNodes.add(node);
<Line#51>      }
<Line#52> else {
<Line#53>        if (blocksInCurrentNode.size() == 0) {
<Line#54>          completedNodes.add(node);
<Line#55>        }
<Line#56>      }
<Line#57>    }
<Line#58>    if (completedNodes.size() == totalNodes || totalLength == 0) {
<Line#59>      LOG.debug("Terminated node allocation with : CompletedNodes: {}, size left: {}",completedNodes.size(),totalLength);
<Line#60>      break;
<Line#61>    }
<Line#62>  }
<Line#63>  ArrayList<OneBlockInfo> overflowBlocks=new ArrayList<OneBlockInfo>();
<Line#64>  Set<String> racks=new HashSet<String>();
<Line#65>  while (blockToNodes.size() > 0) {
<Line#66>    for (Iterator<Map.Entry<String,List<OneBlockInfo>>> iter=rackToBlocks.entrySet().iterator(); iter.hasNext(); ) {
<Line#67>      Map.Entry<String,List<OneBlockInfo>> one=iter.next();
<Line#68>      racks.add(one.getKey());
<Line#69>      List<OneBlockInfo> blocks=one.getValue();
<Line#70>      boolean createdSplit=false;
<Line#71>      for (      OneBlockInfo oneblock : blocks) {
<Line#72>        if (blockToNodes.containsKey(oneblock)) {
<Line#73>          validBlocks.add(oneblock);
<Line#74>          blockToNodes.remove(oneblock);
<Line#75>          curSplitSize+=oneblock.length;
<Line#76>          if (maxSize != 0 && curSplitSize >= maxSize) {
<Line#77>            addCreatedSplit(splits,getHosts(racks),validBlocks);
<Line#78>            createdSplit=true;
<Line#79>            break;
<Line#80>          }
<Line#81>        }
<Line#82>      }
<Line#83>      if (createdSplit) {
<Line#84>        curSplitSize=0;
<Line#85>        validBlocks.clear();
<Line#86>        racks.clear();
<Line#87>        continue;
<Line#88>      }
<Line#89>      if (!validBlocks.isEmpty()) {
<Line#90>        if (minSizeRack != 0 && curSplitSize >= minSizeRack) {
<Line#91>          addCreatedSplit(splits,getHosts(racks),validBlocks);
<Line#92>        }
<Line#93> else {
<Line#94>          overflowBlocks.addAll(validBlocks);
<Line#95>        }
<Line#96>      }
<Line#97>      curSplitSize=0;
<Line#98>      validBlocks.clear();
<Line#99>      racks.clear();
<Line#100>    }
<Line#101>  }
<Line#102>  assert blockToNodes.isEmpty();
<Line#103>  assert curSplitSize == 0;
<Line#104>  assert validBlocks.isEmpty();
<Line#105>  assert racks.isEmpty();
<Line#106>  for (  OneBlockInfo oneblock : overflowBlocks) {
<Line#107>    validBlocks.add(oneblock);
<Line#108>    curSplitSize+=oneblock.length;
<Line#109>    for (int i=0; i < oneblock.racks.length; i++) {
<Line#110>      racks.add(oneblock.racks[i]);
<Line#111>    }
<Line#112>    if (maxSize != 0 && curSplitSize >= maxSize) {
<Line#113>      addCreatedSplit(splits,getHosts(racks),validBlocks);
<Line#114>      curSplitSize=0;
<Line#115>      validBlocks.clear();
<Line#116>      racks.clear();
<Line#117>    }
<Line#118>  }
<Line#119>  if (!validBlocks.isEmpty()) {
<Line#120>    addCreatedSplit(splits,getHosts(racks),validBlocks);
<Line#121>  }
<Line#122>}
Label: <Line#59> LOG.debug("Terminated node allocation with : CompletedNodes: {}, size left: {}",completedNodes.size(),totalLength)

