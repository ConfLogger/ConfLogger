select <line#> and insert log level and Log verbosity message after <line#>

Query: Target method code:
<Line#0>private boolean shouldAttemptRecovery() throws IOException {
<Line#1>if (isFirstAttempt()) {
<Line#2>return false;  // no need to recover on the first attempt
<Line#3>}
<Line#4>
<Line#5>boolean recoveryEnabled = getConfig().getBoolean(
<Line#6>MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE,
<Line#7>MRJobConfig.MR_AM_JOB_RECOVERY_ENABLE_DEFAULT);
<Line#8>if (!recoveryEnabled) {
<Line#9>return false;
<Line#10>}
<Line#11>
<Line#12>boolean recoverySupportedByCommitter = isRecoverySupported();
<Line#13>if (!recoverySupportedByCommitter) {
<Line#14>LOG.info("Not attempting to recover. Recovery is not supported by " +
<Line#15>committer.getClass() + ". Use an OutputCommitter that supports" +
<Line#16>" recovery.");
<Line#17>return false;
<Line#18>}
<Line#19>
<Line#20>int reducerCount = getConfig().getInt(MRJobConfig.NUM_REDUCES, 0);
<Line#21>
<Line#22>// If a shuffle secret was not provided by the job client, one will be
<Line#23>// generated in this job attempt. However, that disables recovery if
<Line#24>// there are reducers as the shuffle secret would be job attempt specific.
<Line#25>boolean shuffleKeyValidForRecovery =
<Line#26>TokenCache.getShuffleSecretKey(jobCredentials) != null;
<Line#27>if (reducerCount > 0 && !shuffleKeyValidForRecovery) {
<Line#28>LOG.info("Not attempting to recover. The shuffle key is invalid for " +
<Line#29>"recovery.");
<Line#30>return false;
<Line#31>}
<Line#32>
<Line#33>// If the intermediate data is encrypted, recovering the job requires the
<Line#34>// access to the key. Until the encryption key is persisted, we should
<Line#35>// avoid attempts to recover.
<Line#36>boolean spillEncrypted = CryptoUtils.isEncryptedSpillEnabled(getConfig());
<Line#37>if (reducerCount > 0 && spillEncrypted) {
<Line#38>LOG.info("Not attempting to recover. Intermediate spill encryption" +
<Line#39>" is enabled.");
<Line#40>return false;
<Line#41>}
<Line#42>
<Line#43>return true;
<Line#44>}

Example 1:
<Line#1>{
<Line#2>  boolean attemptRecovery=shouldAttemptRecovery();
<Line#3>  boolean recoverySucceeded=true;
<Line#4>  if (attemptRecovery) {
<Line#5>    LOG.info("Attempting to recover.");
<Line#6>    try {
<Line#7>      parsePreviousJobHistory();
<Line#8>    }
<Line#9> catch (    IOException e) {
<Line#10>      LOG.warn("Unable to parse prior job history, aborting recovery",e);
<Line#11>      recoverySucceeded=false;
<Line#12>    }
<Line#13>  }
<Line#14>  if (!isFirstAttempt() && (!attemptRecovery || !recoverySucceeded)) {
<Line#15>    amInfos.addAll(readJustAMInfos());
<Line#16>  }
<Line#17>}
Label: <Line#5> LOG.info("Attempting to recover.")

Example 2:
<Line#1>{
<Line#2>  boolean attemptRecovery=shouldAttemptRecovery();
<Line#3>  boolean recoverySucceeded=true;
<Line#4>  if (attemptRecovery) {
<Line#5>    LOG.info("Attempting to recover.");
<Line#6>    try {
<Line#7>      parsePreviousJobHistory();
<Line#8>    }
<Line#9> catch (    IOException e) {
<Line#10>      LOG.warn("Unable to parse prior job history, aborting recovery",e);
<Line#11>      recoverySucceeded=false;
<Line#12>    }
<Line#13>  }
<Line#14>  if (!isFirstAttempt() && (!attemptRecovery || !recoverySucceeded)) {
<Line#15>    amInfos.addAll(readJustAMInfos());
<Line#16>  }
<Line#17>}
Label: <Line#10> LOG.warn("Unable to parse prior job history, aborting recovery",e)

Example 3:
<Line#1>{
<Line#2>  String lastReport=null;
<Line#3>  Job.TaskStatusFilter filter;
<Line#4>  Configuration clientConf=getConfiguration();
<Line#5>  filter=Job.getTaskOutputFilter(clientConf);
<Line#6>  JobID jobId=getJobID();
<Line#7>  LOG.info("Running job: " + jobId);
<Line#8>  int eventCounter=0;
<Line#9>  boolean profiling=getProfileEnabled();
<Line#10>  IntegerRanges mapRanges=getProfileTaskRange(true);
<Line#11>  IntegerRanges reduceRanges=getProfileTaskRange(false);
<Line#12>  int progMonitorPollIntervalMillis=Job.getProgressPollInterval(clientConf);
<Line#13>  boolean reportedAfterCompletion=false;
<Line#14>  boolean reportedUberMode=false;
<Line#15>  while (!isComplete() || !reportedAfterCompletion) {
<Line#16>    if (isComplete()) {
<Line#17>      reportedAfterCompletion=true;
<Line#18>    }
<Line#19> else {
<Line#20>      Thread.sleep(progMonitorPollIntervalMillis);
<Line#21>    }
<Line#22>    if (status.getState() == JobStatus.State.PREP) {
<Line#23>      continue;
<Line#24>    }
<Line#25>    if (!reportedUberMode) {
<Line#26>      reportedUberMode=true;
<Line#27>      LOG.info("Job " + jobId + " running in uber mode : "+ isUber());
<Line#28>    }
<Line#29>    String report=(" map " + StringUtils.formatPercent(mapProgress(),0) + " reduce "+ StringUtils.formatPercent(reduceProgress(),0));
<Line#30>    if (!report.equals(lastReport)) {
<Line#31>      LOG.info(report);
<Line#32>      lastReport=report;
<Line#33>    }
<Line#34>    TaskCompletionEvent[] events=getTaskCompletionEvents(eventCounter,10);
<Line#35>    eventCounter+=events.length;
<Line#36>    printTaskEvents(events,filter,profiling,mapRanges,reduceRanges);
<Line#37>  }
<Line#38>  boolean success=isSuccessful();
<Line#39>  if (success) {
<Line#40>    LOG.info("Job " + jobId + " completed successfully");
<Line#41>  }
<Line#42> else {
<Line#43>    LOG.info("Job " + jobId + " failed with state "+ status.getState()+ " due to: "+ status.getFailureInfo());
<Line#44>  }
<Line#45>  Counters counters=getCounters();
<Line#46>  if (counters != null) {
<Line#47>    LOG.info(counters.toString());
<Line#48>  }
<Line#49>  return success;
<Line#50>}
Label: <Line#7> LOG.info("Running job: " + jobId)

Example 4:
<Line#1>{
<Line#2>  String lastReport=null;
<Line#3>  Job.TaskStatusFilter filter;
<Line#4>  Configuration clientConf=getConfiguration();
<Line#5>  filter=Job.getTaskOutputFilter(clientConf);
<Line#6>  JobID jobId=getJobID();
<Line#7>  LOG.info("Running job: " + jobId);
<Line#8>  int eventCounter=0;
<Line#9>  boolean profiling=getProfileEnabled();
<Line#10>  IntegerRanges mapRanges=getProfileTaskRange(true);
<Line#11>  IntegerRanges reduceRanges=getProfileTaskRange(false);
<Line#12>  int progMonitorPollIntervalMillis=Job.getProgressPollInterval(clientConf);
<Line#13>  boolean reportedAfterCompletion=false;
<Line#14>  boolean reportedUberMode=false;
<Line#15>  while (!isComplete() || !reportedAfterCompletion) {
<Line#16>    if (isComplete()) {
<Line#17>      reportedAfterCompletion=true;
<Line#18>    }
<Line#19> else {
<Line#20>      Thread.sleep(progMonitorPollIntervalMillis);
<Line#21>    }
<Line#22>    if (status.getState() == JobStatus.State.PREP) {
<Line#23>      continue;
<Line#24>    }
<Line#25>    if (!reportedUberMode) {
<Line#26>      reportedUberMode=true;
<Line#27>      LOG.info("Job " + jobId + " running in uber mode : "+ isUber());
<Line#28>    }
<Line#29>    String report=(" map " + StringUtils.formatPercent(mapProgress(),0) + " reduce "+ StringUtils.formatPercent(reduceProgress(),0));
<Line#30>    if (!report.equals(lastReport)) {
<Line#31>      LOG.info(report);
<Line#32>      lastReport=report;
<Line#33>    }
<Line#34>    TaskCompletionEvent[] events=getTaskCompletionEvents(eventCounter,10);
<Line#35>    eventCounter+=events.length;
<Line#36>    printTaskEvents(events,filter,profiling,mapRanges,reduceRanges);
<Line#37>  }
<Line#38>  boolean success=isSuccessful();
<Line#39>  if (success) {
<Line#40>    LOG.info("Job " + jobId + " completed successfully");
<Line#41>  }
<Line#42> else {
<Line#43>    LOG.info("Job " + jobId + " failed with state "+ status.getState()+ " due to: "+ status.getFailureInfo());
<Line#44>  }
<Line#45>  Counters counters=getCounters();
<Line#46>  if (counters != null) {
<Line#47>    LOG.info(counters.toString());
<Line#48>  }
<Line#49>  return success;
<Line#50>}
Label: <Line#27> LOG.info("Job " + jobId + " running in uber mode : "+ isUber())

Example 5:
<Line#1>{
<Line#2>  String lastReport=null;
<Line#3>  Job.TaskStatusFilter filter;
<Line#4>  Configuration clientConf=getConfiguration();
<Line#5>  filter=Job.getTaskOutputFilter(clientConf);
<Line#6>  JobID jobId=getJobID();
<Line#7>  LOG.info("Running job: " + jobId);
<Line#8>  int eventCounter=0;
<Line#9>  boolean profiling=getProfileEnabled();
<Line#10>  IntegerRanges mapRanges=getProfileTaskRange(true);
<Line#11>  IntegerRanges reduceRanges=getProfileTaskRange(false);
<Line#12>  int progMonitorPollIntervalMillis=Job.getProgressPollInterval(clientConf);
<Line#13>  boolean reportedAfterCompletion=false;
<Line#14>  boolean reportedUberMode=false;
<Line#15>  while (!isComplete() || !reportedAfterCompletion) {
<Line#16>    if (isComplete()) {
<Line#17>      reportedAfterCompletion=true;
<Line#18>    }
<Line#19> else {
<Line#20>      Thread.sleep(progMonitorPollIntervalMillis);
<Line#21>    }
<Line#22>    if (status.getState() == JobStatus.State.PREP) {
<Line#23>      continue;
<Line#24>    }
<Line#25>    if (!reportedUberMode) {
<Line#26>      reportedUberMode=true;
<Line#27>      LOG.info("Job " + jobId + " running in uber mode : "+ isUber());
<Line#28>    }
<Line#29>    String report=(" map " + StringUtils.formatPercent(mapProgress(),0) + " reduce "+ StringUtils.formatPercent(reduceProgress(),0));
<Line#30>    if (!report.equals(lastReport)) {
<Line#31>      LOG.info(report);
<Line#32>      lastReport=report;
<Line#33>    }
<Line#34>    TaskCompletionEvent[] events=getTaskCompletionEvents(eventCounter,10);
<Line#35>    eventCounter+=events.length;
<Line#36>    printTaskEvents(events,filter,profiling,mapRanges,reduceRanges);
<Line#37>  }
<Line#38>  boolean success=isSuccessful();
<Line#39>  if (success) {
<Line#40>    LOG.info("Job " + jobId + " completed successfully");
<Line#41>  }
<Line#42> else {
<Line#43>    LOG.info("Job " + jobId + " failed with state "+ status.getState()+ " due to: "+ status.getFailureInfo());
<Line#44>  }
<Line#45>  Counters counters=getCounters();
<Line#46>  if (counters != null) {
<Line#47>    LOG.info(counters.toString());
<Line#48>  }
<Line#49>  return success;
<Line#50>}
Label: <Line#31> LOG.info(report)

