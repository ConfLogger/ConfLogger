select <line#> and insert log level and Log verbosity message after <line#>

Query: Target method code:
<Line#0>private synchronized void initServer() throws IOException {
<Line#1>if (mStateMachine != null) {
<Line#2>mStateMachine.close();
<Line#3>}
<Line#4>mStateMachine = new JournalStateMachine(mJournals, this, mStateMachineStorage);
<Line#5>
<Line#6>RaftProperties properties = new RaftProperties();
<Line#7>Parameters parameters = new Parameters();
<Line#8>
<Line#9>// TODO(feng): implement a custom RpcType to integrate with Alluxio authentication service
<Line#10>RaftConfigKeys.Rpc.setType(properties, SupportedRpcType.GRPC);
<Line#11>
<Line#12>// RPC port
<Line#13>GrpcConfigKeys.Server.setPort(properties, mLocalAddress.getPort());
<Line#14>
<Line#15>// storage path
<Line#16>maybeMigrateOldJournal();
<Line#17>RaftServerConfigKeys.setStorageDir(properties, Collections.singletonList(
<Line#18>RaftJournalUtils.getRaftJournalDir(mPath)));
<Line#19>
<Line#20>// segment size
<Line#21>long segmentSize = Configuration.getBytes(PropertyKey.MASTER_JOURNAL_LOG_SIZE_BYTES_MAX);
<Line#22>LOG.debug("Creating journal with max segment size {}", segmentSize);
<Line#23>if (segmentSize > Integer.MAX_VALUE) {
<Line#24>segmentSize = Integer.MAX_VALUE;
<Line#25>}
<Line#26>RaftServerConfigKeys.Log.setSegmentSizeMax(properties, SizeInBytes.valueOf(segmentSize));
<Line#27>
<Line#28>// the following configurations need to be changed when the single journal entry
<Line#29>// is unexpectedly big.
<Line#30>RaftServerConfigKeys.Log.Appender.setBufferByteLimit(properties,
<Line#31>SizeInBytes.valueOf(Configuration.global()
<Line#32>.getBytes(PropertyKey.MASTER_EMBEDDED_JOURNAL_ENTRY_SIZE_MAX)));
<Line#33>// this property defines the maximum allowed size of the concurrent journal flush requests.
<Line#34>// if the total size of the journal entries contained in the flush requests
<Line#35>// are bigger than the given threshold, Ratis may error out as
<Line#36>// `Log entry size 117146048 exceeds the max buffer limit of 104857600`
<Line#37>RaftServerConfigKeys.Write.setByteLimit(properties,
<Line#38>SizeInBytes.valueOf(Configuration.global()
<Line#39>.getBytes(PropertyKey.MASTER_EMBEDDED_JOURNAL_FLUSH_SIZE_MAX)));
<Line#40>// this property defines the maximum allowed size of the concurrent journal write IO tasks.
<Line#41>// if the total size of the journal entries contained in the write IO tasks
<Line#42>// are bigger than the given threshold, ratis may error out as
<Line#43>// `SegmentedRaftLogWorker: elementNumBytes = 78215699 > byteLimit = 67108864`
<Line#44>RaftServerConfigKeys.Log.setQueueByteLimit(properties, (int) Configuration
<Line#45>.global().getBytes(PropertyKey.MASTER_EMBEDDED_JOURNAL_FLUSH_SIZE_MAX));
<Line#46>
<Line#47>// Override election/heartbeat timeouts for single master cluster if election timeout is not
<Line#48>// set explicitly. This is to speed up single master cluster boot-up.
<Line#49>long min = Configuration.getMs(PropertyKey.MASTER_EMBEDDED_JOURNAL_MIN_ELECTION_TIMEOUT);
<Line#50>long max = Configuration.getMs(PropertyKey.MASTER_EMBEDDED_JOURNAL_MAX_ELECTION_TIMEOUT);
<Line#51>if (mClusterAddresses.size() == 1
<Line#52>&& !Configuration.isSetByUser(
<Line#53>PropertyKey.MASTER_EMBEDDED_JOURNAL_MIN_ELECTION_TIMEOUT)
<Line#54>&& !Configuration.isSetByUser(
<Line#55>PropertyKey.MASTER_EMBEDDED_JOURNAL_MAX_ELECTION_TIMEOUT)) {
<Line#56>LOG.info("Overriding election timeout to {}ms for single master cluster.",
<Line#57>SINGLE_MASTER_ELECTION_TIMEOUT_MS);
<Line#58>min = SINGLE_MASTER_ELECTION_TIMEOUT_MS;
<Line#59>max = 2 * min;
<Line#60>}
<Line#61>Preconditions.checkState(min < max,
<Line#62>"Min election timeout (%sms) should be less than max election timeout (%sms)", min, max);
<Line#63>
<Line#64>// election timeout, heartbeat timeout is automatically 1/2 of the value
<Line#65>RaftServerConfigKeys.Rpc.setTimeoutMin(properties,
<Line#66>TimeDuration.valueOf(min, TimeUnit.MILLISECONDS));
<Line#67>RaftServerConfigKeys.Rpc.setTimeoutMax(properties,
<Line#68>TimeDuration.valueOf(max, TimeUnit.MILLISECONDS));
<Line#69>
<Line#70>// request timeout
<Line#71>RaftServerConfigKeys.Rpc.setRequestTimeout(properties, TimeDuration.valueOf(
<Line#72>Configuration.getMs(PropertyKey.MASTER_EMBEDDED_JOURNAL_TRANSPORT_REQUEST_TIMEOUT_MS),
<Line#73>TimeUnit.MILLISECONDS));
<Line#74>
<Line#75>RaftServerConfigKeys.RetryCache.setExpiryTime(properties, TimeDuration.valueOf(
<Line#76>Configuration.getMs(PropertyKey.MASTER_EMBEDDED_JOURNAL_RETRY_CACHE_EXPIRY_TIME),
<Line#77>TimeUnit.MILLISECONDS));
<Line#78>
<Line#79>// snapshot retention
<Line#80>RaftServerConfigKeys.Snapshot.setRetentionFileNum(properties, 2);
<Line#81>
<Line#82>// unsafe flush
<Line#83>RaftServerConfigKeys.Log.setUnsafeFlushEnabled(properties,
<Line#84>Configuration.getBoolean(PropertyKey.MASTER_EMBEDDED_JOURNAL_UNSAFE_FLUSH_ENABLED));
<Line#85>
<Line#86>// snapshot interval
<Line#87>RaftServerConfigKeys.Snapshot.setAutoTriggerEnabled(
<Line#88>properties, true);
<Line#89>long snapshotAutoTriggerThreshold =
<Line#90>Configuration.getLong(PropertyKey.MASTER_JOURNAL_CHECKPOINT_PERIOD_ENTRIES);
<Line#91>RaftServerConfigKeys.Snapshot.setAutoTriggerThreshold(properties,
<Line#92>snapshotAutoTriggerThreshold);
<Line#93>// minimum distance between two snapshots in number of log entries
<Line#94>RaftServerConfigKeys.Snapshot.setCreationGap(properties, 1L);
<Line#95>
<Line#96>if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_LOCAL_LOG_COMPACTION)) {
<Line#97>// purges log files after taking a snapshot successfully
<Line#98>RaftServerConfigKeys.Log.setPurgeUptoSnapshotIndex(properties, true);
<Line#99>// leaves no gap between log file purges: all log files included in a newly installed
<Line#100>// snapshot are purged right away
<Line#101>RaftServerConfigKeys.Log.setPurgeGap(properties, 1);
<Line#102>}
<Line#103>
<Line#104>RaftServerConfigKeys.Log.Appender.setInstallSnapshotEnabled(
<Line#105>properties, false);
<Line#106>
<Line#107>// if left enabled, the System.exit() called by Ratis can deadlock with the AlluxioMaster
<Line#108>// process shutdown hook. Description:
<Line#109>// * The AlluxioMaster starts the RaftJournalSystem using RaftJournalSystem.startInternal().
<Line#110>//   It now holds a synchronized lock on RaftJournalSystem.
<Line#111>// * startInternal calls mServer.start() and fails for any reason, calling System.exit(int) -->
<Line#112>//   Runtime.getRuntime().exit(int) in Ratis.
<Line#113>// * Runtime.getRuntime().exit(int) calls the shutdown hooks, including the {@link ProcessUtils)
<Line#114>//   --> process.stop() --> RaftJournalSystem.stopInternal(), which cannot proceed because of
<Line#115>//   the synchronized lock on RaftJournalSystem.
<Line#116>// This line disables the System.exit(int) call in Ratis internally in favor of an
<Line#117>// Exception being thrown. This prevents the deadlock.
<Line#118>org.apache.ratis.util.ExitUtils.disableSystemExit();
<Line#119>
<Line#120>/*
<Line#121>* Soft disable RPC level safety.
<Line#122>*
<Line#123>* Without these overrides, the leader will step down upon detecting a long running GC over
<Line#124>* 10sec. This is not desirable for a single master cluster. Additionally, reduced safety should
<Line#125>* be provided via standard leader election in clustered mode.
<Line#126>*/
<Line#127>RaftServerConfigKeys.Rpc.setSlownessTimeout(properties,
<Line#128>TimeDuration.valueOf(Long.MAX_VALUE, TimeUnit.MILLISECONDS));
<Line#129>RaftServerConfigKeys.LeaderElection.setLeaderStepDownWaitTime(properties,
<Line#130>TimeDuration.valueOf(Long.MAX_VALUE, TimeUnit.MILLISECONDS));
<Line#131>
<Line#132>long messageSize = Configuration.getBytes(
<Line#133>PropertyKey.MASTER_EMBEDDED_JOURNAL_TRANSPORT_MAX_INBOUND_MESSAGE_SIZE);
<Line#134>GrpcConfigKeys.setMessageSizeMax(properties,
<Line#135>SizeInBytes.valueOf(messageSize));
<Line#136>RatisDropwizardExports.registerRatisMetricReporters(mRatisMetricsMap);
<Line#137>
<Line#138>mergeAlluxioRatisConfig(properties);
<Line#139>
<Line#140>// TODO(feng): clean up embedded journal configuration
<Line#141>// build server
<Line#142>mServer = RaftServer.newBuilder()
<Line#143>.setServerId(mPeerId)
<Line#144>.setGroup(mRaftGroup)
<Line#145>.setStateMachine(mStateMachine)
<Line#146>.setProperties(properties)
<Line#147>.setParameters(parameters)
<Line#148>.build();
<Line#149>super.registerMetrics();
<Line#150>MetricsSystem.registerGaugeIfAbsent(MetricKey.CLUSTER_LEADER_INDEX.getName(),
<Line#151>this::getLeaderIndex);
<Line#152>MetricsSystem.registerGaugeIfAbsent(MetricKey.MASTER_ROLE_ID.getName(), this::getRoleId);
<Line#153>MetricsSystem.registerGaugeIfAbsent(MetricKey.CLUSTER_LEADER_ID.getName(), this::getLeaderId);
<Line#154>}

Example 1:
<Line#1>{
<Line#2>  LOG.info("Process starting.");
<Line#3>  mRunning=true;
<Line#4>  mJournalSystem.start();
<Line#5>  startMasterComponents(false);
<Line#6>  mServices.forEach(SimpleService::start);
<Line#7>  if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_CATCHUP_PROTECT_ENABLED)) {
<Line#8>    LOG.info("Waiting for journals to catch up.");
<Line#9>    mJournalSystem.waitForCatchup();
<Line#10>  }
<Line#11>  LOG.info("Starting leader selector.");
<Line#12>  mLeaderSelector.start(getRpcAddress());
<Line#13>  while (!Thread.interrupted()) {
<Line#14>    if (!mRunning) {
<Line#15>      LOG.info("master process is not running. Breaking out");
<Line#16>      break;
<Line#17>    }
<Line#18>    if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_CATCHUP_PROTECT_ENABLED)) {
<Line#19>      LOG.info("Waiting for journals to catch up.");
<Line#20>      mJournalSystem.waitForCatchup();
<Line#21>    }
<Line#22>    LOG.info("Started in stand-by mode.");
<Line#23>    mLeaderSelector.waitForState(NodeState.PRIMARY);
<Line#24>    mLastGainPrimacyTime=CommonUtils.getCurrentMs();
<Line#25>    if (!mRunning) {
<Line#26>      break;
<Line#27>    }
<Line#28>    try {
<Line#29>      if (!promote()) {
<Line#30>        continue;
<Line#31>      }
<Line#32>      mServices.forEach(SimpleService::promote);
<Line#33>      LOG.info("Primary started");
<Line#34>    }
<Line#35> catch (    Throwable t) {
<Line#36>      if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_BACKUP_WHEN_CORRUPTED)) {
<Line#37>        takeEmergencyBackup();
<Line#38>      }
<Line#39>      throw t;
<Line#40>    }
<Line#41>    mLeaderSelector.waitForState(NodeState.STANDBY);
<Line#42>    mLastLosePrimacyTime=CommonUtils.getCurrentMs();
<Line#43>    if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_EXIT_ON_DEMOTION)) {
<Line#44>      stop();
<Line#45>    }
<Line#46> else {
<Line#47>      if (!mRunning) {
<Line#48>        break;
<Line#49>      }
<Line#50>      ExecutorService es=null;
<Line#51>      List<Future<Void>> dumpFutures=new ArrayList<>();
<Line#52>      try {
<Line#53>        es=Executors.newFixedThreadPool(2,ThreadFactoryUtils.build("info-dumper-%d",true));
<Line#54>        dumpFutures.addAll(ProcessUtils.dumpInformationOnFailover(es));
<Line#55>      }
<Line#56> catch (      Throwable t) {
<Line#57>        LOG.warn("Failed to dump metrics and jstacks before demotion",t);
<Line#58>      }
<Line#59>      LOG.info("Losing the leadership.");
<Line#60>      mServices.forEach(SimpleService::demote);
<Line#61>      demote();
<Line#62>      for (      Future<Void> f : dumpFutures) {
<Line#63>        try {
<Line#64>          f.get();
<Line#65>        }
<Line#66> catch (        InterruptedException|ExecutionException e) {
<Line#67>          LOG.warn("Failed to dump metrics and jstacks before demotion",e);
<Line#68>        }
<Line#69>      }
<Line#70>      if (es != null) {
<Line#71>        es.shutdownNow();
<Line#72>      }
<Line#73>    }
<Line#74>  }
<Line#75>}
Label: <Line#2> LOG.info("Process starting.")

Example 2:
<Line#1>{
<Line#2>  LOG.info("Process starting.");
<Line#3>  mRunning=true;
<Line#4>  mJournalSystem.start();
<Line#5>  startMasterComponents(false);
<Line#6>  mServices.forEach(SimpleService::start);
<Line#7>  if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_CATCHUP_PROTECT_ENABLED)) {
<Line#8>    LOG.info("Waiting for journals to catch up.");
<Line#9>    mJournalSystem.waitForCatchup();
<Line#10>  }
<Line#11>  LOG.info("Starting leader selector.");
<Line#12>  mLeaderSelector.start(getRpcAddress());
<Line#13>  while (!Thread.interrupted()) {
<Line#14>    if (!mRunning) {
<Line#15>      LOG.info("master process is not running. Breaking out");
<Line#16>      break;
<Line#17>    }
<Line#18>    if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_CATCHUP_PROTECT_ENABLED)) {
<Line#19>      LOG.info("Waiting for journals to catch up.");
<Line#20>      mJournalSystem.waitForCatchup();
<Line#21>    }
<Line#22>    LOG.info("Started in stand-by mode.");
<Line#23>    mLeaderSelector.waitForState(NodeState.PRIMARY);
<Line#24>    mLastGainPrimacyTime=CommonUtils.getCurrentMs();
<Line#25>    if (!mRunning) {
<Line#26>      break;
<Line#27>    }
<Line#28>    try {
<Line#29>      if (!promote()) {
<Line#30>        continue;
<Line#31>      }
<Line#32>      mServices.forEach(SimpleService::promote);
<Line#33>      LOG.info("Primary started");
<Line#34>    }
<Line#35> catch (    Throwable t) {
<Line#36>      if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_BACKUP_WHEN_CORRUPTED)) {
<Line#37>        takeEmergencyBackup();
<Line#38>      }
<Line#39>      throw t;
<Line#40>    }
<Line#41>    mLeaderSelector.waitForState(NodeState.STANDBY);
<Line#42>    mLastLosePrimacyTime=CommonUtils.getCurrentMs();
<Line#43>    if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_EXIT_ON_DEMOTION)) {
<Line#44>      stop();
<Line#45>    }
<Line#46> else {
<Line#47>      if (!mRunning) {
<Line#48>        break;
<Line#49>      }
<Line#50>      ExecutorService es=null;
<Line#51>      List<Future<Void>> dumpFutures=new ArrayList<>();
<Line#52>      try {
<Line#53>        es=Executors.newFixedThreadPool(2,ThreadFactoryUtils.build("info-dumper-%d",true));
<Line#54>        dumpFutures.addAll(ProcessUtils.dumpInformationOnFailover(es));
<Line#55>      }
<Line#56> catch (      Throwable t) {
<Line#57>        LOG.warn("Failed to dump metrics and jstacks before demotion",t);
<Line#58>      }
<Line#59>      LOG.info("Losing the leadership.");
<Line#60>      mServices.forEach(SimpleService::demote);
<Line#61>      demote();
<Line#62>      for (      Future<Void> f : dumpFutures) {
<Line#63>        try {
<Line#64>          f.get();
<Line#65>        }
<Line#66> catch (        InterruptedException|ExecutionException e) {
<Line#67>          LOG.warn("Failed to dump metrics and jstacks before demotion",e);
<Line#68>        }
<Line#69>      }
<Line#70>      if (es != null) {
<Line#71>        es.shutdownNow();
<Line#72>      }
<Line#73>    }
<Line#74>  }
<Line#75>}
Label: <Line#8> LOG.info("Waiting for journals to catch up.")

Example 3:
<Line#1>{
<Line#2>  LOG.info("Process starting.");
<Line#3>  mRunning=true;
<Line#4>  mJournalSystem.start();
<Line#5>  startMasterComponents(false);
<Line#6>  mServices.forEach(SimpleService::start);
<Line#7>  if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_CATCHUP_PROTECT_ENABLED)) {
<Line#8>    LOG.info("Waiting for journals to catch up.");
<Line#9>    mJournalSystem.waitForCatchup();
<Line#10>  }
<Line#11>  LOG.info("Starting leader selector.");
<Line#12>  mLeaderSelector.start(getRpcAddress());
<Line#13>  while (!Thread.interrupted()) {
<Line#14>    if (!mRunning) {
<Line#15>      LOG.info("master process is not running. Breaking out");
<Line#16>      break;
<Line#17>    }
<Line#18>    if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_CATCHUP_PROTECT_ENABLED)) {
<Line#19>      LOG.info("Waiting for journals to catch up.");
<Line#20>      mJournalSystem.waitForCatchup();
<Line#21>    }
<Line#22>    LOG.info("Started in stand-by mode.");
<Line#23>    mLeaderSelector.waitForState(NodeState.PRIMARY);
<Line#24>    mLastGainPrimacyTime=CommonUtils.getCurrentMs();
<Line#25>    if (!mRunning) {
<Line#26>      break;
<Line#27>    }
<Line#28>    try {
<Line#29>      if (!promote()) {
<Line#30>        continue;
<Line#31>      }
<Line#32>      mServices.forEach(SimpleService::promote);
<Line#33>      LOG.info("Primary started");
<Line#34>    }
<Line#35> catch (    Throwable t) {
<Line#36>      if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_BACKUP_WHEN_CORRUPTED)) {
<Line#37>        takeEmergencyBackup();
<Line#38>      }
<Line#39>      throw t;
<Line#40>    }
<Line#41>    mLeaderSelector.waitForState(NodeState.STANDBY);
<Line#42>    mLastLosePrimacyTime=CommonUtils.getCurrentMs();
<Line#43>    if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_EXIT_ON_DEMOTION)) {
<Line#44>      stop();
<Line#45>    }
<Line#46> else {
<Line#47>      if (!mRunning) {
<Line#48>        break;
<Line#49>      }
<Line#50>      ExecutorService es=null;
<Line#51>      List<Future<Void>> dumpFutures=new ArrayList<>();
<Line#52>      try {
<Line#53>        es=Executors.newFixedThreadPool(2,ThreadFactoryUtils.build("info-dumper-%d",true));
<Line#54>        dumpFutures.addAll(ProcessUtils.dumpInformationOnFailover(es));
<Line#55>      }
<Line#56> catch (      Throwable t) {
<Line#57>        LOG.warn("Failed to dump metrics and jstacks before demotion",t);
<Line#58>      }
<Line#59>      LOG.info("Losing the leadership.");
<Line#60>      mServices.forEach(SimpleService::demote);
<Line#61>      demote();
<Line#62>      for (      Future<Void> f : dumpFutures) {
<Line#63>        try {
<Line#64>          f.get();
<Line#65>        }
<Line#66> catch (        InterruptedException|ExecutionException e) {
<Line#67>          LOG.warn("Failed to dump metrics and jstacks before demotion",e);
<Line#68>        }
<Line#69>      }
<Line#70>      if (es != null) {
<Line#71>        es.shutdownNow();
<Line#72>      }
<Line#73>    }
<Line#74>  }
<Line#75>}
Label: <Line#11> LOG.info("Starting leader selector.")

Example 4:
<Line#1>{
<Line#2>  LOG.info("Process starting.");
<Line#3>  mRunning=true;
<Line#4>  mJournalSystem.start();
<Line#5>  startMasterComponents(false);
<Line#6>  mServices.forEach(SimpleService::start);
<Line#7>  if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_CATCHUP_PROTECT_ENABLED)) {
<Line#8>    LOG.info("Waiting for journals to catch up.");
<Line#9>    mJournalSystem.waitForCatchup();
<Line#10>  }
<Line#11>  LOG.info("Starting leader selector.");
<Line#12>  mLeaderSelector.start(getRpcAddress());
<Line#13>  while (!Thread.interrupted()) {
<Line#14>    if (!mRunning) {
<Line#15>      LOG.info("master process is not running. Breaking out");
<Line#16>      break;
<Line#17>    }
<Line#18>    if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_CATCHUP_PROTECT_ENABLED)) {
<Line#19>      LOG.info("Waiting for journals to catch up.");
<Line#20>      mJournalSystem.waitForCatchup();
<Line#21>    }
<Line#22>    LOG.info("Started in stand-by mode.");
<Line#23>    mLeaderSelector.waitForState(NodeState.PRIMARY);
<Line#24>    mLastGainPrimacyTime=CommonUtils.getCurrentMs();
<Line#25>    if (!mRunning) {
<Line#26>      break;
<Line#27>    }
<Line#28>    try {
<Line#29>      if (!promote()) {
<Line#30>        continue;
<Line#31>      }
<Line#32>      mServices.forEach(SimpleService::promote);
<Line#33>      LOG.info("Primary started");
<Line#34>    }
<Line#35> catch (    Throwable t) {
<Line#36>      if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_BACKUP_WHEN_CORRUPTED)) {
<Line#37>        takeEmergencyBackup();
<Line#38>      }
<Line#39>      throw t;
<Line#40>    }
<Line#41>    mLeaderSelector.waitForState(NodeState.STANDBY);
<Line#42>    mLastLosePrimacyTime=CommonUtils.getCurrentMs();
<Line#43>    if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_EXIT_ON_DEMOTION)) {
<Line#44>      stop();
<Line#45>    }
<Line#46> else {
<Line#47>      if (!mRunning) {
<Line#48>        break;
<Line#49>      }
<Line#50>      ExecutorService es=null;
<Line#51>      List<Future<Void>> dumpFutures=new ArrayList<>();
<Line#52>      try {
<Line#53>        es=Executors.newFixedThreadPool(2,ThreadFactoryUtils.build("info-dumper-%d",true));
<Line#54>        dumpFutures.addAll(ProcessUtils.dumpInformationOnFailover(es));
<Line#55>      }
<Line#56> catch (      Throwable t) {
<Line#57>        LOG.warn("Failed to dump metrics and jstacks before demotion",t);
<Line#58>      }
<Line#59>      LOG.info("Losing the leadership.");
<Line#60>      mServices.forEach(SimpleService::demote);
<Line#61>      demote();
<Line#62>      for (      Future<Void> f : dumpFutures) {
<Line#63>        try {
<Line#64>          f.get();
<Line#65>        }
<Line#66> catch (        InterruptedException|ExecutionException e) {
<Line#67>          LOG.warn("Failed to dump metrics and jstacks before demotion",e);
<Line#68>        }
<Line#69>      }
<Line#70>      if (es != null) {
<Line#71>        es.shutdownNow();
<Line#72>      }
<Line#73>    }
<Line#74>  }
<Line#75>}
Label: <Line#15> LOG.info("master process is not running. Breaking out")

Example 5:
<Line#1>{
<Line#2>  LOG.info("Process starting.");
<Line#3>  mRunning=true;
<Line#4>  mJournalSystem.start();
<Line#5>  startMasterComponents(false);
<Line#6>  mServices.forEach(SimpleService::start);
<Line#7>  if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_CATCHUP_PROTECT_ENABLED)) {
<Line#8>    LOG.info("Waiting for journals to catch up.");
<Line#9>    mJournalSystem.waitForCatchup();
<Line#10>  }
<Line#11>  LOG.info("Starting leader selector.");
<Line#12>  mLeaderSelector.start(getRpcAddress());
<Line#13>  while (!Thread.interrupted()) {
<Line#14>    if (!mRunning) {
<Line#15>      LOG.info("master process is not running. Breaking out");
<Line#16>      break;
<Line#17>    }
<Line#18>    if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_CATCHUP_PROTECT_ENABLED)) {
<Line#19>      LOG.info("Waiting for journals to catch up.");
<Line#20>      mJournalSystem.waitForCatchup();
<Line#21>    }
<Line#22>    LOG.info("Started in stand-by mode.");
<Line#23>    mLeaderSelector.waitForState(NodeState.PRIMARY);
<Line#24>    mLastGainPrimacyTime=CommonUtils.getCurrentMs();
<Line#25>    if (!mRunning) {
<Line#26>      break;
<Line#27>    }
<Line#28>    try {
<Line#29>      if (!promote()) {
<Line#30>        continue;
<Line#31>      }
<Line#32>      mServices.forEach(SimpleService::promote);
<Line#33>      LOG.info("Primary started");
<Line#34>    }
<Line#35> catch (    Throwable t) {
<Line#36>      if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_BACKUP_WHEN_CORRUPTED)) {
<Line#37>        takeEmergencyBackup();
<Line#38>      }
<Line#39>      throw t;
<Line#40>    }
<Line#41>    mLeaderSelector.waitForState(NodeState.STANDBY);
<Line#42>    mLastLosePrimacyTime=CommonUtils.getCurrentMs();
<Line#43>    if (Configuration.getBoolean(PropertyKey.MASTER_JOURNAL_EXIT_ON_DEMOTION)) {
<Line#44>      stop();
<Line#45>    }
<Line#46> else {
<Line#47>      if (!mRunning) {
<Line#48>        break;
<Line#49>      }
<Line#50>      ExecutorService es=null;
<Line#51>      List<Future<Void>> dumpFutures=new ArrayList<>();
<Line#52>      try {
<Line#53>        es=Executors.newFixedThreadPool(2,ThreadFactoryUtils.build("info-dumper-%d",true));
<Line#54>        dumpFutures.addAll(ProcessUtils.dumpInformationOnFailover(es));
<Line#55>      }
<Line#56> catch (      Throwable t) {
<Line#57>        LOG.warn("Failed to dump metrics and jstacks before demotion",t);
<Line#58>      }
<Line#59>      LOG.info("Losing the leadership.");
<Line#60>      mServices.forEach(SimpleService::demote);
<Line#61>      demote();
<Line#62>      for (      Future<Void> f : dumpFutures) {
<Line#63>        try {
<Line#64>          f.get();
<Line#65>        }
<Line#66> catch (        InterruptedException|ExecutionException e) {
<Line#67>          LOG.warn("Failed to dump metrics and jstacks before demotion",e);
<Line#68>        }
<Line#69>      }
<Line#70>      if (es != null) {
<Line#71>        es.shutdownNow();
<Line#72>      }
<Line#73>    }
<Line#74>  }
<Line#75>}
Label: <Line#22> LOG.info("Started in stand-by mode.")

